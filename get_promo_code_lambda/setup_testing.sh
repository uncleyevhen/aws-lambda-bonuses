#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è API Gateway endpoint
# —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤

set -e

# –ö–æ–ª—å–æ—Ä–∏
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è API endpoint
get_api_endpoint() {
    log_info "–®—É–∫–∞—î–º–æ API Gateway endpoint..."
    
    # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ API –ø–æ —ñ–º–µ–Ω—ñ
    API_ENDPOINT=$(aws apigatewayv2 get-apis --query 'Items[?Name==`promo-code-api`].ApiEndpoint' --output text 2>/dev/null)
    
    if [ -z "$API_ENDPOINT" ] || [ "$API_ENDPOINT" == "None" ]; then
        log_warning "API –∑ –Ω–∞–∑–≤–æ—é 'promo-code-api' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        log_info "–ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ HTTP APIs..."
        
        aws apigatewayv2 get-apis --query 'Items[].{Name:Name,Endpoint:ApiEndpoint,Id:ApiId}' --output table
        
        log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–Ω–∞–π—Ç–∏ endpoint."
        log_info "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π endpoint –∑ —Ç–∞–±–ª–∏—Ü—ñ –≤–∏—â–µ"
        log_info "—Ç–∞ –æ–Ω–æ–≤—ñ—Ç—å —Ñ–∞–π–ª–∏ test_*.py –≤—Ä—É—á–Ω—É"
        return 1
    fi
    
    log_success "–ó–Ω–∞–π–¥–µ–Ω–æ API endpoint: ${API_ENDPOINT}"
    return 0
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
update_test_files() {
    local endpoint="$1"
    local full_endpoint="${endpoint}/get-code"
    
    log_info "–û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ –∑ endpoint: ${full_endpoint}"
    
    # –û–Ω–æ–≤–ª—é—î–º–æ test_lambda_integration.py
    if [ -f "test_lambda_integration.py" ]; then
        sed -i.bak "s|https://YOUR_API_ID.execute-api.eu-north-1.amazonaws.com/get-code|${full_endpoint}|g" test_lambda_integration.py
        log_success "–û–Ω–æ–≤–ª–µ–Ω–æ test_lambda_integration.py"
    else
        log_warning "–§–∞–π–ª test_lambda_integration.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    fi
    
    # –û–Ω–æ–≤–ª—é—î–º–æ test_api_quick.py
    if [ -f "test_api_quick.py" ]; then
        sed -i.bak "s|https://YOUR_API_ID.execute-api.eu-north-1.amazonaws.com/get-code|${full_endpoint}|g" test_api_quick.py
        log_success "–û–Ω–æ–≤–ª–µ–Ω–æ test_api_quick.py"
    else
        log_warning "–§–∞–π–ª test_api_quick.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    fi
    
    # –í–∏–¥–∞–ª—è—î–º–æ backup —Ñ–∞–π–ª–∏
    rm -f test_lambda_integration.py.bak test_api_quick.py.bak 2>/dev/null || true
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ AWS CLI
check_aws_cli() {
    if ! command -v aws &> /dev/null; then
        log_error "AWS CLI –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
        log_info "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å AWS CLI: https://aws.amazon.com/cli/"
        return 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ AWS credentials
    if ! aws sts get-caller-identity &> /dev/null; then
        log_error "AWS credentials –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ!"
        log_info "–ù–∞–ª–∞—à—Ç—É–π—Ç–µ credentials: aws configure"
        return 1
    fi
    
    log_success "AWS CLI –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    return 0
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è endpoint
test_endpoint() {
    local endpoint="$1/get-code"
    
    log_info "–¢–µ—Å—Ç—É—î–º–æ endpoint: ${endpoint}"
    
    # –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –∑ curl
    local response_code=$(curl -s -o /dev/null -w "%{http_code}" \
        -X POST \
        -H "Content-Type: application/json" \
        -d '{"amount": 50}' \
        "$endpoint" \
        --connect-timeout 10 \
        --max-time 30)
    
    if [ "$response_code" == "200" ]; then
        log_success "Endpoint –ø—Ä–∞—Ü—é—î! (–∫–æ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: 200)"
        return 0
    elif [ "$response_code" == "000" ]; then
        log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ endpoint (—Ç–∞–π–º–∞—É—Ç –∞–±–æ –º–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞)"
        return 1
    else
        log_warning "Endpoint –≤—ñ–¥–ø–æ–≤—ñ–≤ –∑ –∫–æ–¥–æ–º: ${response_code}"
        log_info "–¶–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —è–∫—â–æ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –Ω–µ–º–∞—î –≤ S3"
        return 0
    fi
}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
main() {
    echo "üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ê –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –¢–ï–°–¢–£–í–ê–ù–ù–Ø API"
    echo "=========================================="
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ AWS CLI
    if ! check_aws_cli; then
        exit 1
    fi
    
    # –û—Ç—Ä–∏–º—É—î–º–æ endpoint
    if ! get_api_endpoint; then
        exit 1
    fi
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Ñ–∞–π–ª–∏
    update_test_files "$API_ENDPOINT"
    
    # –¢–µ—Å—Ç—É—î–º–æ endpoint
    test_endpoint "$API_ENDPOINT"
    
    echo ""
    log_success "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    log_info "–¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏:"
    log_info "  python3 test_api_quick.py"
    log_info "  python3 test_lambda_integration.py"
}

# –ó–∞–ø—É—Å–∫
main "$@"
