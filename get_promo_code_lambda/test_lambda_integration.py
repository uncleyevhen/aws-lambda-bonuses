#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó get-promo-code –ª—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ —Ä–µ–ø–ª–µ–Ω—ñ—à —Å–∏—Å—Ç–µ–º–æ—é.

–¶–µ–π —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç—É—î:
1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ —á–µ—Ä–µ–∑ API Gateway
2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ –ø–æ—Ä–æ–≥—ñ–≤
3. –í–∑–∞—î–º–æ–¥—ñ—é –º—ñ–∂ get-promo-code —Ç–∞ replenish-promo-code —Ñ—É–Ω–∫—Ü—ñ—è–º–∏
4. –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –ø—ñ—Å–ª—è –≤–∏–∫–ª–∏–∫—É —Ä–µ–ø–ª–µ–Ω—ñ—à

–í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:
python3 test_lambda_integration.py
"""

import json
import time
import requests
import boto3
import logging
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class LambdaIntegrationTester:
    def __init__(self):
        # AWS –∫–ª—ñ—î–Ω—Ç–∏
        self.lambda_client = boto3.client('lambda', region_name='eu-north-1')
        self.s3_client = boto3.client('s3', region_name='eu-north-1')
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è (–∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à—ñ —Ä–µ–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è)
        self.api_endpoint = "https://k3pok2o5t1.execute-api.eu-north-1.amazonaws.com/get-code"
        self.s3_bucket = "lambda-promo-sessions"
        self.promo_codes_key = "promo-codes/available_codes.json"
        self.used_codes_key = "promo-codes/used_codes_count.json"
        self.get_function_name = "get-promo-code"
        self.replenish_function_name = "replenish-promo-code"
        
        # –¢–µ—Å—Ç–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        self.test_amount = 50  # –¢–µ—Å—Ç–æ–≤–∞ —Å—É–º–∞ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
        self.batch_threshold = 3  # –ó–Ω–∏–∂–µ–Ω–∏–π –ø–æ—Ä—ñ–≥ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        self.min_codes_threshold = 2  # –ú—ñ–Ω—ñ–º—É–º –∫–æ–¥—ñ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
        
    def check_api_endpoint(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π API endpoint"""
        if "YOUR_API_ID" in self.api_endpoint:
            logger.error("‚ùå –ü–û–ú–ò–õ–ö–ê: –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–º—ñ–Ω–∏—Ç–∏ YOUR_API_ID –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π API Gateway endpoint!")
            logger.info("üîß –û—Ç—Ä–∏–º–∞–π—Ç–µ endpoint –∫–æ–º–∞–Ω–¥–æ—é:")
            logger.info("aws apigatewayv2 get-apis --query 'Items[?Name==`promo-code-api`].ApiEndpoint' --output text")
            return False
        return True
    
    def setup_test_environment(self):
        """–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
        logger.info("üîß –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
        initial_codes = {
            str(self.test_amount): [
                f"BON{i:06d}" for i in range(1, 4)  # –¢—ñ–ª—å–∫–∏ 3 –∫–æ–¥–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            ]
        }
        
        try:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏
            self.s3_client.put_object(
                Bucket=self.s3_bucket,
                Key=self.promo_codes_key,
                Body=json.dumps(initial_codes, indent=2),
                ContentType='application/json'
            )
            
            # –û—á–∏—â–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
            self.s3_client.put_object(
                Bucket=self.s3_bucket,
                Key=self.used_codes_key,
                Body=json.dumps({}, indent=2),
                ContentType='application/json'
            )
            
            logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(initial_codes[str(self.test_amount)])} —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {self.test_amount} –≥—Ä–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: {e}")
            return False
    
    def get_s3_state(self):
        """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ —Ç–∞ –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ –∑ S3"""
        try:
            # –ü—Ä–æ–º–æ–∫–æ–¥–∏
            try:
                response = self.s3_client.get_object(Bucket=self.s3_bucket, Key=self.promo_codes_key)
                promo_codes = json.loads(response['Body'].read().decode('utf-8'))
            except self.s3_client.exceptions.NoSuchKey:
                promo_codes = {}
            
            # –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏
            try:
                response = self.s3_client.get_object(Bucket=self.s3_bucket, Key=self.used_codes_key)
                used_counts = json.loads(response['Body'].read().decode('utf-8'))
            except self.s3_client.exceptions.NoSuchKey:
                used_counts = {}
            
            return promo_codes, used_counts
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É S3: {e}")
            return {}, {}
    
    def call_get_promo_api(self, amount):
        """–í–∏–∫–ª–∏–∫–∞—î API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É"""
        try:
            payload = {"amount": amount}
            response = requests.post(
                self.api_endpoint,
                json=payload,
                headers={'Content-Type': 'application/json'},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                return data.get('promo_code'), True
            else:
                logger.error(f"‚ùå API –ø–æ–º–∏–ª–∫–∞ {response.status_code}: {response.text}")
                return None, False
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É API: {e}")
            return None, False
    
    def check_lambda_logs(self, function_name, start_time):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ª–æ–≥–∏ –ª—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü—ñ—ó"""
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CloudWatch Logs (–ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–∞–≤–∞)
            logs_client = boto3.client('logs', region_name='eu-north-1')
            log_group = f'/aws/lambda/{function_name}'
            
            response = logs_client.filter_log_events(
                logGroupName=log_group,
                startTime=int(start_time.timestamp() * 1000),
                filterPattern='[INFO] [Get]'  # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ –Ω–∞—à—ñ –ª–æ–≥–∏
            )
            
            events = response.get('events', [])
            if events:
                logger.info(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(events)} –ª–æ–≥—ñ–≤ –¥–ª—è {function_name}")
                for event in events[-3:]:  # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 3
                    logger.info(f"  üîç {event['message'].strip()}")
            
            return events
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ª–æ–≥–∏ –¥–ª—è {function_name}: {e}")
            return []
    
    def test_promo_code_retrieval(self):
        """–¢–µ—Å—Ç—É—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ —á–µ—Ä–µ–∑ API"""
        logger.info(f"üß™ –¢–ï–°–¢ 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {self.test_amount} –≥—Ä–Ω")
        
        promo_codes_before, used_counts_before = self.get_s3_state()
        codes_before = len(promo_codes_before.get(str(self.test_amount), []))
        
        logger.info(f"üìä –°—Ç–∞–Ω –ü–ï–†–ï–î –∑–∞–ø–∏—Ç–æ–º: {codes_before} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {used_counts_before}")
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ API
        start_time = datetime.now()
        promo_code, success = self.call_get_promo_api(self.test_amount)
        
        if success and promo_code:
            logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –∑–∞–ø–∏—Ç—É
            time.sleep(2)  # –î–∞—î–º–æ —á–∞—Å –Ω–∞ –æ–±—Ä–æ–±–∫—É
            promo_codes_after, used_counts_after = self.get_s3_state()
            codes_after = len(promo_codes_after.get(str(self.test_amount), []))
            
            logger.info(f"üìä –°—Ç–∞–Ω –ü–Ü–°–õ–Ø –∑–∞–ø–∏—Ç—É: {codes_after} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {used_counts_after}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–≥–∏
            self.check_lambda_logs(self.get_function_name, start_time)
            
            return promo_code, codes_before - codes_after == 1
        else:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
            return None, False
    
    def test_batch_trigger(self):
        """–¢–µ—Å—Ç—É—î –∑–∞–ø—É—Å–∫ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ –±–∞—Ç—á-–ø–æ—Ä–æ–≥—É"""
        logger.info(f"üß™ –¢–ï–°–¢ 2: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞—Ç—á-–ø–æ—Ä–æ–≥—É ({self.batch_threshold} –∑–∞–ø–∏—Ç—ñ–≤)")
        
        successful_requests = 0
        promo_codes = []
        
        # –†–æ–±–∏–º–æ –∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ø–æ—Ä–æ–≥—É
        for i in range(self.batch_threshold + 1):
            logger.info(f"üìû –ó–∞–ø–∏—Ç {i+1}/{self.batch_threshold + 1}")
            
            start_time = datetime.now()
            promo_code, success = self.call_get_promo_api(self.test_amount)
            
            if success and promo_code:
                promo_codes.append(promo_code)
                successful_requests += 1
                logger.info(f"  ‚úÖ –£—Å–ø—ñ—à–Ω–æ: {promo_code}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—ñ—Å–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ø–æ—Ä–æ–≥—É
                if successful_requests == self.batch_threshold:
                    logger.info("üöÄ –î–æ—Å—è–≥–Ω—É—Ç–æ –ø–æ—Ä—ñ–≥ –±–∞—Ç—á—É! –û—á—ñ–∫—É—î–º–æ –∑–∞–ø—É—Å–∫ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è...")
                    time.sleep(5)  # –î–∞—î–º–æ —á–∞—Å –Ω–∞ –∑–∞–ø—É—Å–∫ —Ä–µ–ø–ª–µ–Ω—ñ—à
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–≥–∏ —Ä–µ–ø–ª–µ–Ω—ñ—à —Ñ—É–Ω–∫—Ü—ñ—ó
                    replenish_logs = self.check_lambda_logs(self.replenish_function_name, start_time)
                    if replenish_logs:
                        logger.info("‚úÖ –†–µ–ø–ª–µ–Ω—ñ—à —Ñ—É–Ω–∫—Ü—ñ—è –±—É–ª–∞ –≤–∏–∫–ª–∏–∫–∞–Ω–∞!")
                    else:
                        logger.warning("‚ö†Ô∏è –õ–æ–≥–∏ —Ä–µ–ø–ª–µ–Ω—ñ—à —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–º–æ–∂–µ –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—è —á–∞—Å)")
            else:
                logger.error(f"  ‚ùå –ó–∞–ø–∏—Ç {i+1} –Ω–µ –≤–¥–∞–≤—Å—è")
            
            time.sleep(1)  # –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∞—Ç—á-—Ç–µ—Å—Ç—É: {successful_requests} —É—Å–ø—ñ—à–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –∑ {self.batch_threshold + 1}")
        return successful_requests >= self.batch_threshold
    
    def test_low_codes_trigger(self):
        """–¢–µ—Å—Ç—É—î –∑–∞–ø—É—Å–∫ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–∏ –º–∞–ª—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–¥—ñ–≤"""
        logger.info(f"üß™ –¢–ï–°–¢ 3: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Ä–æ–≥—É –º–∞–ª–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–¥—ñ–≤ ({self.min_codes_threshold})")
        
        # –°–ø–æ—á–∞—Ç–∫—É –∑–º–µ–Ω—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥—ñ–≤ –¥–æ –º—ñ–Ω—ñ–º—É–º—É
        promo_codes, _ = self.get_s3_state()
        current_codes = promo_codes.get(str(self.test_amount), [])
        
        if len(current_codes) > self.min_codes_threshold:
            # –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ min_codes_threshold + 1 –∫–æ–¥—ñ–≤
            promo_codes[str(self.test_amount)] = current_codes[:self.min_codes_threshold + 1]
            
            self.s3_client.put_object(
                Bucket=self.s3_bucket,
                Key=self.promo_codes_key,
                Body=json.dumps(promo_codes, indent=2),
                ContentType='application/json'
            )
            logger.info(f"üîß –ó–∞–ª–∏—à–µ–Ω–æ {len(promo_codes[str(self.test_amount)])} –∫–æ–¥—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
        
        # –†–æ–±–∏–º–æ –∑–∞–ø–∏—Ç, —è–∫–∏–π –º–∞—î —Å–ø—É—Å—Ç–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥—ñ–≤ –Ω–∏–∂—á–µ –ø–æ—Ä–æ–≥—É
        start_time = datetime.now()
        promo_code, success = self.call_get_promo_api(self.test_amount)
        
        if success:
            logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code}")
            logger.info("üöÄ –ú–∞—î –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –º–∞–ª—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥—ñ–≤...")
            
            time.sleep(5)  # –î–∞—î–º–æ —á–∞—Å –Ω–∞ –∑–∞–ø—É—Å–∫
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–≥–∏
            replenish_logs = self.check_lambda_logs(self.replenish_function_name, start_time)
            if replenish_logs:
                logger.info("‚úÖ –†–µ–ø–ª–µ–Ω—ñ—à —Ñ—É–Ω–∫—Ü—ñ—è –±—É–ª–∞ –≤–∏–∫–ª–∏–∫–∞–Ω–∞ —á–µ—Ä–µ–∑ –º–∞–ª—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥—ñ–≤!")
                return True
            else:
                logger.warning("‚ö†Ô∏è –õ–æ–≥–∏ —Ä–µ–ø–ª–µ–Ω—ñ—à —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
        else:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
            return False
    
    def test_replenish_effectiveness(self):
        """–¢–µ—Å—Ç—É—î –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤"""
        logger.info("üß™ –¢–ï–°–¢ 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è")
        
        # –°—Ç–∞–Ω –ø–µ—Ä–µ–¥ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è–º
        promo_codes_before, _ = self.get_s3_state()
        codes_before = len(promo_codes_before.get(str(self.test_amount), []))
        
        logger.info(f"üìä –ö–æ–¥—ñ–≤ –ü–ï–†–ï–î –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è–º: {codes_before}")
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ä–µ–ø–ª–µ–Ω—ñ—à —Ñ—É–Ω–∫—Ü—ñ—é –Ω–∞–ø—Ä—è–º—É
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ä–µ–ø–ª–µ–Ω—ñ—à —Ñ—É–Ω–∫—Ü—ñ—é –Ω–∞–ø—Ä—è–º—É...")
            
            payload = {
                'trigger_source': 'manual_test',
                'trigger_reasons': ['testing_replenish_effectiveness']
            }
            
            response = self.lambda_client.invoke(
                FunctionName=self.replenish_function_name,
                InvocationType='RequestResponse',  # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
                Payload=json.dumps(payload)
            )
            
            response_payload = json.loads(response['Payload'].read().decode('utf-8'))
            logger.info(f"üìã –í—ñ–¥–ø–æ–≤—ñ–¥—å —Ä–µ–ø–ª–µ–Ω—ñ—à —Ñ—É–Ω–∫—Ü—ñ—ó: {response_payload}")
            
            # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
            logger.info("‚è≥ –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è (30 —Å–µ–∫—É–Ω–¥)...")
            time.sleep(30)
            
            # –°—Ç–∞–Ω –ø—ñ—Å–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
            promo_codes_after, _ = self.get_s3_state()
            codes_after = len(promo_codes_after.get(str(self.test_amount), []))
            
            logger.info(f"üìä –ö–æ–¥—ñ–≤ –ü–Ü–°–õ–Ø –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: {codes_after}")
            
            if codes_after > codes_before:
                logger.info(f"‚úÖ –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ! –î–æ–¥–∞–Ω–æ {codes_after - codes_before} –∫–æ–¥—ñ–≤")
                return True
            else:
                logger.warning("‚ö†Ô∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥—ñ–≤ –Ω–µ –∑–±—ñ–ª—å—à–∏–ª–∞—Å—è")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–ø–ª–µ–Ω—ñ—à: {e}")
            return False
    
    def run_full_test_suite(self):
        """–ó–∞–ø—É—Å–∫–∞—î –ø–æ–≤–Ω–∏–π –Ω–∞–±—ñ—Ä —Ç–µ—Å—Ç—ñ–≤"""
        logger.info("üöÄ –ü–û–ß–ê–¢–û–ö –ü–û–í–ù–û–ì–û –¢–ï–°–¢–£–í–ê–ù–ù–Ø –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á")
        logger.info("=" * 60)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API endpoint
        if not self.check_api_endpoint():
            return False
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞
        if not self.setup_test_environment():
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ")
            return False
        
        results = {
            'basic_retrieval': False,
            'batch_trigger': False,
            'low_codes_trigger': False,
            'replenish_effectiveness': False
        }
        
        try:
            # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
            _, results['basic_retrieval'] = self.test_promo_code_retrieval()
            
            # –¢–µ—Å—Ç 2: –ë–∞—Ç—á-—Ç—Ä–∏–≥–µ—Ä
            results['batch_trigger'] = self.test_batch_trigger()
            
            # –¢–µ—Å—Ç 3: –¢—Ä–∏–≥–µ—Ä –º–∞–ª–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–¥—ñ–≤
            results['low_codes_trigger'] = self.test_low_codes_trigger()
            
            # –¢–µ—Å—Ç 4: –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
            results['replenish_effectiveness'] = self.test_replenish_effectiveness()
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        
        # –ü—ñ–¥—Å—É–º–æ–∫
        logger.info("\nüìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
        logger.info("=" * 40)
        
        total_tests = len(results)
        passed_tests = sum(results.values())
        
        for test_name, passed in results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if passed else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û"
            logger.info(f"  {test_name}: {status}")
        
        logger.info(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed_tests == total_tests:
            logger.info("üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û! –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ.")
        else:
            logger.warning("‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
        
        return passed_tests == total_tests

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤"""
    print("üß™ –¢–ï–°–¢–£–í–ê–õ–¨–ù–ò–ö –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á GET-PROMO-CODE ‚Üî REPLENISH")
    print("=" * 60)
    
    tester = LambdaIntegrationTester()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤–Ω–∏–π –Ω–∞–±—ñ—Ä —Ç–µ—Å—Ç—ñ–≤
    success = tester.run_full_test_suite()
    
    if success:
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        exit(0)
    else:
        print("\n‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ.")
        exit(1)

if __name__ == "__main__":
    main()
