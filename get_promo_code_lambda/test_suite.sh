#!/bin/bash

# –ì–æ–ª–æ–≤–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è get-promo-code ‚Üî replenish —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó

set -e

# –ö–æ–ª—å–æ—Ä–∏
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

log_header() {
    echo -e "${PURPLE}$1${NC}"
}

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É –º–µ–Ω—é
show_menu() {
    echo -e "${CYAN}üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø GET-PROMO-CODE ‚Üî REPLENISH –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á${NC}"
    echo "========================================================="
    echo ""
    echo "üîß –ü–Ü–î–ì–û–¢–û–í–ö–ê:"
    echo "  1) –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–∑–Ω–∞–π—Ç–∏ API endpoint)"
    echo "  2) –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω S3 (–ø—Ä–æ–º–æ–∫–æ–¥–∏ —Ç–∞ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏)"
    echo "  3) –î–æ–¥–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏"
    echo ""
    echo "üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø:"
    echo "  4) –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç API"
    echo "  5) –ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó"
    echo "  6) –¢–µ—Å—Ç —Ç—ñ–ª—å–∫–∏ —Ä–µ–ø–ª–µ–Ω—ñ—à —Ñ—É–Ω–∫—Ü—ñ—ó"
    echo ""
    echo "üìä –ú–û–ù–Ü–¢–û–†–ò–ù–ì:"
    echo "  7) –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥—ñ–≤ Lambda —Ñ—É–Ω–∫—Ü—ñ–π"
    echo "  8) –°—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü—ñ–π —Ç–∞ –º–µ—Ç—Ä–∏–∫–∏"
    echo ""
    echo "üîÑ –£–¢–ò–õ–Ü–¢–ò:"
    echo "  9) –°–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"
    echo " 10) –ü—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è"
    echo " 11) –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é"
    echo ""
    echo " 12) ‚ùå –í–∏—Ö—ñ–¥"
    echo ""
    echo -n "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-12): "
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
check_dependencies() {
    local missing_deps=()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ AWS CLI
    if ! command -v aws &> /dev/null; then
        missing_deps+=("aws-cli")
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Python
    if ! command -v python3 &> /dev/null; then
        missing_deps+=("python3")
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ curl
    if ! command -v curl &> /dev/null; then
        missing_deps+=("curl")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        log_error "–í—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: ${missing_deps[*]}"
        log_info "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É"
        return 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ AWS credentials
    if ! aws sts get-caller-identity &> /dev/null; then
        log_error "AWS credentials –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ!"
        log_info "–ù–∞–ª–∞—à—Ç—É–π—Ç–µ credentials: aws configure"
        return 1
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
setup_testing() {
    log_header "üîß –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –¢–ï–°–¢–£–í–ê–ù–ù–Ø"
    echo ""
    
    if [ -f "./setup_testing.sh" ]; then
        ./setup_testing.sh
    else
        log_error "–°–∫—Ä–∏–ø—Ç setup_testing.sh –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ S3
check_s3_status() {
    log_header "üìä –ü–ï–†–ï–í–Ü–†–ö–ê –°–¢–ê–ù–£ S3"
    echo ""
    
    if [ -f "./check_s3_state.py" ]; then
        python3 check_s3_state.py --verbose
    else
        log_error "–°–∫—Ä–∏–ø—Ç check_s3_state.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
add_test_codes() {
    log_header "‚ûï –î–û–î–ê–í–ê–ù–ù–Ø –¢–ï–°–¢–û–í–ò–• –ü–†–û–ú–û–ö–û–î–Ü–í"
    echo ""
    
    echo -n "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É (–≥—Ä–Ω): "
    read amount
    echo -n "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥—ñ–≤: "
    read count
    
    if [[ ! "$amount" =~ ^[0-9]+$ ]] || [[ ! "$count" =~ ^[0-9]+$ ]]; then
        log_error "–°—É–º–∞ —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—é—Ç—å –±—É—Ç–∏ —á–∏—Å–ª–∞–º–∏"
        return 1
    fi
    
    python3 check_s3_state.py --add-test "$amount" "$count"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É API
quick_api_test() {
    log_header "üöÄ –®–í–ò–î–ö–ò–ô –¢–ï–°–¢ API"
    echo ""
    
    if [ -f "./test_api_quick.py" ]; then
        python3 test_api_quick.py
    else
        log_error "–°–∫—Ä–∏–ø—Ç test_api_quick.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
full_integration_test() {
    log_header "üß™ –ü–û–í–ù–ò–ô –¢–ï–°–¢ –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á"
    echo ""
    
    log_warning "–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω..."
    echo ""
    
    if [ -f "./test_lambda_integration.py" ]; then
        python3 test_lambda_integration.py
    else
        log_error "–°–∫—Ä–∏–ø—Ç test_lambda_integration.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ —Ä–µ–ø–ª–µ–Ω—ñ—à
test_replenish_only() {
    log_header "üîÑ –¢–ï–°–¢ –†–ï–ü–õ–ï–ù–Ü–® –§–£–ù–ö–¶–Ü–á"
    echo ""
    
    log_info "–ó–∞–ø—É—Å–∫–∞—î–º–æ replenish-promo-code —Ñ—É–Ω–∫—Ü—ñ—é –Ω–∞–ø—Ä—è–º—É..."
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ payload –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    local payload='{"trigger_source": "manual_test", "trigger_reasons": ["testing_from_script"]}'
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
    local response_file="/tmp/replenish_test_response.json"
    
    if aws lambda invoke \
        --function-name replenish-promo-code \
        --payload "$payload" \
        "$response_file" >/dev/null 2>&1; then
        
        log_success "–§—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—â–µ–Ω–∞!"
        log_info "–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ $response_file"
        
        if [ -f "$response_file" ]; then
            echo ""
            log_info "–í—ñ–¥–ø–æ–≤—ñ–¥—å —Ñ—É–Ω–∫—Ü—ñ—ó:"
            cat "$response_file" | jq . 2>/dev/null || cat "$response_file"
        fi
        
        log_info "–ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π:"
        log_info "aws logs tail /aws/lambda/replenish-promo-code --follow"
        
    else
        log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–ª–∏–∫–∞—Ç–∏ replenish-promo-code —Ñ—É–Ω–∫—Ü—ñ—é"
        return 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ª–æ–≥—ñ–≤
monitor_logs() {
    log_header "üìã –ú–û–ù–Ü–¢–û–†–ò–ù–ì –õ–û–ì–Ü–í"
    echo ""
    
    if [ -f "./monitor_logs.sh" ]; then
        ./monitor_logs.sh
    else
        log_error "–°–∫—Ä–∏–ø—Ç monitor_logs.sh –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç—É—Å—É —Ñ—É–Ω–∫—Ü—ñ–π
show_function_status() {
    log_header "üìä –°–¢–ê–¢–£–° LAMBDA –§–£–ù–ö–¶–Ü–ô"
    echo ""
    
    local functions=("get-promo-code" "replenish-promo-code")
    
    for func in "${functions[@]}"; do
        echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—ó: $func"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
        if aws lambda get-function --function-name "$func" >/dev/null 2>&1; then
            # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
            local runtime=$(aws lambda get-function-configuration --function-name "$func" --query 'Runtime' --output text)
            local state=$(aws lambda get-function-configuration --function-name "$func" --query 'State' --output text)
            local last_modified=$(aws lambda get-function-configuration --function-name "$func" --query 'LastModified' --output text)
            
            echo "  ‚úÖ –°—Ç–∞—Ç—É—Å: $state"
            echo "  üêç Runtime: $runtime"
            echo "  üìÖ –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: $last_modified"
            
            # CloudWatch –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É
            local end_time=$(date -u +%Y-%m-%dT%H:%M:%S)
            local start_time=$(date -u -d '24 hours ago' +%Y-%m-%dT%H:%M:%S)
            
            local invocations=$(aws cloudwatch get-metric-statistics \
                --namespace AWS/Lambda \
                --metric-name Invocations \
                --dimensions Name=FunctionName,Value="$func" \
                --start-time "$start_time" \
                --end-time "$end_time" \
                --period 86400 \
                --statistics Sum \
                --query 'Datapoints[0].Sum' \
                --output text 2>/dev/null)
            
            if [ "$invocations" != "None" ] && [ -n "$invocations" ]; then
                echo "  üìû –í–∏–∫–ª–∏–∫—ñ–≤ –∑–∞ 24 –≥–æ–¥: $invocations"
            else
                echo "  üìû –í–∏–∫–ª–∏–∫—ñ–≤ –∑–∞ 24 –≥–æ–¥: 0"
            fi
            
        else
            echo "  ‚ùå –§—É–Ω–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É"
        fi
        
        echo ""
    done
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤
reset_counters() {
    log_header "üîÑ –°–ö–ò–î–ê–ù–ù–Ø –õ–Ü–ß–ò–õ–¨–ù–ò–ö–Ü–í"
    echo ""
    
    log_warning "–¶–µ —Å–∫–∏–Ω–µ –≤—Å—ñ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤"
    echo -n "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/N): "
    read confirm
    
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        python3 check_s3_state.py --reset
    else
        log_info "–°–∫–∞—Å–æ–≤–∞–Ω–æ"
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
force_replenish() {
    log_header "üöÄ –ü–†–ò–ú–£–°–û–í–ò–ô –ó–ê–ü–£–°–ö –ü–û–ü–û–í–ù–ï–ù–ù–Ø"
    echo ""
    
    log_warning "–¶–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤"
    echo -n "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/N): "
    read confirm
    
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        test_replenish_only
    else
        log_info "–°–∫–∞—Å–æ–≤–∞–Ω–æ"
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
show_instructions() {
    log_header "üìñ –Ü–ù–°–¢–†–£–ö–¶–Ü–Ø"
    echo ""
    
    if [ -f "./TESTING_GUIDE.md" ]; then
        if command -v bat &> /dev/null; then
            bat TESTING_GUIDE.md
        elif command -v less &> /dev/null; then
            less TESTING_GUIDE.md
        else
            cat TESTING_GUIDE.md
        fi
    else
        log_error "–§–∞–π–ª TESTING_GUIDE.md –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        log_info "–ë–∞–∑–æ–≤–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:"
        echo ""
        echo "1. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–æ–ø—Ü—ñ—è 1)"
        echo "2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞–Ω S3 (–æ–ø—Ü—ñ—è 2)"
        echo "3. –î–æ–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ (–æ–ø—Ü—ñ—è 3)"
        echo "4. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —à–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç API (–æ–ø—Ü—ñ—è 4)"
        echo "5. –Ø–∫—â–æ API –ø—Ä–∞—Ü—é—î, –∑–∞–ø—É—Å—Ç—ñ—Ç—å –ø–æ–≤–Ω–∏–π —Ç–µ—Å—Ç (–æ–ø—Ü—ñ—è 5)"
        echo "6. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥—ñ–≤ (–æ–ø—Ü—ñ—è 7) –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è"
    fi
}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
main() {
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    if ! check_dependencies; then
        exit 1
    fi
    
    while true; do
        echo ""
        show_menu
        read choice
        echo ""
        
        case $choice in
            1)
                setup_testing
                ;;
            2)
                check_s3_status
                ;;
            3)
                add_test_codes
                ;;
            4)
                quick_api_test
                ;;
            5)
                full_integration_test
                ;;
            6)
                test_replenish_only
                ;;
            7)
                monitor_logs
                ;;
            8)
                show_function_status
                ;;
            9)
                reset_counters
                ;;
            10)
                force_replenish
                ;;
            11)
                show_instructions
                ;;
            12)
                log_success "–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!"
                exit 0
                ;;
            *)
                log_warning "–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                ;;
        esac
        
        echo ""
        echo "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è..."
        read
    done
}

# –ó–∞–ø—É—Å–∫
main "$@"
