#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –≤ S3.
–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ —Ç–∞ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.
"""

import boto3
import json
import sys
from datetime import datetime

class S3PromoChecker:
    def __init__(self):
        self.s3_client = boto3.client('s3', region_name='eu-north-1')
        self.bucket = 'lambda-promo-sessions'
        self.promo_codes_key = 'promo-codes/available_codes.json'
        self.used_codes_key = 'promo-codes/used_codes_count.json'
    
    def get_promo_codes_state(self):
        """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –∑ S3"""
        try:
            response = self.s3_client.get_object(Bucket=self.bucket, Key=self.promo_codes_key)
            data = json.loads(response['Body'].read().decode('utf-8'))
            return data
        except self.s3_client.exceptions.NoSuchKey:
            print("‚ùå –§–∞–π–ª –∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ S3")
            return {}
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤: {e}")
            return {}
    
    def get_used_codes_state(self):
        """–û—Ç—Ä–∏–º—É—î –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ S3"""
        try:
            response = self.s3_client.get_object(Bucket=self.bucket, Key=self.used_codes_key)
            data = json.loads(response['Body'].read().decode('utf-8'))
            return data
        except self.s3_client.exceptions.NoSuchKey:
            return {}
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤: {e}")
            return {}
    
    def show_status(self):
        """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤"""
        print("üìä –°–¢–ê–ù –ü–†–û–ú–û–ö–û–î–Ü–í –í S3")
        print("=" * 40)
        print(f"üïê –ß–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"‚òÅÔ∏è S3 Bucket: {self.bucket}")
        print()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
        promo_codes = self.get_promo_codes_state()
        used_counts = self.get_used_codes_state()
        
        if not promo_codes and not used_counts:
            print("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤ S3")
            return False
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏
        if promo_codes:
            print("üí∞ –î–û–°–¢–£–ü–ù–Ü –ü–†–û–ú–û–ö–û–î–ò:")
            print("-" * 25)
            total_codes = 0
            
            # –°–æ—Ä—Ç—É—î–º–æ —Å—É–º–∏
            amounts = []
            for amount_str in promo_codes.keys():
                if amount_str != '_metadata' and amount_str.isdigit():
                    amounts.append(int(amount_str))
            
            amounts.sort()
            
            for amount in amounts:
                amount_str = str(amount)
                codes_list = promo_codes.get(amount_str, [])
                count = len(codes_list)
                total_codes += count
                
                # –ö–æ–ª—å–æ—Ä–æ–≤–µ –∫–æ–¥—É–≤–∞–Ω–Ω—è –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
                if count == 0:
                    status = "‚ùå"
                elif count <= 3:
                    status = "‚ö†Ô∏è"
                elif count <= 5:
                    status = "üî∂"
                else:
                    status = "‚úÖ"
                
                print(f"  {status} {amount} –≥—Ä–Ω: {count} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –∫—ñ–ª—å–∫–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∫–æ–¥—ñ–≤
                if count > 0 and len(sys.argv) > 1 and sys.argv[1] == '--verbose':
                    examples = codes_list[:3]
                    examples_str = ', '.join(examples)
                    if count > 3:
                        examples_str += f" ... (+{count-3})"
                    print(f"    üìù –ü—Ä–∏–∫–ª–∞–¥–∏: {examples_str}")
            
            print(f"\nüìà –ó–∞–≥–∞–ª–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ: {total_codes} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
            
            # –ú–µ—Ç–∞–¥–∞–Ω—ñ
            if '_metadata' in promo_codes:
                metadata = promo_codes['_metadata']
                last_updated = metadata.get('last_updated', '–Ω–µ–≤—ñ–¥–æ–º–æ')
                print(f"üîÑ –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {last_updated}")
        else:
            print("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
        
        print()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        if used_counts:
            print("üìä –õ–Ü–ß–ò–õ–¨–ù–ò–ö–ò –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:")
            print("-" * 30)
            total_used = 0
            
            # –°–æ—Ä—Ç—É—î–º–æ —Å—É–º–∏
            used_amounts = [int(k) for k in used_counts.keys() if k.isdigit()]
            used_amounts.sort()
            
            for amount in used_amounts:
                amount_str = str(amount)
                used_count = used_counts.get(amount_str, 0)
                total_used += used_count
                print(f"  üìû {amount} –≥—Ä–Ω: {used_count} –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ")
            
            print(f"\nüìà –ó–∞–≥–∞–ª–æ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {total_used} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
            
            # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—Ä–æ–≥–∏
            batch_threshold = 20  # –ú–æ–∂–Ω–∞ –≤–∏–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
            if total_used >= batch_threshold:
                print(f"üö® –£–í–ê–ì–ê: –î–æ—Å—è–≥–Ω—É—Ç–æ –ø–æ—Ä—ñ–≥ –±–∞—Ç—á—É ({total_used} >= {batch_threshold})")
                print("   –ú–∞—î –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤!")
        else:
            print("‚ÑπÔ∏è –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ")
        
        return True
    
    def reset_used_counters(self):
        """–°–∫–∏–¥–∞—î –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)"""
        try:
            self.s3_client.put_object(
                Bucket=self.bucket,
                Key=self.used_codes_key,
                Body=json.dumps({}, indent=2),
                ContentType='application/json'
            )
            print("‚úÖ –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤: {e}")
            return False
    
    def add_test_codes(self, amount, count=5):
        """–î–æ–¥–∞—î —Ç–µ—Å—Ç–æ–≤—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ—ó —Å—É–º–∏"""
        try:
            promo_codes = self.get_promo_codes_state()
            
            amount_str = str(amount)
            if amount_str not in promo_codes:
                promo_codes[amount_str] = []
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –∫–æ–¥–∏
            existing_codes = set(promo_codes[amount_str])
            new_codes = []
            
            i = 1
            while len(new_codes) < count:
                test_code = f"BON{amount}{i:03d}TEST"
                if test_code not in existing_codes:
                    new_codes.append(test_code)
                    existing_codes.add(test_code)
                i += 1
            
            promo_codes[amount_str].extend(new_codes)
            
            # –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
            promo_codes['_metadata'] = {
                'last_updated': datetime.now().isoformat(),
                'test_mode': True
            }
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ
            self.s3_client.put_object(
                Bucket=self.bucket,
                Key=self.promo_codes_key,
                Body=json.dumps(promo_codes, indent=2),
                ContentType='application/json'
            )
            
            print(f"‚úÖ –î–æ–¥–∞–Ω–æ {count} —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω")
            print(f"üìù –ù–æ–≤—ñ –∫–æ–¥–∏: {', '.join(new_codes)}")
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ–¥—ñ–≤: {e}")
            return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    checker = S3PromoChecker()
    
    # –ü–∞—Ä—Å–∏–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == '--help' or command == '-h':
            print("üîß –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:")
            print("  python3 check_s3_state.py                 # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞–Ω")
            print("  python3 check_s3_state.py --verbose       # –î–µ—Ç–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω")
            print("  python3 check_s3_state.py --reset         # –°–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏")
            print("  python3 check_s3_state.py --add-test 50 3 # –î–æ–¥–∞—Ç–∏ 3 —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ–¥–∏ –¥–ª—è 50 –≥—Ä–Ω")
            return
        
        elif command == '--reset':
            print("üîÑ –°–∫–∏–¥–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è...")
            checker.reset_used_counters()
            return
        
        elif command == '--add-test':
            if len(sys.argv) >= 4:
                try:
                    amount = int(sys.argv[2])
                    count = int(sys.argv[3])
                    print(f"‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è {count} —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω...")
                    checker.add_test_codes(amount, count)
                except ValueError:
                    print("‚ùå –ù–µ–≤—ñ—Ä–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: --add-test <—Å—É–º–∞> <–∫—ñ–ª—å–∫—ñ—Å—Ç—å>")
            else:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: --add-test <—Å—É–º–∞> <–∫—ñ–ª—å–∫—ñ—Å—Ç—å>")
            return
    
    # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞–Ω
    success = checker.show_status()
    
    if not success:
        print("\nüí° –ü–û–†–ê–î–ò:")
        print("  1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∞ replenish-promo-code —Ñ—É–Ω–∫—Ü—ñ—è")
        print("  2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –∫–æ–º–∞–Ω–¥–æ—é:")
        print("     aws lambda invoke --function-name replenish-promo-code /tmp/response.json")
        print("  3. –ê–±–æ –¥–æ–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ñ –∫–æ–¥–∏:")
        print("     python3 check_s3_state.py --add-test 50 5")

if __name__ == "__main__":
    main()
