"""
–í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
"""
import os
import logging

logger = logging.getLogger(__name__)

def validate_environment():
    """
    –í–∞–ª—ñ–¥—É—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    """
    required_vars = {
        'ADMIN_URL': 'URL –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ',
        'ADMIN_USERNAME': '–õ–æ–≥—ñ–Ω –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        'ADMIN_PASSWORD': '–ü–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
    }
    
    optional_vars = {
        'TARGET_CODES_PER_AMOUNT': ('10', int),
        'LOG_LEVEL': ('INFO', str),
        'PLAYWRIGHT_BROWSERS_PATH': ('/opt/playwright-browsers', str),
        'SESSION_S3_BUCKET': ('lambda-promo-sessions', str),
        'PROMO_CODES_S3_KEY': ('promo-codes/available_codes.json', str),
        'USED_CODES_S3_KEY': ('promo-codes/used_codes_count.json', str)
    }
    
    errors = []
    warnings = []
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ
    for var_name, description in required_vars.items():
        value = os.getenv(var_name)
        if not value:
            errors.append(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞ {var_name} ({description})")
        else:
            logger.info(f"‚úÖ {var_name}: –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    config = {}
    for var_name, (default_value, var_type) in optional_vars.items():
        value = os.getenv(var_name, default_value)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ç–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å
        try:
            if var_type == int:
                typed_value = int(value)
                if typed_value <= 0:
                    warnings.append(f"‚ö†Ô∏è {var_name}={value} –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω—ñ–º —á–∏—Å–ª–æ–º, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ {default_value}")
                    typed_value = int(default_value)
            else:
                typed_value = var_type(value)
            
            config[var_name] = typed_value
            if value == default_value:
                logger.info(f"‚ÑπÔ∏è {var_name}: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ({default_value})")
            else:
                logger.info(f"‚úÖ {var_name}: {value}")
                
        except (ValueError, TypeError) as e:
            warnings.append(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è {var_name}={value}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ {default_value}")
            config[var_name] = var_type(default_value)
    
    # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    if errors:
        for error in errors:
            logger.error(error)
        raise ValueError(f"–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: {len(errors)} –ø–æ–º–∏–ª–æ–∫")
    
    if warnings:
        for warning in warnings:
            logger.warning(warning)
    
    logger.info(f"üéØ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ ({len(warnings)} –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å)")
    return config

def get_validated_config():
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –≤–∞–ª—ñ–¥–æ–≤–∞–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    """
    return validate_environment()
