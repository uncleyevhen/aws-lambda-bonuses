import os
import logging
import json
import boto3
from botocore.exceptions import ClientError
from datetime import datetime

logger = logging.getLogger(__name__)

class PromoService:
    def __init__(self):
        self.s3_client = boto3.client('s3')
        self.s3_bucket = os.getenv('SESSION_S3_BUCKET', 'lambda-promo-sessions')
        self.promo_codes_key = 'promo-codes/available_codes.json'
        self.used_codes_key = 'promo-codes/used_codes_count.json'
        self.batch_threshold = int(os.getenv('BATCH_THRESHOLD', '20'))  # –ü–æ—Ä—ñ–≥ –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
        self.min_codes_threshold = int(os.getenv('MIN_CODES_THRESHOLD', '3'))  # –ú—ñ–Ω—ñ–º—É–º –∫–æ–¥—ñ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
        
    def add_used_code_count(self, amount: str):
        """
        –î–æ–¥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É –¥–ª—è –ø–µ–≤–Ω–æ—ó —Å—É–º–∏.
        –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è.
        """
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ
            try:
                response = self.s3_client.get_object(Bucket=self.s3_bucket, Key=self.used_codes_key)
                used_data = json.loads(response['Body'].read().decode('utf-8'))
            except ClientError as e:
                if e.response['Error']['Code'] == 'NoSuchKey':
                    # –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
                    used_data = {}
                else:
                    raise e
            
            # –î–æ–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è —Ü—ñ—î—ó —Å—É–º–∏
            if amount not in used_data:
                used_data[amount] = 0
            
            used_data[amount] += 1
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
            self.s3_client.put_object(
                Bucket=self.s3_bucket,
                Key=self.used_codes_key,
                Body=json.dumps(used_data, indent=2),
                ContentType='application/json'
            )
            
            logger.info(f"üìù –î–æ–¥–∞–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É –¥–ª—è —Å—É–º–∏ {amount}. –í—Å—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {used_data[amount]}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
            total_used = sum(used_data.values())
            should_trigger = total_used >= self.batch_threshold
            
            if should_trigger:
                logger.info(f"üöÄ –ü–æ—Ä—ñ–≥ –¥–æ—Å—è–≥–Ω—É—Ç–æ ({total_used} >= {self.batch_threshold}). –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è.")
            else:
                logger.info(f"‚è≥ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ {total_used} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –∑ {self.batch_threshold}. –û—á—ñ–∫—É—î–º–æ...")
            
            return should_trigger
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É: {e}")
            return False
    
    def get_and_clear_used_codes_count(self):
        """
        –û—Ç—Ä–∏–º—É—î —Ç–∞ –æ—á–∏—â–∞—î –ª—ñ—á–∏–ª—å–Ω–∏–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤. 
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ñ—É–Ω–∫—Ü—ñ—î—é –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è.
        """
        try:
            response = self.s3_client.get_object(Bucket=self.s3_bucket, Key=self.used_codes_key)
            used_data = json.loads(response['Body'].read().decode('utf-8'))
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ
            current_used = used_data.copy()
            
            # –û—á–∏—â–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
            self.s3_client.put_object(
                Bucket=self.s3_bucket,
                Key=self.used_codes_key,
                Body=json.dumps({}, indent=2),
                ContentType='application/json'
            )
            
            logger.info(f"üóëÔ∏è –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –æ—á–∏—â–µ–Ω–æ. –û–±—Ä–æ–±–ª–µ–Ω–æ: {current_used}")
            return current_used
            
        except ClientError as e:
            if e.response['Error']['Code'] == 'NoSuchKey':
                logger.info("‚ÑπÔ∏è –§–∞–π–ª –∑ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞–º–∏ –Ω–µ —ñ—Å–Ω—É—î.")
                return {}
            else:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤: {e}")
                return {}
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞–º–∏: {e}")
            return None

    def get_and_remove_code_from_s3(self, amount_key: str):
        """
        –®–≤–∏–¥–∫–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–¥–∏ –∑ S3, –≤–∏–±–∏—Ä–∞—î –æ–¥–∏–Ω, –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑—ñ —Å–ø–∏—Å–∫—É 
        —ñ –≤—ñ–¥—Ä–∞–∑—É –∑–±–µ—Ä—ñ–≥–∞—î –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫.
        –ü–æ–≤–µ—Ä—Ç–∞—î tuple: (promo_code, should_trigger_replenish)
        """
        try:
            logger.info(f"‚òÅÔ∏è [Fast] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –∑ s3://{self.s3_bucket}/{self.promo_codes_key}")
            response = self.s3_client.get_object(Bucket=self.s3_bucket, Key=self.promo_codes_key)
            all_codes = json.loads(response['Body'].read().decode('utf-8'))
            
            available_for_amount = all_codes.get(amount_key, [])
            if not available_for_amount:
                logger.error(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥–∏ –¥–ª—è —Å—É–º–∏ '{amount_key}' –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è!")
                return None, False
            
            promo_code = available_for_amount.pop(0)
            remaining_count = len(available_for_amount)
            logger.info(f"‚úÖ [Fast] –í–∏–±—Ä–∞–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code}. –ó–∞–ª–∏—à–∏–ª–æ—Å—å {remaining_count} –∫–æ–¥—ñ–≤.")
            
            all_codes[amount_key] = available_for_amount
            
            self.s3_client.put_object(
                Bucket=self.s3_bucket,
                Key=self.promo_codes_key,
                Body=json.dumps(all_codes, indent=2),
                ContentType='application/json'
            )
            logger.info("‚òÅÔ∏è [Fast] –û–Ω–æ–≤–ª–µ–Ω–∏–π (–∑–º–µ–Ω—à–µ–Ω–∏–π) —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ S3.")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –º–∞–ª—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥—ñ–≤
            should_trigger_low_count = remaining_count <= self.min_codes_threshold
            if should_trigger_low_count:
                logger.info(f"‚ö†Ô∏è [Fast] –ó–∞–ª–∏—à–∏–ª–æ—Å—å –º–∞–ª–æ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ ({remaining_count} <= {self.min_codes_threshold}). –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è.")
            
            return promo_code, should_trigger_low_count

        except ClientError as e:
            if hasattr(e, 'response') and 'Error' in e.response and 'Code' in e.response['Error'] and e.response['Error']['Code'] == 'NoSuchKey':
                logger.error(f"‚ùå –§–∞–π–ª –∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ S3: {self.promo_codes_key}")
            else:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ S3 –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏: {e}")
            return None, False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏: {e}")
            return None, False
