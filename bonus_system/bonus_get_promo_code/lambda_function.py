import json
import logging
import os
import sys
import boto3
from promo_logic import PromoService

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥–µ—Ä–∞ ---
logger = logging.getLogger()
if logger.handlers:
    for handler in logger.handlers:
        logger.removeHandler(handler)
logging.basicConfig(stream=sys.stdout, level=logging.INFO)

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –±–∞—Ç—á–æ–≤–æ—ó –æ–±—Ä–æ–±–∫–∏ ---
BATCH_THRESHOLD = int(os.getenv('BATCH_THRESHOLD', '20'))  # –ü–æ—Ä—ñ–≥ –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
MIN_CODES_THRESHOLD = int(os.getenv('MIN_CODES_THRESHOLD', '3'))  # –ú—ñ–Ω—ñ–º—É–º –∫–æ–¥—ñ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è

# --- –ì–ª–æ–±–∞–ª—å–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏ –¥–ª—è –ø–µ—Ä–µ-–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ---
lambda_client = boto3.client('lambda')

def get_cors_headers():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ CORS headers –¥–ª—è –≤—Å—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"""
    return {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With',
        'Access-Control-Allow-Methods': 'OPTIONS,POST,GET',
        'Access-Control-Max-Age': '86400'  # Cache preflight for 24 hours
    }

def lambda_handler(event, context):
    """
    –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫: —à–≤–∏–¥–∫–æ –æ—Ç—Ä–∏–º—É—î –ø—Ä–æ–º–æ–∫–æ–¥ –∑ S3, –∑–∞–ø–∏—Å—É—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ –∑–∞–ø—É—Å–∫–∞—î –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ.
    
    –õ–æ–≥—ñ–∫–∞ –∑–∞–ø—É—Å–∫—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:
    1. –Ø–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ >= 20 –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ (–±–∞—Ç—á)
    2. –Ø–∫—â–æ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—É–º–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å <= 3 –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
    """
    logger.info(f"üöÄ [Get] —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—â–µ–Ω–∞ (–ø–æ—Ä—ñ–≥ –±–∞—Ç—á—É: {BATCH_THRESHOLD}, –º—ñ–Ω. –∫–æ–¥—ñ–≤: {MIN_CODES_THRESHOLD})")
    
    # –û–±—Ä–æ–±–∫–∞ OPTIONS –∑–∞–ø–∏—Ç—É –¥–ª—è CORS preflight
    http_method = event.get('httpMethod') or event.get('requestContext', {}).get('http', {}).get('method')
    if http_method == 'OPTIONS':
        logger.info("üìã –û–±—Ä–æ–±–∫–∞ OPTIONS –∑–∞–ø–∏—Ç—É –¥–ª—è CORS")
        return {
            'statusCode': 200,
            'headers': get_cors_headers(),
            'body': json.dumps({'message': 'CORS preflight successful'})
        }
    
    try:
        body = json.loads(event.get('body', '{}'))
        amount = body.get('amount')

        if not amount:
            return {
                'statusCode': 400, 
                'headers': get_cors_headers(),
                'body': json.dumps({'error': 'Missing required field: amount'})
            }

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É (–±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞)
        promo_service = PromoService()
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É –∑ S3
        promo_code, should_trigger_low_count = promo_service.get_and_remove_code_from_s3(str(amount))
        
        if not promo_code:
            error_message = f"–ü—Ä–æ–º–æ–∫–æ–¥–∏ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è."
            logger.error(f"‚ùå {error_message}")
            return {
                'statusCode': 404, 
                'headers': get_cors_headers(),
                'body': json.dumps({'error': error_message})
            }
            
        logger.info(f"‚úÖ [Get] –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code}")
        
        # –ó–∞–ø–∏—Å—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
        try:
            should_trigger_batch = promo_service.add_used_code_count(str(amount))
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è, —è–∫—â–æ:
            # 1. –ù–∞–±—Ä–∞–ª–æ—Å—è –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ (–±–∞—Ç—á)
            # 2. –ó–∞–ª–∏—à–∏–ª–æ—Å—å –º–∞–ª–æ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è —Ü—ñ—î—ó —Å—É–º–∏
            if should_trigger_batch or should_trigger_low_count:
                reason = []
                if should_trigger_batch:
                    reason.append(f"–¥–æ—Å—è–≥–Ω—É—Ç–æ –ø–æ—Ä—ñ–≥ –±–∞—Ç—á—É ({BATCH_THRESHOLD})")
                if should_trigger_low_count:
                    reason.append(f"–∑–∞–ª–∏—à–∏–ª–æ—Å—å –º–∞–ª–æ –∫–æ–¥—ñ–≤ (<= {MIN_CODES_THRESHOLD})")
                
                logger.info(f"üöÄ [Get] –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è. –ü—Ä–∏—á–∏–Ω–∏: {', '.join(reason)}")
                
                payload = {
                    'trigger_source': 'usage_threshold_reached',
                    'trigger_reasons': reason
                }
                lambda_client.invoke(
                    FunctionName=os.getenv('REPLENISH_FUNCTION_NAME', 'replenish-promo-code'),
                    InvocationType='Event',  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫
                    Payload=json.dumps(payload)
                )
                logger.info(f"üöÄ [Get] –ó–∞–ø—É—â–µ–Ω–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤.")
            else:
                logger.info(f"‚è≥ [Get] –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞–ø–∏—Å–∞–Ω–æ. –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–∫–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ.")
                
        except Exception as e:
            logger.error(f"‚ùå [Get] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞–º–∏: {e}")
            # –ù–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –∫–ª—ñ—î–Ω—Ç—É, –æ—Å–∫—ñ–ª—å–∫–∏ –æ—Å–Ω–æ–≤–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞

        return {
            'statusCode': 200,
            'headers': get_cors_headers(),
            'body': json.dumps({'success': True, 'promo_code': promo_code, 'amount': amount})
        }

    except Exception as e:
        logger.error(f"‚ùå [Get] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
        return {
            'statusCode': 500, 
            'headers': get_cors_headers(),
            'body': json.dumps({'error': 'Internal Server Error'})
        }