#!/bin/bash

# ==============================================================================
# üöÄ –°–¢–í–û–†–ï–ù–ù–Ø HTTP API GATEWAY –î–õ–Ø BONUS OPERATIONS LAMBDA
# –†–µ–≥—ñ–æ–Ω: eu-north-1
# ==============================================================================

set -e

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# ==============================================================================
# –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø
# ==============================================================================

AWS_REGION="eu-north-1"
API_NAME="bonus-operations-api"
FUNCTION_NAME="bonus-operations"
STAGE_NAME="prod"

# –†–æ—É—Ç–∏ –¥–ª—è bonus-operations Lambda (–∑ –∞–Ω–∞–ª—ñ–∑—É –∫–æ–¥—É)
ROUTES=(
    "POST /order-complete"    # –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤)
    "POST /order-cancel"      # –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤ –∑ —Ä–µ–∑–µ—Ä–≤—É)
    "POST /order-reserve"     # –†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    "POST /lead-reserve"      # –ú–∞–Ω—É–∞–ª—å–Ω–µ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤ —á–µ—Ä–µ–∑ –ª—ñ–¥–∏
    "POST /test-log"          # –¢–µ—Å—Ç–æ–≤–∏–π endpoint –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫—ñ–≤
)

# OPTIONS —Ä–æ—É—Ç–∏ –¥–ª—è CORS
OPTIONS_ROUTES=(
    "OPTIONS /order-complete"
    "OPTIONS /order-cancel"
    "OPTIONS /order-reserve"
    "OPTIONS /lead-reserve"
    "OPTIONS /test-log"
    "OPTIONS /{proxy+}"       # Catch-all –¥–ª—è —ñ–Ω—à–∏—Ö OPTIONS –∑–∞–ø–∏—Ç—ñ–≤
)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è AWS Account ID
log_info "–û—Ç—Ä–∏–º—É—î–º–æ AWS Account ID..."
AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
log_success "AWS Account ID: $AWS_ACCOUNT_ID"

# ==============================================================================
# –§–£–ù–ö–¶–Ü–Ø –í–ê–õ–Ü–î–ê–¶–Ü–á
# ==============================================================================

validate_prerequisites() {
    log_info "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä–µ–¥—É–º–æ–≤–∏..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ AWS CLI
    if ! command -v aws &> /dev/null; then
        log_error "AWS CLI –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π"
        exit 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    if ! aws sts get-caller-identity >/dev/null 2>&1; then
        log_error "AWS –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å 'aws configure'"
        exit 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è Lambda —Ñ—É–Ω–∫—Ü—ñ—ó
    if ! aws lambda get-function --function-name $FUNCTION_NAME --region $AWS_REGION >/dev/null 2>&1; then
        log_error "Lambda —Ñ—É–Ω–∫—Ü—ñ—è '$FUNCTION_NAME' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–≥—ñ–æ–Ω—ñ $AWS_REGION"
        log_info "–°–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑–≥–æ—Ä–Ω—ñ—Ç—å Lambda —Ñ—É–Ω–∫—Ü—ñ—é:"
        log_info "cd bonus_system/bonus_operations && ./deploy.sh"
        exit 1
    fi
    
    log_success "–í—Å—ñ –ø–µ—Ä–µ–¥—É–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ"
}

# ==============================================================================
# –§–£–ù–ö–¶–Ü–Ø –°–¢–í–û–†–ï–ù–ù–Ø API GATEWAY
# ==============================================================================

create_api_gateway() {
    log_info "–°—Ç–≤–æ—Ä—é—î–º–æ HTTP API Gateway '$API_NAME'..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è API
    existing_api_id=$(aws apigatewayv2 get-apis \
        --region $AWS_REGION \
        --query "Items[?Name=='$API_NAME'].ApiId" \
        --output text 2>/dev/null || echo "")
    
    if [ -n "$existing_api_id" ] && [ "$existing_api_id" != "None" ]; then
        log_warning "API –∑ –Ω–∞–∑–≤–æ—é '$API_NAME' –≤–∂–µ —ñ—Å–Ω—É—î (ID: $existing_api_id)"
        read -p "–í–∏–¥–∞–ª–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π API —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π? (y/N): " confirm
        
        if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
            log_info "–í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á–∏–π API..."
            aws apigatewayv2 delete-api --api-id $existing_api_id --region $AWS_REGION
            log_success "–Ü—Å–Ω—É—é—á–∏–π API –≤–∏–¥–∞–ª–µ–Ω–æ"
        else
            log_info "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π API –∑ ID: $existing_api_id"
            API_ID=$existing_api_id
            return 0
        fi
    fi
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π HTTP API –∑ CORS
    API_ID=$(aws apigatewayv2 create-api \
        --name "$API_NAME" \
        --protocol-type HTTP \
        --description "API Gateway –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –±–æ–Ω—É—Å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π" \
        --cors-configuration AllowOrigins="*",AllowMethods="GET,POST,OPTIONS",AllowHeaders="content-type,x-amz-date,authorization,x-api-key,x-requested-with" \
        --region $AWS_REGION \
        --query 'ApiId' --output text)
    
    log_success "HTTP API —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ ID: $API_ID"
    
    # –û—Ç—Ä–∏–º—É—î–º–æ endpoint URL –∑—ñ —Å—Ç–µ–π–¥–∂–µ–º
    API_BASE_URL=$(aws apigatewayv2 get-api \
        --api-id $API_ID \
        --region $AWS_REGION \
        --query 'ApiEndpoint' --output text)
    
    API_ENDPOINT="${API_BASE_URL}/${STAGE_NAME}"
    
    log_success "API Endpoint: $API_ENDPOINT"
}

# ==============================================================================
# –§–£–ù–ö–¶–Ü–Ø –°–¢–í–û–†–ï–ù–ù–Ø –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á –ó LAMBDA
# ==============================================================================

create_lambda_integration() {
    log_info "–°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ Lambda —Ñ—É–Ω–∫—Ü—ñ—î—é '$FUNCTION_NAME'..."
    
    # –û—Ç—Ä–∏–º—É—î–º–æ ARN Lambda —Ñ—É–Ω–∫—Ü—ñ—ó
    LAMBDA_ARN=$(aws lambda get-function \
        --function-name $FUNCTION_NAME \
        --region $AWS_REGION \
        --query 'Configuration.FunctionArn' --output text)
    
    log_info "Lambda ARN: $LAMBDA_ARN"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é
    INTEGRATION_ID=$(aws apigatewayv2 create-integration \
        --api-id $API_ID \
        --integration-type AWS_PROXY \
        --integration-uri $LAMBDA_ARN \
        --payload-format-version "2.0" \
        --region $AWS_REGION \
        --query 'IntegrationId' --output text)
    
    log_success "–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∑ ID: $INTEGRATION_ID"
    
    # –ù–∞–¥–∞—î–º–æ –¥–æ–∑–≤—ñ–ª API Gateway –≤–∏–∫–ª–∏–∫–∞—Ç–∏ Lambda
    aws lambda add-permission \
        --function-name $FUNCTION_NAME \
        --statement-id "apigateway-invoke-$(date +%s)" \
        --action lambda:InvokeFunction \
        --principal apigateway.amazonaws.com \
        --source-arn "arn:aws:execute-api:$AWS_REGION:$AWS_ACCOUNT_ID:$API_ID/*/*" \
        --region $AWS_REGION >/dev/null 2>&1 || log_warning "–î–æ–∑–≤—ñ–ª –≤–∂–µ —ñ—Å–Ω—É—î"
    
    log_success "–î–æ–∑–≤–æ–ª–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ"
}

# ==============================================================================
# –§–£–ù–ö–¶–Ü–Ø –°–¢–í–û–†–ï–ù–ù–Ø –†–û–£–¢–Ü–í
# ==============================================================================

create_routes() {
    log_info "–°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–∏ –¥–ª—è –±–æ–Ω—É—Å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π..."
    
    echo ""
    echo "üìç –û—Å–Ω–æ–≤–Ω—ñ —Ä–æ—É—Ç–∏:"
    for route in "${ROUTES[@]}"; do
        log_info "–°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç: $route"
        
        aws apigatewayv2 create-route \
            --api-id $API_ID \
            --route-key "$route" \
            --target "integrations/$INTEGRATION_ID" \
            --region $AWS_REGION >/dev/null
        
        log_success "‚úì $route"
    done
    
    echo ""
    echo "üîß CORS —Ä–æ—É—Ç–∏:"
    for route in "${OPTIONS_ROUTES[@]}"; do
        log_info "–°—Ç–≤–æ—Ä—é—î–º–æ OPTIONS —Ä–æ—É—Ç: $route"
        
        aws apigatewayv2 create-route \
            --api-id $API_ID \
            --route-key "$route" \
            --target "integrations/$INTEGRATION_ID" \
            --region $AWS_REGION >/dev/null 2>&1
        
        log_success "‚úì $route"
    done
}

# ==============================================================================
# –§–£–ù–ö–¶–Ü–Ø –°–¢–í–û–†–ï–ù–ù–Ø STAGE
# ==============================================================================

create_stage() {
    log_info "–°—Ç–≤–æ—Ä—é—î–º–æ production stage '$STAGE_NAME'..."
    
    aws apigatewayv2 create-stage \
        --api-id $API_ID \
        --stage-name $STAGE_NAME \
        --auto-deploy \
        --description "Production stage –¥–ª—è –±–æ–Ω—É—Å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π" \
        --region $AWS_REGION >/dev/null 2>&1 || log_warning "Stage '$STAGE_NAME' –≤–∂–µ —ñ—Å–Ω—É—î"
    
    log_success "Production stage —Å—Ç–≤–æ—Ä–µ–Ω–æ"
}

# ==============================================================================
# –§–£–ù–ö–¶–Ü–Ø –¢–ï–°–¢–£–í–ê–ù–ù–Ø API
# ==============================================================================

test_api() {
    log_info "–¢–µ—Å—Ç—É—î–º–æ API endpoints..."
    
    local base_url="$API_ENDPOINT"
    
    echo ""
    echo "üß™ –¢–µ—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Ç–∏:"
    
    # –¢–µ—Å—Ç—É—î–º–æ test-log endpoint
    echo "1. –¢–µ—Å—Ç—É—î–º–æ /test-log endpoint:"
    curl -s -X POST "$base_url/test-log" \
        -H "Content-Type: application/json" \
        -d '{"test": "API Gateway setup test", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' | jq '.' 2>/dev/null || echo "–í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞ (jq –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π)"
    
    echo ""
    echo "2. –¢–µ—Å—Ç—É—î–º–æ CORS preflight:"
    curl -s -X OPTIONS "$base_url/order-complete" \
        -H "Origin: https://example.com" \
        -H "Access-Control-Request-Method: POST" \
        -H "Access-Control-Request-Headers: Content-Type" -v
}

# ==============================================================================
# –§–£–ù–ö–¶–Ü–Ø –í–ò–í–û–î–£ –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í
# ==============================================================================

display_results() {
    echo ""
    echo "üéâ ==============================================="
    echo "üéâ BONUS OPERATIONS API GATEWAY –ì–û–¢–û–í–ò–ô!"
    echo "üéâ ==============================================="
    echo ""
    log_success "API Gateway ID: $API_ID"
    log_success "Base URL: $API_ENDPOINT"
    echo ""
    echo "üìã –î–æ—Å—Ç—É–ø–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –±–æ–Ω—É—Å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π:"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    
    for route in "${ROUTES[@]}"; do
        method=$(echo "$route" | cut -d' ' -f1)
        path=$(echo "$route" | cut -d' ' -f2)
        echo "üîπ $method $API_ENDPOINT$path"
    done
    
    echo ""
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    echo "üìù –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:"
    echo ""
    echo "# 1. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤)"
    echo "curl -X POST '$API_ENDPOINT/order-complete' \\"
    echo "  -H 'Content-Type: application/json' \\"
    echo "  -d '{"
    echo "    \"event\": \"order.change_order_status\","
    echo "    \"context\": {"
    echo "      \"id\": \"12345\","
    echo "      \"client_id\": \"67890\","
    echo "      \"grand_total\": 1000,"
    echo "      \"status_name\": \"completed\","
    echo "      \"discount_amount\": 50"
    echo "    }"
    echo "  }'"
    echo ""
    echo "# 2. –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤)"
    echo "curl -X POST '$API_ENDPOINT/order-cancel' \\"
    echo "  -H 'Content-Type: application/json' \\"
    echo "  -d '{"
    echo "    \"order_id\": \"12345\","
    echo "    \"phone\": \"380123456789\","
    echo "    \"used_bonus_amount\": 50"
    echo "  }'"
    echo ""
    echo "# 3. –†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤"
    echo "curl -X POST '$API_ENDPOINT/order-reserve' \\"
    echo "  -H 'Content-Type: application/json' \\"
    echo "  -d '{"
    echo "    \"event\": \"order.create\","
    echo "    \"context\": {"
    echo "      \"id\": \"12345\","
    echo "      \"client_id\": \"67890\","
    echo "      \"grand_total\": 1000,"
    echo "      \"status_name\": \"new\","
    echo "      \"discount_amount\": 100,"
    echo "      \"promo_code\": \"BONUS100\""
    echo "    }"
    echo "  }'"
    echo ""
    echo "# 4. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–ª–æ–≥—É–≤–∞–Ω–Ω—è)"
    echo "curl -X POST '$API_ENDPOINT/test-log' \\"
    echo "  -H 'Content-Type: application/json' \\"
    echo "  -d '{\"test\": \"–ú—ñ–π —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç\"}'"
    echo ""
    echo "üîß –î–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ KeyCRM –≤–µ–±—Ö—É–∫–∞–º–∏:"
    echo "   - Webhook URL –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω—å: $API_ENDPOINT/order-complete"
    echo "   - Webhook URL –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è: $API_ENDPOINT/order-reserve"
    echo "   - Webhook URL –¥–ª—è –ª—ñ–¥—ñ–≤: $API_ENDPOINT/lead-reserve"
    echo ""
}

# ==============================================================================
# –§–£–ù–ö–¶–Ü–Ø –û–ß–ò–©–ï–ù–ù–Ø
# ==============================================================================

cleanup() {
    log_warning "–¶—è –æ–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–¥–∞–ª–∏—Ç—å API Gateway '$API_NAME'"
    read -p "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ? (y/N): " confirm
    
    if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
        existing_api_id=$(aws apigatewayv2 get-apis \
            --region $AWS_REGION \
            --query "Items[?Name=='$API_NAME'].ApiId" \
            --output text 2>/dev/null || echo "")
        
        if [ -n "$existing_api_id" ] && [ "$existing_api_id" != "None" ]; then
            log_info "–í–∏–¥–∞–ª—è—î–º–æ API Gateway..."
            aws apigatewayv2 delete-api --api-id $existing_api_id --region $AWS_REGION
            log_success "API Gateway –≤–∏–¥–∞–ª–µ–Ω–æ"
        else
            log_warning "API Gateway –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        fi
    else
        log_info "–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞"
    fi
}

# ==============================================================================
# –§–£–ù–ö–¶–Ü–Ø –Ü–ù–§–û–†–ú–ê–¶–Ü–á
# ==============================================================================

show_info() {
    existing_api_id=$(aws apigatewayv2 get-apis \
        --region $AWS_REGION \
        --query "Items[?Name=='$API_NAME'].ApiId" \
        --output text 2>/dev/null || echo "")
    
    if [ -n "$existing_api_id" ] && [ "$existing_api_id" != "None" ]; then
        API_ID=$existing_api_id
        API_BASE_URL=$(aws apigatewayv2 get-api \
            --api-id $API_ID \
            --region $AWS_REGION \
            --query 'ApiEndpoint' --output text)
        API_ENDPOINT="${API_BASE_URL}/${STAGE_NAME}"
        display_results
    else
        log_warning "API Gateway '$API_NAME' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        log_info "–ó–∞–ø—É—Å—Ç—ñ—Ç—å: $0 setup"
    fi
}

# ==============================================================================
# –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø
# ==============================================================================

main() {
    echo "üöÄ Bonus Operations API Gateway Setup"
    echo "======================================"
    echo "–†–µ–≥—ñ–æ–Ω: $AWS_REGION"
    echo "Lambda —Ñ—É–Ω–∫—Ü—ñ—è: $FUNCTION_NAME"
    echo "API –Ω–∞–∑–≤–∞: $API_NAME"
    echo ""
    
    case "${1:-setup}" in
        "setup")
            validate_prerequisites
            create_api_gateway
            create_lambda_integration
            create_routes
            create_stage
            display_results
            
            # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
            read -p "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API? (y/N): " test_confirm
            if [ "$test_confirm" = "y" ] || [ "$test_confirm" = "Y" ]; then
                test_api
            fi
            ;;
        "test")
            validate_prerequisites
            show_info
            test_api
            ;;
        "info")
            show_info
            ;;
        "cleanup")
            cleanup
            ;;
        *)
            echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 [setup|test|info|cleanup]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥–∏:"
            echo "  setup   - –°—Ç–≤–æ—Ä–∏—Ç–∏ API Gateway –¥–ª—è bonus-operations (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)"
            echo "  test    - –ü—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π API"
            echo "  info    - –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —ñ—Å–Ω—É—é—á–∏–π API"
            echo "  cleanup - –í–∏–¥–∞–ª–∏—Ç–∏ API Gateway"
            echo ""
            echo "–ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏ —è–∫—ñ –±—É–¥—É—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω—ñ:"
            for route in "${ROUTES[@]}"; do
                echo "  - $route"
            done
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
main "$@"
