#!/bin/bash

# –î–µ–ø–ª–æ–π–º–µ–Ω—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è bonus_operations Lambda
set -e

LAMBDA_NAME="bonus-operations"
REGION="eu-north-1"
LAMBDA_ROLE="arn:aws:iam::881490108668:role/lambda-execution-role"

echo "üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç Lambda —Ñ—É–Ω–∫—Ü—ñ—ó $LAMBDA_NAME..."

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
wait_for_function_update() {
    local function_name=$1
    echo "‚è≥ –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó $function_name..."
    
    local max_attempts=30
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        local status=$(aws lambda get-function --function-name "$function_name" --region "$REGION" --query 'Configuration.LastUpdateStatus' --output text 2>/dev/null)
        
        if [ "$status" == "Successful" ]; then
            echo "‚úÖ –§—É–Ω–∫—Ü—ñ—è '$function_name' —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞ —ñ –∞–∫—Ç–∏–≤–Ω–∞."
            return 0
        elif [ "$status" == "Failed" ]; then
            echo "‚ùå –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó '$function_name' –Ω–µ –≤–¥–∞–ª–æ—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –≤ AWS Console."
            return 1
        fi
        
        echo "üìä –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: $status. –û—á—ñ–∫—É—î–º–æ... ($attempt/$max_attempts)"
        sleep 5
        attempt=$((attempt + 1))
    done
    
    echo "‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó"
    return 1
}

# –°—Ç–≤–æ—Ä—é—î–º–æ zip –∞—Ä—Ö—ñ–≤
echo "üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è zip –∞—Ä—Ö—ñ–≤—É..."
zip -r bonus-operations.zip . -x "*.git*" "*.DS_Store*" "deploy.sh" "README.md" "lambda_function_old.py"

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ AWS –∫—Ä–µ–¥–µ–Ω—à–∞–ª–∏ —Ç–∞ —Ä–µ–≥—ñ–æ–Ω
echo "üîê –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ AWS –∫—Ä–µ–¥–µ–Ω—à–∞–ª–∏..."
AWS_ACCOUNT=$(aws sts get-caller-identity --query Account --output text 2>/dev/null)
if [ $? -eq 0 ]; then
    echo "‚úÖ AWS Account ID: $AWS_ACCOUNT"
    echo "‚úÖ Region: $REGION"
else
    echo "‚ùå –ü–æ–º–∏–ª–∫–∞ AWS –∫—Ä–µ–¥–µ–Ω—à–∞–ª—ñ–≤!"
    exit 1
fi

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ñ—É–Ω–∫—Ü—ñ—è
echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è Lambda —Ñ—É–Ω–∫—Ü—ñ—ó..."

# –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ—É–Ω–∫—Ü—ñ—é
if aws lambda get-function --function-name $LAMBDA_NAME --region $REGION >/dev/null 2>&1; then
    FUNCTION_EXISTS="EXISTS"
else
    FUNCTION_EXISTS="NOT_EXISTS"
fi

echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: $FUNCTION_EXISTS"

# –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –Ω–∞—è–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
echo "üìã –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö Lambda —Ñ—É–Ω–∫—Ü—ñ–π –≤ —Ä–µ–≥—ñ–æ–Ω—ñ $REGION:"
aws lambda list-functions --region $REGION --query 'Functions[].FunctionName' --output table 2>/dev/null || echo "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü—ñ–π"

if [ "$FUNCTION_EXISTS" = "EXISTS" ]; then
    echo "üîÑ –§—É–Ω–∫—Ü—ñ—è —ñ—Å–Ω—É—î. –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–¥ —ñ—Å–Ω—É—é—á–æ—ó Lambda —Ñ—É–Ω–∫—Ü—ñ—ó..."
    
    # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ—É–Ω–∫—Ü—ñ—é
    CURRENT_STATUS=$(aws lambda get-function --function-name $LAMBDA_NAME --region $REGION --query 'Configuration.State' --output text 2>/dev/null)
    echo "üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü—ñ—ó: $CURRENT_STATUS"
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–¥
    aws lambda update-function-code \
        --function-name $LAMBDA_NAME \
        --zip-file fileb://bonus-operations.zip \
        --region $REGION
    
    echo "‚úÖ –ö–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–æ"
    
    # –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É
    wait_for_function_update $LAMBDA_NAME
    
    echo "‚öôÔ∏è –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é Lambda —Ñ—É–Ω–∫—Ü—ñ—ó..."
    aws lambda update-function-configuration \
        --function-name $LAMBDA_NAME \
        --runtime python3.13 \
        --handler lambda_function.lambda_handler \
        --timeout 30 \
        --memory-size 256 \
        --environment Variables="{KEYCRM_API_TOKEN=M2IyOTFjNWM4ODA2OWU0NjU4ZDRkODAxZDVkMTQ4ZGNlMzUzYzc5NQ,KEYCRM_BASE_URL=https://openapi.keycrm.app/v1}" \
        --region $REGION
    
    echo "‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–∞"
    
    # –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    wait_for_function_update $LAMBDA_NAME
else
    echo "üÜï –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É Lambda —Ñ—É–Ω–∫—Ü—ñ—é..."
    aws lambda create-function \
        --function-name $LAMBDA_NAME \
        --runtime python3.13 \
        --role $LAMBDA_ROLE \
        --handler lambda_function.lambda_handler \
        --zip-file fileb://bonus-operations.zip \
        --timeout 30 \
        --memory-size 256 \
        --environment Variables="{KEYCRM_API_TOKEN=M2IyOTFjNWM4ODA2OWU0NjU4ZDRkODAxZDVkMTQ4ZGNlMzUzYzc5NQ,KEYCRM_BASE_URL=https://openapi.keycrm.app/v1}" \
        --region $REGION
    
    # –û—á—ñ–∫—É—î–º–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –Ω–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
    wait_for_function_update $LAMBDA_NAME
fi

# –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
rm bonus-operations.zip

echo "‚úÖ Lambda —Ñ—É–Ω–∫—Ü—ñ—è $LAMBDA_NAME —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∞!"

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü—ñ—ó
echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü—ñ—ó..."
FUNCTION_STATUS=$(aws lambda get-function --function-name $LAMBDA_NAME --region $REGION --query 'Configuration.State' --output text 2>/dev/null)
echo "üìä –°—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü—ñ—ó: $FUNCTION_STATUS"

if [ "$FUNCTION_STATUS" != "Active" ]; then
    echo "‚ö†Ô∏è –£–í–ê–ì–ê: –§—É–Ω–∫—Ü—ñ—è –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Å—Ç–∞–Ω—ñ. –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–µ–ø–ª–æ—î–º."
fi

# –û—Ç—Ä–∏–º—É—î–º–æ ARN —Ñ—É–Ω–∫—Ü—ñ—ó
LAMBDA_ARN=$(aws lambda get-function --function-name $LAMBDA_NAME --region $REGION --query 'Configuration.FunctionArn' --output text)
echo "üìã Lambda ARN: $LAMBDA_ARN"

echo "üåê –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ API Gateway..."

# –°—Ç–≤–æ—Ä—é—î–º–æ API Gateway
API_NAME="bonus-operations-api"
echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è API Gateway..."

# –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ API
API_ID=$(aws apigatewayv2 get-apis --region $REGION --query "Items[?Name=='$API_NAME'].ApiId" --output text)

if [ "$API_ID" = "" ] || [ "$API_ID" = "None" ]; then
    echo "üÜï –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π HTTP API Gateway..."
    API_ID=$(aws apigatewayv2 create-api \
        --name $API_NAME \
        --protocol-type HTTP \
        --cors-configuration AllowOrigins="*",AllowMethods="GET,POST,OPTIONS",AllowHeaders="content-type,x-amz-date,authorization,x-api-key" \
        --region $REGION \
        --query 'ApiId' --output text)
    echo "üÜî –°—Ç–≤–æ—Ä–µ–Ω–∏–π API ID: $API_ID"
else
    echo "üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π API ID: $API_ID"
fi

# –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ Lambda
echo "üîó –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ Lambda..."
INTEGRATION_ID=$(aws apigatewayv2 create-integration \
    --api-id $API_ID \
    --integration-type AWS_PROXY \
    --integration-uri $LAMBDA_ARN \
    --payload-format-version "2.0" \
    --region $REGION \
    --query 'IntegrationId' --output text)

echo "üîó Integration ID: $INTEGRATION_ID"

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–∏
echo "üõ§Ô∏è –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–∏..."

ROUTES=(
    "POST /order-complete"
    "POST /order-cancel" 
    "POST /order-reserve"
    "POST /lead-reserve"
    "POST /test-log"
    "OPTIONS /{proxy+}"
)

for route in "${ROUTES[@]}"; do
    echo "üìç –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç: $route"
    aws apigatewayv2 create-route \
        --api-id $API_ID \
        --route-key "$route" \
        --target "integrations/$INTEGRATION_ID" \
        --region $REGION > /dev/null
done

# –°—Ç–≤–æ—Ä—é—î–º–æ stage
echo "üé≠ –°—Ç–≤–æ—Ä—é—î–º–æ stage..."
aws apigatewayv2 create-stage \
    --api-id $API_ID \
    --stage-name "prod" \
    --auto-deploy \
    --region $REGION > /dev/null 2>&1 || echo "Stage –≤–∂–µ —ñ—Å–Ω—É—î"

# –î–æ–¥–∞—î–º–æ –¥–æ–∑–≤—ñ–ª –¥–ª—è API Gateway –≤–∏–∫–ª–∏–∫–∞—Ç–∏ Lambda
echo "üîê –î–æ–¥–∞—î–º–æ –¥–æ–∑–≤–æ–ª–∏..."
aws lambda add-permission \
    --function-name $LAMBDA_NAME \
    --statement-id api-gateway-invoke \
    --action lambda:InvokeFunction \
    --principal apigateway.amazonaws.com \
    --source-arn "arn:aws:execute-api:$REGION:881490108668:$API_ID/*/*" \
    --region $REGION > /dev/null 2>&1 || echo "–î–æ–∑–≤—ñ–ª –≤–∂–µ —ñ—Å–Ω—É—î"

# –û—Ç—Ä–∏–º—É—î–º–æ URL API
API_URL="https://$API_ID.execute-api.$REGION.amazonaws.com/prod"

echo ""
echo "üéâ –î–ï–ü–õ–û–ô–ú–ï–ù–¢ –ó–ê–í–ï–†–®–ï–ù–û!"
echo "=================================="
echo "üîó API Gateway URL: $API_URL"
echo ""
echo "üìã –î–æ—Å—Ç—É–ø–Ω—ñ endpoint'–∏:"
echo "  POST $API_URL/order-complete"
echo "  POST $API_URL/order-cancel"
echo "  POST $API_URL/order-reserve" 
echo "  POST $API_URL/lead-reserve"
echo "  POST $API_URL/test-log"
echo ""
echo "üß™ –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç:"
echo "curl -X POST $API_URL/test-log -H 'Content-Type: application/json' -d '{\"test\": \"data\"}'"
echo ""
