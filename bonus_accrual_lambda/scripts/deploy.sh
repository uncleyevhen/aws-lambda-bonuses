#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è Lambda —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤
set -e

FUNCTION_NAME="bonus-accrual"
REGION="eu-north-1"
ROLE_NAME="lambda-bonus-accrual-role"

echo "üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è Lambda —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤..."

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ AWS CLI
if ! command -v aws &> /dev/null; then
    echo "‚ùå AWS CLI –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å AWS CLI —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ credentials."
    exit 1
fi

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –∑–±—ñ—Ä–∫–∏
echo "üì¶ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–∫–µ—Ç—É..."
rm -rf build/
mkdir -p build/

# –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
cp lambda_function.py build/
cp requirements.txt build/

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
cd build/
echo "üì• –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
pip install -r requirements.txt -t .

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è ZIP –∞—Ä—Ö—ñ–≤—É
echo "üóúÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è ZIP –∞—Ä—Ö—ñ–≤—É..."
zip -r ../bonus-accrual.zip . -x "*.pyc" "__pycache__/*"
cd ..

# –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è DynamoDB —Ç–∞–±–ª–∏—Ü—ñ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ KeyCRM
echo "üóÑÔ∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –∑ KeyCRM API (–±–µ–∑ DynamoDB)"

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è ARN —Ä–æ–ª—ñ (—Å—Ç–≤–æ—Ä—é—î–º–æ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î)
echo "üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ IAM —Ä–æ–ª—ñ..."
ROLE_ARN=$(aws iam get-role --role-name $ROLE_NAME --query 'Role.Arn' --output text 2>/dev/null || echo "")

if [ -z "$ROLE_ARN" ]; then
    echo "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è IAM —Ä–æ–ª—ñ..."
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª—ñ—Ç–∏–∫–∏ –¥–æ–≤—ñ—Ä–∏
    cat > trust-policy.json << EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}
EOF

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–ª—ñ
    aws iam create-role \
        --role-name $ROLE_NAME \
        --assume-role-policy-document file://trust-policy.json

    # –ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –ø–æ–ª—ñ—Ç–∏–∫
    aws iam attach-role-policy \
        --role-name $ROLE_NAME \
        --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –ø–æ–ª—ñ—Ç–∏–∫–∏ (—Ç—ñ–ª—å–∫–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è)
    cat > minimal-policy.json << EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:*"
        }
    ]
}
EOF

    aws iam put-role-policy \
        --role-name $ROLE_NAME \
        --policy-name MinimalLambdaAccess \
        --policy-document file://minimal-policy.json

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ARN —Ä–æ–ª—ñ
    ROLE_ARN=$(aws iam get-role --role-name $ROLE_NAME --query 'Role.Arn' --output text)
    
    # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω–Ω—è —Ä–æ–ª—ñ
    echo "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω–Ω—è IAM —Ä–æ–ª—ñ..."
    sleep 10
    
    rm trust-policy.json minimal-policy.json
    echo "‚úÖ IAM —Ä–æ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–∞"
else
    echo "‚úÖ IAM —Ä–æ–ª—å –≤–∂–µ —ñ—Å–Ω—É—î"
fi

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Lambda —Ñ—É–Ω–∫—Ü—ñ—ó
echo "üöÄ –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è Lambda —Ñ—É–Ω–∫—Ü—ñ—ó..."
if aws lambda get-function --function-name $FUNCTION_NAME --region $REGION &> /dev/null; then
    echo "–û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó..."
    aws lambda update-function-code \
        --function-name $FUNCTION_NAME \
        --zip-file fileb://bonus-accrual.zip \
        --region $REGION
    
    aws lambda update-function-configuration \
        --function-name $FUNCTION_NAME \
        --environment Variables="{KEYCRM_API_TOKEN=M2IyOTFjNWM4ODA2OWU0NjU4ZDRkODAxZDVkMTQ4ZGNlMzUzYzc5NQ,KEYCRM_BASE_URL=https://openapi.keycrm.app/v1}" \
        --timeout 30 \
        --memory-size 512 \
        --region $REGION
else
    echo "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó..."
    aws lambda create-function \
        --function-name $FUNCTION_NAME \
        --runtime python3.9 \
        --role $ROLE_ARN \
        --handler lambda_function.lambda_handler \
        --zip-file fileb://bonus-accrual.zip \
        --environment Variables="{KEYCRM_API_TOKEN=M2IyOTFjNWM4ODA2OWU0NjU4ZDRkODAxZDVkMTQ4ZGNlMzUzYzc5NQ,KEYCRM_BASE_URL=https://openapi.keycrm.app/v1}" \
        --timeout 30 \
        --memory-size 512 \
        --region $REGION
fi

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è API Gateway (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
echo "üåê –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API Gateway..."
read -p "–°—Ç–≤–æ—Ä–∏—Ç–∏ API Gateway –¥–ª—è —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó? (y/n): " create_api

if [ "$create_api" = "y" ]; then
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è API Gateway
    API_ID=$(aws apigateway create-rest-api \
        --name "bonus-accrual-api" \
        --description "API –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤" \
        --region $REGION \
        --query 'id' --output text)
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è root resource ID
    ROOT_ID=$(aws apigateway get-resources \
        --rest-api-id $API_ID \
        --region $REGION \
        --query 'items[0].id' --output text)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è resource
    RESOURCE_ID=$(aws apigateway create-resource \
        --rest-api-id $API_ID \
        --parent-id $ROOT_ID \
        --path-part "bonus-accrual" \
        --region $REGION \
        --query 'id' --output text)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è POST –º–µ—Ç–æ–¥—É
    aws apigateway put-method \
        --rest-api-id $API_ID \
        --resource-id $RESOURCE_ID \
        --http-method POST \
        --authorization-type NONE \
        --region $REGION
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è OPTIONS –º–µ—Ç–æ–¥—É –¥–ª—è CORS
    aws apigateway put-method \
        --rest-api-id $API_ID \
        --resource-id $RESOURCE_ID \
        --http-method OPTIONS \
        --authorization-type NONE \
        --region $REGION
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Lambda
    LAMBDA_ARN="arn:aws:lambda:$REGION:$(aws sts get-caller-identity --query Account --output text):function:$FUNCTION_NAME"
    
    aws apigateway put-integration \
        --rest-api-id $API_ID \
        --resource-id $RESOURCE_ID \
        --http-method POST \
        --type AWS_PROXY \
        --integration-http-method POST \
        --uri "arn:aws:apigateway:$REGION:lambda:path/2015-03-31/functions/$LAMBDA_ARN/invocations" \
        --region $REGION
    
    # –ù–∞–¥–∞–Ω–Ω—è –¥–æ–∑–≤–æ–ª—É API Gateway –≤–∏–∫–ª–∏–∫–∞—Ç–∏ Lambda
    aws lambda add-permission \
        --function-name $FUNCTION_NAME \
        --statement-id apigateway-access \
        --action lambda:InvokeFunction \
        --principal apigateway.amazonaws.com \
        --source-arn "arn:aws:execute-api:$REGION:$(aws sts get-caller-identity --query Account --output text):$API_ID/*/*" \
        --region $REGION
    
    # –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è API
    aws apigateway create-deployment \
        --rest-api-id $API_ID \
        --stage-name prod \
        --region $REGION
    
    echo "‚úÖ API Gateway —Å—Ç–≤–æ—Ä–µ–Ω–æ!"
    echo "üîó URL: https://$API_ID.execute-api.$REGION.amazonaws.com/prod/bonus-accrual"
    echo ""
    echo "–û–Ω–æ–≤—ñ—Ç—å BONUS_ACCRUAL_API_URL –≤ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ–º—É —Å–∫—Ä–∏–ø—Ç—ñ:"
    echo "var BONUS_ACCRUAL_API_URL = \"https://$API_ID.execute-api.$REGION.amazonaws.com/prod/bonus-accrual\";"
fi

# –û—á–∏—â–µ–Ω–Ω—è
rm -rf build/
rm bonus-accrual.zip

echo ""
echo "‚úÖ –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "üìä –§—É–Ω–∫—Ü—ñ—è: $FUNCTION_NAME"
echo "üóÑÔ∏è –¢–∞–±–ª–∏—Ü—è: $TABLE_NAME"
echo "üîê –†–æ–ª—å: $ROLE_NAME"
echo ""
echo "–î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–π—Ç–µ:"
echo "aws lambda invoke --function-name $FUNCTION_NAME --payload '{\"orderId\":\"12345\",\"orderTotal\":1000,\"bonusAmount\":100,\"customer\":{\"phone\":\"+380123456789\",\"email\":\"test@example.com\"}}' response.json"
