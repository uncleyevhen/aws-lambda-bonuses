#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É –π–æ–≥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤
"""

import requests
import json
import urllib.parse

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è KeyCRM
KEYCRM_BASE_URL = "https://openapi.keycrm.app/v1"
KEYCRM_API_TOKEN = "M2IyOTFjNWM4ODA2OWU0NjU4ZDRkODAxZDVkMTQ4ZGNlMzUzYzc5NQ"
HISTORY_FIELD_UUID = "CT_1033"  # UUID –ø–æ–ª—è "–Ü—Å—Ç–æ—Ä—ñ—è –±–æ–Ω—É—Å—ñ–≤"
BONUS_FIELD_UUID = "CT_1023"    # UUID –ø–æ–ª—è "–ë–æ–Ω—É—Å–Ω—ñ –±–∞–ª–∏"

def find_buyer_by_phone(phone):
    """–ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    
    headers = {
        'Authorization': f'Bearer {KEYCRM_API_TOKEN}',
        'Content-Type': 'application/json'
    }
    
    try:
        # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
        clean_phone = phone.replace('+', '').replace(' ', '').replace('-', '')
        if clean_phone.startswith('380') and len(clean_phone) == 12:
            search_phone = clean_phone
        else:
            search_phone = '380501234567'  # –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π –Ω–æ–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç—É
            
        filter_param = f"filter[buyer_phone]={urllib.parse.quote(search_phone)}"
        url = f"{KEYCRM_BASE_URL}/buyer?{filter_param}&include=custom_fields"
        
        print(f"üîç –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: {search_phone}")
        print(f"üì° URL: {url}")
        
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('data') and len(data['data']) > 0:
                buyer = data['data'][0]
                buyer_id = buyer['id']
                
                print(f"‚úÖ –ö–ª—ñ—î–Ω—Ç –∑–Ω–∞–π–¥–µ–Ω–∏–π:")
                print(f"   ID: {buyer_id}")
                print(f"   –Ü–º'—è: {buyer.get('full_name', 'N/A')}")
                print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {buyer.get('phone', 'N/A')}")
                print(f"   Email: {buyer.get('email', 'N/A')}")
                
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—ñ –ø–æ–ª—è
                bonus_balance = None
                bonus_history = None
                
                custom_fields = buyer.get('custom_fields', [])
                print(f"\nüìã –ö–∞—Å—Ç–æ–º–Ω—ñ –ø–æ–ª—è ({len(custom_fields)}):")
                
                for field in custom_fields:
                    field_uuid = field.get('uuid', 'N/A')
                    field_value = field.get('value', 'N/A')
                    
                    if field_uuid == BONUS_FIELD_UUID:
                        bonus_balance = field_value
                        print(f"   üí∞ –ë–æ–Ω—É—Å–Ω—ñ –±–∞–ª–∏ (CT_1023): {field_value}")
                    elif field_uuid == HISTORY_FIELD_UUID:
                        bonus_history = field_value
                        print(f"   üìú –Ü—Å—Ç–æ—Ä—ñ—è –±–æ–Ω—É—Å—ñ–≤ (CT_1033): {'–Ñ –¥–∞–Ω—ñ' if field_value else '–ü–æ—Ä–æ–∂–Ω—å–æ'}")
                    else:
                        print(f"   üî∏ {field_uuid}: {str(field_value)[:50]}...")
                
                # –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —ñ—Å—Ç–æ—Ä—ñ—ó
                if bonus_history:
                    print(f"\nüìú –Ü–°–¢–û–†–Ü–Ø –ë–û–ù–£–°–Ü–í:")
                    print("=" * 100)
                    
                    history_lines = [line.strip() for line in bonus_history.split('\n') if line.strip()]
                    
                    for i, line in enumerate(history_lines, 1):
                        print(f"{i:2d}. {line}")
                        
                        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç —Ä—è–¥–∫–∞
                        parts = line.split(' | ')
                        print(f"    –ß–∞—Å—Ç–∏–Ω: {len(parts)}")
                        
                        if len(parts) >= 6:
                            print(f"    ‚úÖ –ù–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç:")
                            print(f"       üìÖ –î–∞—Ç–∞: {parts[0]}")
                            print(f"       üÜî –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {parts[1]}")
                            print(f"       üí∞ –°—É–º–∞: {parts[2]}")
                            print(f"       ‚ûï –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: {parts[3]}")
                            print(f"       ‚ûñ –°–ø–∏—Å–∞–Ω–æ: {parts[4]}")
                            print(f"       üîÑ –ë–∞–ª–∞–Ω—Å: {parts[5]}")
                        elif len(parts) == 5:
                            print(f"    ‚ö†Ô∏è –°—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç:")
                            print(f"       üìÖ –î–∞—Ç–∞: {parts[0]}")
                            print(f"       üÜî –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {parts[1]}")
                            print(f"       üí∞ –°—É–º–∞: {parts[2]}")
                            print(f"       üéÅ –ë–æ–Ω—É—Å–∏: {parts[3]}")
                            print(f"       üîÑ –ë–∞–ª–∞–Ω—Å: {parts[4]}")
                        else:
                            print(f"    ‚ùì –ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç")
                        
                        print()
                    
                    print("=" * 100)
                else:
                    print(f"\n‚ùå –Ü—Å—Ç–æ—Ä—ñ—è –±–æ–Ω—É—Å—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è")
                
                return buyer_id
                
            else:
                print(f"‚ùå –ö–ª—ñ—î–Ω—Ç –∑ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {search_phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                return None
                
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {response.status_code}")
            print(f"   –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        return None

if __name__ == "__main__":
    print("üîç –ü–û–®–£–ö –ö–õ–Ü–Ñ–ù–¢–ê –¢–ê –ü–ï–†–ï–í–Ü–†–ö–ê –Ü–°–¢–û–†–Ü–á –ë–û–ù–£–°–Ü–í")
    print("=" * 80)
    
    # –®—É–∫–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ —Ç–µ—Å—Ç–æ–≤–∏–º –Ω–æ–º–µ—Ä–æ–º
    buyer_id = find_buyer_by_phone("+380501234567")
    
    print("=" * 80)
