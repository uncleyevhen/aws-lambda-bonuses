#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç –¥–ª—è Lambda —Ñ—É–Ω–∫—Ü—ñ—ó replenish-promo-code.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≤—Å—ñ —Ç—ñ –∂ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Ç–∞ –ª–æ–≥—ñ–∫—É, –∞–ª–µ –ø—Ä–∞—Ü—é—î –ª–æ–∫–∞–ª—å–Ω–æ.
"""

import json
import os
import sys
import logging

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(levelname)s:%(name)s:%(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

# –Ü–º—ñ—Ç—É—î–º–æ AWS Lambda —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
os.environ['AWS_LAMBDA_FUNCTION_NAME'] = 'replenish-promo-code-local'

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ replenish_env_config.json
try:
    with open('replenish_env_config.json', 'r') as f:
        config = json.load(f)
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∫–ª–∞–¥–µ–Ω–∞ –≤ Variables
        variables = config.get('Variables', {})
        for key, value in variables.items():
            os.environ[key] = str(value)
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é: {list(variables.keys())}")
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    sys.exit(1)

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Lambda —Ñ—É–Ω–∫—Ü—ñ—é
try:
    from lambda_function import lambda_handler
    print("‚úÖ Lambda —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    sys.exit(1)

def test_replenish_local():
    """–õ–æ–∫–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ—ó replenish –∑ –º–æ–∫-–¥–∞–Ω–∏–º–∏ –∑–∞–º—ñ—Å—Ç—å S3"""
    print("üß™ –ü–æ—á–∞—Ç–æ–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫ —Ñ–∞–π–ª–∏ –∑–∞–º—ñ—Å—Ç—å S3
    import json
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –∫–æ–¥—ñ–≤
    used_codes_data = {"1": 1, "2": 1, "200": 1}  # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Å—É–º–∏
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –≤ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –∑–∞–º—ñ—Å—Ç—å S3
    with open('/tmp/used_codes_count.json', 'w') as f:
        json.dump(used_codes_data, f, indent=2)
    
    print(f"üì¶ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ: {used_codes_data}")
    
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —ñ –ø–∞—Ç—á–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–∞–º–∏ –∑–∞–º—ñ—Å—Ç—å S3
    try:
        from promo_logic import PromoService
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å –±–µ–∑ S3
        from browser_manager import BrowserManager
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±—Ä–∞—É–∑–µ—Ä
        browser_manager = BrowserManager()
        page = browser_manager.initialize()  # –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –º–µ—Ç–æ–¥
        
        service = PromoService(page=page)
        service.use_s3 = False  # –í–∏–º–∏–∫–∞—î–º–æ S3
        service.s3_client = None
        
        # –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ª–æ–≥—ñ–Ω—É (–∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó)
        service.admin_username = os.getenv('ADMIN_USERNAME')
        service.admin_password = os.getenv('ADMIN_PASSWORD')
        
        print("üîß –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å –±–µ–∑ S3")
        if service.admin_username:
            print(f"üîë –õ–æ–≥—ñ–Ω: {service.admin_username[:3]}***")  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 3 —Å–∏–º–≤–æ–ª–∏
        else:
            print("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ª–æ–≥—ñ–Ω—É –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
        
        # –¢–µ—Å—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é get_codes_for_amount_from_admin –Ω–∞–ø—Ä—è–º—É
        print("üß™ –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ...")
        
        # –°–ø–æ—á–∞—Ç–∫—É –ª–æ–≥—ñ–Ω
        if service.login():
            print("‚úÖ –õ–æ–≥—ñ–Ω —É—Å–ø—ñ—à–Ω–∏–π!")
            
            # –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ 1
            print("üîç –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ 1...")
            codes = service.get_and_check_codes_for_amount(1)
            
            print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤: {len(codes)}")
            print(f"üè∑Ô∏è –ö–æ–¥–∏: {codes[:5]}...")  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —â–æ –≤—Å—ñ –∫–æ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ñ (–æ—Å–∫—ñ–ª—å–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ)
            if codes:
                first_code = codes[0]
                print(f"üîç –ü—Ä–∏–∫–ª–∞–¥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–¥—É: {first_code}")
                print(f"üìä –í—Å—ñ {len(codes)} –∫–æ–¥—ñ–≤ –∞–∫—Ç–∏–≤–Ω—ñ (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ)")
            
            return {"status": "success", "codes_found": len(codes), "test_code": codes[0] if codes else None}
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—ñ–Ω—É")
            return {"status": "error", "message": "Login failed"}
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")
        import traceback
        traceback.print_exc()
        return {"status": "error", "message": str(e)}

if __name__ == "__main__":
    print("üöÄ –õ–æ–∫–∞–ª—å–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Lambda —Ñ—É–Ω–∫—Ü—ñ—ó replenish-promo-code")
    print("=" * 60)
    
    result = test_replenish_local()
    
    print("=" * 60)
    if result:
        print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        print("üí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏!")
