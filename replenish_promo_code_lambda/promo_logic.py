"""
–ë–∞–∑–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ - core —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –¥–ª—è Lambda.

–¶–µ–π –º–æ–¥—É–ª—å –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ Lambda —Ñ—É–Ω–∫—Ü—ñ—ó:
- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ (single code)
- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ  
- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —Ç–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ—è–º–∏
- –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ S3 –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–¥—ñ–≤ —Ç–∞ —Å–µ—Å—ñ–π
- –ë–∞–∑–æ–≤—ñ —É—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è BON –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤

–°–∫–ª–∞–¥–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≤–∏–Ω–µ—Å–µ–Ω–∞ –≤ –æ–∫—Ä–µ–º—ñ –º–æ–¥—É–ª—ñ:
- promo_smart.py - –∞–Ω–∞–ª—ñ–∑, —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è, –ø–∞–∫–µ—Ç–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
- generate_promo_codes_complex.py - —Ä–æ–∑—É–º–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑ –∞–Ω–∞–ª—ñ–∑–æ–º –∑–∞–ø–∞—Å—ñ–≤
"""

import time

import os
import random
import string
import time
import json
from datetime import datetime, timedelta
from playwright.sync_api import Page
import boto3
from botocore.exceptions import ClientError, NoCredentialsError

try:
    from .bon_utils import is_bon_promo_code, extract_amount_from_bon_code
except ImportError:
    # Fallback –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–µ–∑ –ø–∞–∫–µ—Ç–∞
    from bon_utils import is_bon_promo_code, extract_amount_from_bon_code

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ S3
try:
    boto3.client('s3')  # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç
    S3_AVAILABLE = True
except (NoCredentialsError, ClientError):
    S3_AVAILABLE = False


class PromoService:
    """
    –ë–∞–∑–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ (core —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å).
    
    –û—Å–Ω–æ–≤–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:
    - –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–æ–¥–∏–Ω–æ–∫–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –∑–∞ —Ñ–æ—Ä–º–∞—Ç–æ–º BON{—Å—É–º–∞}{—Ä–∞–Ω–¥–æ–º}
    - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –∑ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è–º —Ñ–æ—Ä–º–∏
    - –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ—è–º–∏ –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º –≤ S3/—Ñ–∞–π–ª–∞—Ö
    - –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–∞–ø–∞—Å—ñ–≤ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –≤ S3
    - –®–≤–∏–¥–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ cookies
    
    –î–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ PromoSmartManager –∑ promo_smart.py
    """
    
    def __init__(self, page: Page = None):
        self.page = page
        self.admin_url = os.getenv('ADMIN_URL', 'https://safeyourlove.com/edit/discounts/codes')  # –û–¥—Ä–∞–∑—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑–Ω–∏–∂–æ–∫
        self.admin_username = os.getenv('ADMIN_USERNAME')
        self.admin_password = os.getenv('ADMIN_PASSWORD')
        self._cached_iframe = None  # –ö–µ—à—É–≤–∞–Ω–Ω—è iframe
        self._session_cookies = None  # –ö–µ—à—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ—ó –≤ –ø–∞–º'—è—Ç—ñ
        self._session_timestamp = None
        self._session_timeout = 3600  # 1 –≥–æ–¥–∏–Ω–∞ —É —Å–µ–∫—É–Ω–¥–∞—Ö
        self._session_file = '/tmp/session_cookies.json'  # –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó (fallback)
        
        # S3 –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
        self.s3_bucket = os.getenv('SESSION_S3_BUCKET', 'lambda-promo-sessions')
        self.s3_key = f'sessions/{os.getenv("AWS_LAMBDA_FUNCTION_NAME", "local")}_session.json'
        self.promo_codes_key = os.getenv('PROMO_CODES_S3_KEY', 'promo-codes/available_codes.json')  # –ö–ª—é—á –¥–ª—è —Ñ–∞–π–ª—É –∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
        self.used_codes_key = os.getenv('USED_CODES_S3_KEY', 'promo-codes/used_codes_count.json')  # –ö–ª—é—á –¥–ª—è —Ñ–∞–π–ª—É –∑ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞–º–∏
        self.use_s3 = S3_AVAILABLE and bool(os.getenv('AWS_LAMBDA_FUNCTION_NAME'))
        
        self.s3_client = None
        if self.use_s3:
            try:
                self.s3_client = boto3.client('s3')
                print(f"üîß AWS Lambda: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ S3 –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó (bucket: {self.s3_bucket})")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ S3 –∫–ª—ñ—î–Ω—Ç: {e}")
                self.use_s3 = False
        
        # –ü—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤ AWS Lambda –≤—ñ–¥—Ä–∞–∑—É –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—É —Å–µ—Å—ñ—é
        if os.getenv('AWS_LAMBDA_FUNCTION_NAME'):
            print("üîß AWS Lambda: –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—É —Å–µ—Å—ñ—é –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó...")
            if self.use_s3:
                self._load_session_from_s3()
            else:
                self._load_session_from_file()
    
    def _generate_single_code_string(self, amount: int) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥—É –¥–ª—è –∑–∞–¥–∞–Ω–æ—ó —Å—É–º–∏."""
        amount_str = str(amount)
        prefix = f'BON{amount_str}'
        random_part_length = max(3, 7 - len(amount_str))
        random_part = ''.join(random.choices(string.ascii_uppercase + string.digits, k=random_part_length))
        return prefix + random_part
    
    def apply_amount_filter(self, amount):
        """
        üí∞ –ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ—ñ–ª—å—Ç—Ä –ø–æ —Å—É–º—ñ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ —á–µ—Ä–µ–∑ UI.
        """
        start_time = time.time()
        
        try:
            frame = self._get_iframe()
            if not frame:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ iframe –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞")
                return False
                
            # 1. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ –∑ —Å—É–º–æ—é (–ø—Ä–∞—Ü—é—î —Ç–æ—á–Ω–æ)
            amount_header = frame.locator('#header_id_4778')
            if not amount_header.count():
                print("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–†–æ–∑–º—ñ—Ä –∑–Ω–∏–∂–∫–∏'")
                return False
            
            # 2. –ù–∞–≤–æ–¥–∏–º–æ –º–∏—à–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó —Ñ—ñ–ª—å—Ç—Ä–∞
            amount_header.hover()
            time.sleep(1.0)  # –î–∞—î–º–æ —á–∞—Å –¥–ª—è –ø–æ—è–≤–∏ –±–ª–æ–∫–∞
            
            # 3. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–ª–æ–∫ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó (–ø—Ä–∞—Ü—é—î —Ç–æ—á–Ω–æ)
            filter_block = frame.locator('#sortingBlock_4778')
            if not filter_block.count():
                print("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –±–ª–æ–∫ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")
                return False
            
            # 4. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è (–ø—Ä–∞—Ü—é—é—Ç—å —Ç–æ—á–Ω–æ)
            from_field = filter_block.locator('input[name="text1"]')
            to_field = filter_block.locator('input[name="text2"]')
            
            if not from_field.count() or not to_field.count():
                print("‚ö†Ô∏è –ü–æ–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # 5. –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä
            from_field.click()
            from_field.fill('')  # –û—á–∏—â—É—î–º–æ
            from_field.fill(str(amount))
            time.sleep(0.3)
            
            to_field.click()
            to_field.fill('')  # –û—á–∏—â—É—î–º–æ  
            to_field.fill(str(amount))
            time.sleep(0.3)
            
            # 6. –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —á–µ—Ä–µ–∑ Enter
            to_field.press('Enter')
            
            # 7. –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            time.sleep(3.0)
            
            total_time = time.time() - start_time
            print(f"‚úÖ –§—ñ–ª—å—Ç—Ä –ø–æ —Å—É–º—ñ {amount} –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –∑–∞ {total_time:.3f}—Å")
            return True
            
        except Exception as e:
            total_time = time.time() - start_time
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞ –ø—ñ—Å–ª—è {total_time:.3f}—Å: {e}")
            return False

    def get_active_codes(self, amount):
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ –¥–ª—è –∑–∞–¥–∞–Ω–æ—ó —Å—É–º–∏,
        –ø–µ—Ä–µ–≤—ñ—Ä—è—î —ó—Ö –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å, –≤–∏–¥–∞–ª—è—î –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∫–æ–¥–∏.
        
        –ü–æ–≤–µ—Ä—Ç–∞—î: active_codes (—Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤)
        """
        try:
            frame = self._get_iframe()
            if not frame:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ iframe –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–¥—ñ–≤")
                return []
                
            print(f"üîç –û—Ç—Ä–∏–º—É—î–º–æ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–¥–∏ –¥–ª—è —Å—É–º–∏ {amount} –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ...")
            
            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ UI —Ñ—ñ–ª—å—Ç—Ä –ø–æ —Å—É–º—ñ
            self.apply_amount_filter(amount)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
            try:
                rows = frame.locator('tbody tr').all()
                total_rows = len(rows)
                print(f"üìä –í—Å—å–æ–≥–æ —Ä—è–¥–∫—ñ–≤ –≤ —Ç–∞–±–ª–∏—Ü—ñ: {total_rows}")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä—è–¥–∫—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ: {e}")
                return []
            
            active_codes = []
            inactive_codes_to_delete = []
            processed_rows = 0
            skipped_rows = 0
            
            for i, row in enumerate(rows):
                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–æ–º—ñ—Ä–∫–∏ –≤ —Ä—è–¥–∫—É
                    cells = row.locator('td').all()
                    cell_count = len(cells)
                    
                    if cell_count < 4:  # –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 4 –∫–æ–ª–æ–Ω–∫–∏
                        skipped_rows += 1
                        continue
                    
                    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: col0 | col1 | col2(—Å—Ç–∞—Ç—É—Å) | col3(–∫–æ–¥) | col4(—Å—É–º–∞) | col5(–¥–∞—Ç–∞) | col6
                    status_cell = cells[2]
                    code_cell = cells[3]
                    
                    status = status_cell.inner_text().strip() 
                    code = code_cell.inner_text().strip()
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤—ñ —Ç–∞ —Å–ª—É–∂–±–æ–≤—ñ —Ä—è–¥–∫–∏  
                    if (code.lower() in ['–∫–æ–¥', 'code', '–ø—Ä–æ–º–æ–∫–æ–¥', 'promo_code', '–¥—ñ–π—Å–Ω—ñ –¥–æ'] or 
                        'january' in code.lower() or 
                        'calendar' in code.lower() or 
                        len(code) > 50 or  # –ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ —Ä—è–¥–∫–∏ - —Ü–µ –Ω–µ –ø—Ä–æ–º–æ–∫–æ–¥–∏
                        not code.startswith('BON')):  # –ü—Ä–æ–º–æ–∫–æ–¥–∏ –ø–æ–≤–∏–Ω–Ω—ñ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—å –∑ BON
                        print(f"  üìã –†—è–¥–æ–∫ {i+4}: –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫/–Ω–µ-–ø—Ä–æ–º–æ–∫–æ–¥ - '{code[:50]}...'")
                        skipped_rows += 1
                        continue
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä—è–¥–∫–∏ –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
                    if not code.strip() or not status.strip():
                        print(f"  ‚ö†Ô∏è –†—è–¥–æ–∫ {i+4}: –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ - –ø–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–¥/—Å—Ç–∞—Ç—É—Å")
                        skipped_rows += 1
                        continue
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ–¥—É
                    is_active = status.lower() in ['—Ç–∞–∫', 'yes', '–∞–∫—Ç–∏–≤–Ω–∏–π', 'active']
                    
                    if is_active:
                        active_codes.append(code)
                        print(f"  ‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π –∫–æ–¥ '{code}' (—Ä—è–¥–æ–∫ {i+4})")
                    else:
                        inactive_codes_to_delete.append(code)
                        print(f"  ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π –∫–æ–¥ '{code}' (—Å—Ç–∞—Ç—É—Å: '{status}') –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ (—Ä—è–¥–æ–∫ {i+4})")
                    
                    processed_rows += 1
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä—è–¥–∫–∞ {i}: {e}")
                    skipped_rows += 1
                    continue
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è —Å—É–º–∏ {amount}:")
            print(f"   üìã –í—Å—å–æ–≥–æ —Ä—è–¥–∫—ñ–≤ –≤ —Ç–∞–±–ª–∏—Ü—ñ: {total_rows}")
            print(f"   ‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ —Ä—è–¥–∫—ñ–≤: {processed_rows}")
            print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ä—è–¥–∫—ñ–≤: {skipped_rows}")
            print(f"   üü¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤: {len(active_codes)}")
            print(f"   üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {len(inactive_codes_to_delete)}")
            
            # –Ø–∫—â–æ —î –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–æ–¥–∏ - –≤–∏–¥–∞–ª—è—î–º–æ —ó—Ö –æ–¥—Ä–∞–∑—É
            if inactive_codes_to_delete:
                print(f"üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ {len(inactive_codes_to_delete)} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤: {inactive_codes_to_delete}")
                
                try:
                    # 1. –í–∏–±–∏—Ä–∞—î–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–æ–¥–∏ —á–µ—Ä–µ–∑ —á–µ–∫–±–æ–∫—Å–∏ (—è–∫ –≤ –ø—Ä–æ–º–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ)
                    selected_count = 0
                    for code in inactive_codes_to_delete:
                        try:
                            # –®—É–∫–∞—î–º–æ —Ä—è–¥–æ–∫ –∑ –ø—Ä–æ–º–æ–∫–æ–¥–æ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ XPath —è–∫ –≤ –ø—Ä–æ–º–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ
                            row_locator = frame.locator(f'//tr[td[4][normalize-space(.)="{code}"]]')
                            
                            if row_locator.count() == 0:
                                print(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä—è–¥–æ–∫ –¥–ª—è –∫–æ–¥—É: {code}")
                                continue

                            # –®—É–∫–∞—î–º–æ —á–µ–∫–±–æ–∫—Å –≤ —Ä—è–¥–∫—É
                            checkbox = row_locator.locator('input[type="checkbox"]').first
                            if checkbox.count() > 0:
                                if not checkbox.is_checked():
                                    checkbox.click()
                                    selected_count += 1
                                    print(f"  ‚úÖ –í—ñ–¥–º—ñ—á–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π –∫–æ–¥: {code}")
                                    
                        except Exception as e:
                            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–º—ñ—Ç—Ü—ñ –∫–æ–¥—É {code}: {e}")
                    
                    print(f"‚òëÔ∏è –í—ñ–¥–º—ñ—á–µ–Ω–æ {selected_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
                    
                    if selected_count > 0:
                        # 2. –í–∏–¥–∞–ª—è—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ –∫–æ–¥–∏ (headless —Ä–µ–∂–∏–º)
                        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥—ñ–∞–ª–æ–≥—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                        dialog_handled = False
                        def handle_dialog(dialog):
                            nonlocal dialog_handled
                            print(f"üí¨ –û—Ç—Ä–∏–º–∞–Ω–æ –¥—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {dialog.message}")
                            dialog.accept()
                            dialog_handled = True
                            print("‚úÖ –î—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ")
                        
                        # –û—Ç—Ä–∏–º—É—î–º–æ page –∑ –±—Ä–∞—É–∑–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                        page = frame.page
                        page.on('dialog', handle_dialog)
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                        function_exists = frame.evaluate('typeof removeSelectedGrids === "function"')
                        
                        if function_exists:
                            print("üîß –í–∏–∫–ª–∏–∫–∞—î–º–æ removeSelectedGrids()...")
                            frame.evaluate('removeSelectedGrids()')
                        else:
                            print("‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è removeSelectedGrids –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, —à—É–∫–∞—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å–ø–æ—Å–æ–±–∏...")
                            
                            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–±: –ø–æ—à—É–∫ –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                            delete_button_selectors = [
                                'button[onclick*="removeSelectedGrids"]',
                                'input[onclick*="removeSelectedGrids"]',
                                'a[onclick*="removeSelectedGrids"]',
                                '.btn-delete',
                                '#delete-selected',
                                'button:has-text("–í–∏–¥–∞–ª–∏—Ç–∏")',
                                'input[value*="–í–∏–¥–∞–ª–∏—Ç–∏"]',
                                '[title*="–í–∏–¥–∞–ª–∏—Ç–∏"]'
                            ]
                            
                            button_found = False
                            for selector in delete_button_selectors:
                                buttons = frame.locator(selector)
                                if buttons.count() > 0:
                                    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {selector}")
                                    buttons.first.click()
                                    button_found = True
                                    break
                            
                            if not button_found:
                                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Å–ø–æ—Å–æ–± –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
                                return active_codes, []
                        
                        # –û—á—ñ–∫—É—î–º–æ –ø–æ—è–≤–∏ –¥—ñ–∞–ª–æ–≥—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                        print("‚è≥ –û—á—ñ–∫—É—î–º–æ –ø–æ—è–≤–∏ –¥—ñ–∞–ª–æ–≥—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è...")
                        import time
                        time.sleep(1.5)
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–≤ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –¥—ñ–∞–ª–æ–≥
                        if dialog_handled:
                            print("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –¥—ñ–∞–ª–æ–≥ –æ–±—Ä–æ–±–ª–µ–Ω–æ, –æ–ø–µ—Ä–∞—Ü—ñ—è –º–∞—î –∑–∞–≤–µ—Ä—à–∏—Ç–∏—Å—å")
                        else:
                            # –®—É–∫–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                            print("üîç –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –¥—ñ–∞–ª–æ–≥ –Ω–µ –∑'—è–≤–∏–≤—Å—è, —à—É–∫–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ...")
                            
                            confirm_selectors = [
                                '.confirm-modal__button--ok',
                                'button:has-text("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")',
                                'button:has-text("–¢–∞–∫")',
                                'button:has-text("OK")',
                                '#dialog-window .confirm-modal__button--ok',
                                '.modal-footer button.btn-primary',
                                '.ui-dialog-buttonset button:first-child',
                                'button[onclick*="confirm"]',
                                '.dialog-confirm-button'
                            ]
                            
                            button_found = False
                            for selector in confirm_selectors:
                                confirm_buttons = frame.locator(selector)
                                if confirm_buttons.count() > 0:
                                    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {selector}")
                                    confirm_buttons.first.click()
                                    print("üéØ –ö–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ!")
                                    button_found = True
                                    time.sleep(0.5)
                                    break
                            
                            if not button_found:
                                print("‚å®Ô∏è –ö–Ω–æ–ø–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É—î–º–æ Enter —Ç–∞ JavaScript...")
                                
                                # –°–ø—Ä–æ–±–∞ 1: Enter –Ω–∞ iframe
                                try:
                                    frame.press('body', 'Enter')
                                    time.sleep(0.5)
                                except Exception:
                                    pass
                                
                                # –°–ø—Ä–æ–±–∞ 2: JavaScript –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                                try:
                                    frame.evaluate("""
                                        // –ü—Ä–æ–±—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —á–µ—Ä–µ–∑ —Ä—ñ–∑–Ω—ñ —Å–ø–æ—Å–æ–±–∏
                                        if (typeof confirmDelete === 'function') {
                                            confirmDelete();
                                        } else if (typeof confirm !== 'undefined') {
                                            // –Ø–∫—â–æ —î –≥–ª–æ–±–∞–ª—å–Ω–∏–π confirm, –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ –π–æ–≥–æ
                                            window.confirm = function() { return true; };
                                        }
                                        
                                        // –Ü–º—ñ—Ç—É—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è Enter –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ
                                        const event = new KeyboardEvent('keydown', {
                                            key: 'Enter',
                                            code: 'Enter',
                                            keyCode: 13,
                                            bubbles: true
                                        });
                                        document.dispatchEvent(event);
                                        
                                        // –°–ø—Ä–æ–±—É—î–º–æ —Ç—Ä–∏–≥–µ—Ä–Ω—É—Ç–∏ –ø–æ–¥—ñ—é –Ω–∞ —Ñ–æ—Ä–º—ñ
                                        const forms = document.querySelectorAll('form');
                                        if (forms.length > 0) {
                                            forms[0].dispatchEvent(new Event('submit', {bubbles: true}));
                                        }
                                    """)
                                    print("üîß –í–∏–∫–æ–Ω–∞–Ω–æ JavaScript –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è")
                                except Exception as js_error:
                                    print(f"‚ö†Ô∏è JavaScript –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è: {js_error}")
                        
                        # –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
                        print("‚è≥ –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–Ω—è...")
                        time.sleep(3.0)
                        
                        print(f"‚úÖ {len(inactive_codes_to_delete)} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")
                    else:
                        print("‚ö†Ô∏è –ù–µ–º–∞—î –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
                        
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤: {e}")
            
            print(f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∞–Ω–∞–ª—ñ–∑ –¥–ª—è —Å—É–º–∏ {amount}: –∑–∞–ª–∏—à–∏–ª–æ—Å—å {len(active_codes)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤")
            return active_codes
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount}: {e}")
            return []

    def update_s3_codes(self, updated_codes):
        """
        –û–Ω–æ–≤–ª—é—î –ø—Ä–æ–º–æ–∫–æ–¥–∏ –≤ S3 –¥–ª—è –≤–∫–∞–∑–∞–Ω–∏—Ö —Å—É–º.
        
        Args:
            updated_codes: dict {"100": count, "200": count} - –¥–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        """
        if not self.s3_client:
            print("‚ùå S3 –∫–ª—ñ—î–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return False
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ –∑ S3
            try:
                response = self.s3_client.get_object(Bucket=self.s3_bucket, Key=self.promo_codes_key)
                existing_codes = json.loads(response['Body'].read().decode('utf-8'))
                print(f"üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —ñ—Å–Ω—É—é—á—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏: {[(k, len(v)) for k, v in existing_codes.items()]}")
            except ClientError as e:
                if e.response['Error']['Code'] == 'NoSuchKey':
                    print("üì¶ –§–∞–π–ª –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π")
                    existing_codes = {}
                else:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ—Å–Ω—É—é—á–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤: {e}")
                    return False
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤–∫–∞–∑–∞–Ω—ñ —Å—É–º–∏
            for amount_str, codes_list in updated_codes.items():
                old_count = len(existing_codes.get(amount_str, []))
                existing_codes[amount_str] = codes_list
                print(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ —Å—É–º—É {amount_str}: –±—É–ª–æ {old_count} –∫–æ–¥—ñ–≤, —Å—Ç–∞–ª–æ {len(codes_list)}")
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
            self.s3_client.put_object(
                Bucket=self.s3_bucket,
                Key=self.promo_codes_key,
                Body=json.dumps(existing_codes, indent=2),
                ContentType='application/json'
            )
            
            print(f"üíæ –ü—Ä–æ–º–æ–∫–æ–¥–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ S3 –¥–ª—è —Å—É–º: {list(updated_codes.keys())}")
            print(f"üìä –ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω S3: {[(k, len(v)) for k, v in existing_codes.items()]}")
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –≤ S3: {e}")
            return False

    def replenish_promo_codes(self, used_codes_count):
        """
        –ü–æ–ø–æ–≤–Ω—é—î –∑–∞–ø–∞—Å–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤:
        1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ—Å–Ω—É—é—á—ñ –∫–æ–¥–∏ –∑ S3
        2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î —è–∫—ñ –∑ –Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω—ñ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        3. –í–∏–¥–∞–ª—è—î –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–æ–¥–∏
        4. –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—ñ –∫–æ–¥–∏ –¥–æ —Ü—ñ–ª—å–æ–≤–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö
        5. –û–Ω–æ–≤–ª—é—î S3 –∑ –Ω–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
        
        Args:
            used_codes_count: dict {"100": 5, "200": 3} - –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö
        """
        print(f"üß† [Smart] –†–æ–∑—É–º–Ω–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–ª—è —Å—É–º: {list(used_codes_count.keys())}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–ª—å–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
        target_codes_per_amount = int(os.getenv('TARGET_CODES_PER_AMOUNT', '10'))
        print(f"üéØ [Smart] –¶—ñ–ª—å–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥—ñ–≤ –Ω–∞ —Å—É–º—É: {target_codes_per_amount}")
        
        # 1. –õ–æ–≥—ñ–Ω –≤–∏–∫–æ–Ω—É—î–º–æ –æ–¥–∏–Ω —Ä–∞–∑ –ü–ï–†–ï–î –∞–Ω–∞–ª—ñ–∑–æ–º —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–¥—ñ–≤
        if not self.login():
            print("‚ùå [Smart] –ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–π—Ç–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
            return False

        updated_codes = {}
        total_created = 0
        
        # 2. –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω—É —Å—É–º—É
        for amount_str in used_codes_count.keys():
            amount = int(amount_str)
            amount_key = str(amount)
            
            print(f"üí∞ [Smart] –û–±—Ä–æ–±–ª—è—î–º–æ —Å—É–º—É {amount}: —Ü—ñ–ª—å–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å {target_codes_per_amount}")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –∫–æ–¥–∏ –¥–ª—è —Ü—ñ—î—ó —Å—É–º–∏ (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –≤–∏–¥–∞–ª—è—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
            active_codes = self.get_active_codes(amount)
            print(f"üì¶ [Smart] –ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount}: {len(active_codes)}")
            
            # –ù–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–æ–¥–∏ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ –≤ get_active_codes()
            print(f"üîç [Smart] –ú–∞—î–º–æ {len(active_codes)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount}")
            
            # –Ø–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞–±–æ –±—ñ–ª—å—à–µ - –ù–ï –û–ù–û–í–õ–Æ–Ñ–ú–û S3 –¥–ª—è —Ü—ñ—î—ó —Å—É–º–∏
            if len(active_codes) >= target_codes_per_amount:
                print(f"‚úÖ [Smart] –î–ª—è —Å—É–º–∏ {amount} –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤ ({len(active_codes)} >= {target_codes_per_amount}), –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î –≤ S3")
                updated_codes[amount_key] = active_codes
                continue
            
            # –Ø–∫—â–æ –∫–æ–¥—ñ–≤ –Ω–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ - —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ –¥–æ —Ü—ñ–ª—å–æ–≤–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
            codes_to_create = target_codes_per_amount - len(active_codes)
            print(f"‚öôÔ∏è [Smart] –î–ª—è —Å—É–º–∏ {amount} —Å—Ç–≤–æ—Ä—é—î–º–æ {codes_to_create} –Ω–æ–≤–∏—Ö –∫–æ–¥—ñ–≤ (–¥–æ —Ü—ñ–ª—å–æ–≤–æ—ó {target_codes_per_amount})")
            
            new_codes = active_codes.copy()
            
            for i in range(codes_to_create):
                try:
                    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥—É
                    new_promo_code = self._generate_single_code_string(amount)
                    print(f"‚öôÔ∏è [Smart] –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–¥ {i+1}/{codes_to_create}: {new_promo_code}")
                    
                    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–¥—É –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
                    if self.create_promo_code(new_promo_code, amount):
                        new_codes.append(new_promo_code)
                        total_created += 1
                        print(f"‚úÖ [Smart] –ü—Ä–æ–º–æ–∫–æ–¥ {new_promo_code} —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                        time.sleep(1)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º–∏
                    else:
                        print(f"‚ùå [Smart] –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–¥: {new_promo_code}")
                        
                except Exception as e:
                    print(f"‚ùå [Smart] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ–¥—É {i+1}/{codes_to_create}: {e}")
            
            updated_codes[amount_key] = new_codes
            print(f"üìä [Smart] –î–ª—è —Å—É–º–∏ {amount}: –±—É–ª–æ {len(active_codes)} –∞–∫—Ç–∏–≤–Ω–∏—Ö, —Å—Ç–≤–æ—Ä–µ–Ω–æ {codes_to_create}, —Ç–µ–ø–µ—Ä –º–∞—î–º–æ {len(new_codes)}")
        
        # 4. –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–¥–∏ –≤ S3 —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Å—É–º (–∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —ñ–Ω—à—ñ —Å—É–º–∏)
        if self.update_s3_codes(updated_codes):
            print(f"üéâ [Smart] –†–æ–∑—É–º–Ω–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°—Ç–≤–æ—Ä–µ–Ω–æ {total_created} –Ω–æ–≤–∏—Ö –∫–æ–¥—ñ–≤")
            
            # –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–æ–∫ –ø–æ –∫–æ–∂–Ω—ñ–π —Å—É–º—ñ
            for amount_str, codes_list in updated_codes.items():
                print(f"üí∞ [Smart] –°—É–º–∞ {amount_str}: {len(codes_list)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ S3")
            
            return True
        else:
            print("‚ùå [Smart] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ–¥–∏ –≤ S3")
            return False

    def create_promo_code(self, promo_code, amount):
        """–°—Ç–≤–æ—Ä—é—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."""
        start_time = time.time()
        
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è iframe
            frame = self._get_iframe()
            if not frame:
                raise Exception("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ iframe –ø—ñ—Å–ª—è –ª–æ–≥—ñ–Ω—É")

            # –ö–ª—ñ–∫ "–î–æ–¥–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥" —á–µ—Ä–µ–∑ Playwright
            try:
                frame.locator('a.button.add.plus').click()
            except Exception as e:
                # –°–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
                selectors = [
                    'a.button.add',
                    '.button.add.plus',
                    '[class*="add"][class*="button"]',
                    'a[href*="add"]',
                    'button[type="button"]'
                ]
                button_found = False
                for selector in selectors:
                    try:
                        frame.locator(selector).click()
                        button_found = True
                        break
                    except:
                        continue
                
                if not button_found:
                    raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É '–î–æ–¥–∞—Ç–∏'")
            
            # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ—è–≤–∏ —Ñ–æ—Ä–º–∏
            frame.wait_for_selector('input[name="names[code]"]', timeout=30000)

            # –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤ —á–µ—Ä–µ–∑ JavaScript
            date_to = (datetime.now() + timedelta(days=365)).strftime('%Y-%m-%d')
            
            fill_form_js = f"""
            (function() {{
                // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è
                const codeInput = document.querySelector('input[name="names[code]"]');
                const typeSelect = document.querySelector('select[name="names[type]"]');
                const amountInput = document.querySelector('input[name="names[amount]"]');
                const dateLimitInput = document.querySelector('input[name="names[date_limit]"]');
                const activeCheckbox = document.querySelector('input[name="names[active]"][type="checkbox"]');
                
                if (codeInput) {{
                    codeInput.value = '{promo_code}';
                    codeInput.dispatchEvent(new Event('input', {{ bubbles: true }}));
                }}
                
                if (typeSelect) {{
                    typeSelect.value = '1';
                    typeSelect.dispatchEvent(new Event('change', {{ bubbles: true }}));
                }}
                
                if (amountInput) {{
                    amountInput.value = '{amount}';
                    amountInput.dispatchEvent(new Event('input', {{ bubbles: true }}));
                }}
                
                if (dateLimitInput) {{
                    dateLimitInput.value = '{date_to}';
                    dateLimitInput.dispatchEvent(new Event('input', {{ bubbles: true }}));
                }}
                
                if (activeCheckbox && !activeCheckbox.checked) {{
                    activeCheckbox.checked = true;
                    activeCheckbox.dispatchEvent(new Event('change', {{ bubbles: true }}));
                }}
                
                return 'success';
            }})();
            """
            
            frame.evaluate(fill_form_js)

            # –®–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä –≤—Å—ñ—Ö –±—Ä–µ–Ω–¥—ñ–≤ —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —á–µ—Ä–µ–∑ JavaScript
            select_all_js = """
            (function() {
                let brandsCount = 0;
                let categoriesCount = 0;
                
                const brandsSelect = document.querySelector('select[name="names[brands][]"]');
                if (brandsSelect) {
                    const options = Array.from(brandsSelect.options);
                    options.forEach(option => {
                        if (option.value && option.value !== '0') {
                            option.selected = true;
                            brandsCount++;
                        }
                    });
                    brandsSelect.dispatchEvent(new Event('change', { bubbles: true }));
                }
                
                const categoriesSelect = document.querySelector('select[name="names[categories][]"]');
                if (categoriesSelect) {
                    const options = Array.from(categoriesSelect.options);
                    options.forEach(option => {
                        if (option.value && option.value !== '0') {
                            option.selected = true;
                            categoriesCount++;
                        }
                    });
                    categoriesSelect.dispatchEvent(new Event('change', { bubbles: true }));
                }
                
                return { brands: brandsCount, categories: categoriesCount };
            })();
            """
            
            frame.evaluate(select_all_js)

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            frame.locator('input.save-exit-button[type="submit"]').click()

            # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ —Å–ø–∏—Å–æ–∫
            frame.locator('a.button.add.plus').wait_for(state='visible', timeout=10000)
            
            total_time = time.time() - start_time
            print(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{promo_code}' —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞ {total_time:.3f}—Å")
            
            return True
        except Exception as e:
            total_time = time.time() - start_time
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É '{promo_code}' –ø—ñ—Å–ª—è {total_time:.3f}—Å: {e}")
            import traceback
            traceback.print_exc()
            self.page.screenshot(path=f'/tmp/promo_creation_error_{promo_code}.png')
            return False

    def _is_session_valid(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –¥—ñ–π—Å–Ω–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —Å–µ—Å—ñ—è"""
        if not self._session_cookies or not self._session_timestamp:
            print("üîç –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö cookies –∞–±–æ timestamp")
            return False
        
        # –î–ª—è Lambda –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∫–æ—Ä–æ—á–µ–Ω–∏–π —á–∞—Å –∂–∏—Ç—Ç—è —Å–µ—Å—ñ—ó —á–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        # AWS Lambda –º–æ–∂–µ –æ—á–∏—â–∞—Ç–∏ /tmp –º—ñ–∂ –≤–∏–∫–ª–∏–∫–∞–º–∏, —Ç–æ–º—É —Å–∫–æ—Ä–æ—á—É—î–º–æ —á–∞—Å –∂–∏—Ç—Ç—è
        session_timeout = 1800 if os.getenv('AWS_LAMBDA_FUNCTION_NAME') else self._session_timeout  # 30 —Ö–≤–∏–ª–∏–Ω –¥–ª—è Lambda
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞–π–º–∞—É—Ç —Å–µ—Å—ñ—ó
        current_time = time.time()
        age = current_time - self._session_timestamp
        if age > session_timeout:
            print(f"üïê –ó–±–µ—Ä–µ–∂–µ–Ω–∞ —Å–µ—Å—ñ—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞ (–≤—ñ–∫: {age:.0f}—Å, –ª—ñ–º—ñ—Ç: {session_timeout}—Å)")
            return False
            
        print(f"‚úÖ –°–µ—Å—ñ—è –¥—ñ–π—Å–Ω–∞ (–≤—ñ–∫: {age:.0f}—Å)")
        return True
    
    def _load_session_from_s3(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–µ—Å—ñ—é –∑ S3"""
        if not self.use_s3:
            return False
            
        try:
            print(f"‚òÅÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –∑ S3: {self.s3_bucket}/{self.s3_key}")
            
            response = self.s3_client.get_object(Bucket=self.s3_bucket, Key=self.s3_key)
            session_data = json.loads(response['Body'].read().decode('utf-8'))
            
            self._session_cookies = session_data.get('cookies', [])
            self._session_timestamp = session_data.get('timestamp', 0)
            
            print(f"‚òÅÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Å–µ—Å—ñ—é –∑ S3: {len(self._session_cookies)} cookies")
            print(f"‚òÅÔ∏è Timestamp —Å–µ—Å—ñ—ó: {self._session_timestamp} ({datetime.fromtimestamp(self._session_timestamp) if self._session_timestamp else 'None'})")
            
            if self._session_cookies:
                sample_cookie = self._session_cookies[0]
                print(f"‚òÅÔ∏è –ü—Ä–∏–∫–ª–∞–¥ cookie: {list(sample_cookie.keys())}")
            
            return True
            
        except Exception as e:
            # –û–±—Ä–æ–±–ª—è—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ S3
            error_str = str(e)
            if 'NoSuchKey' in error_str:
                print(f"‚òÅÔ∏è –§–∞–π–ª —Å–µ—Å—ñ—ó –Ω–µ —ñ—Å–Ω—É—î –≤ S3: {self.s3_key}")
            elif 'NoSuchBucket' in error_str:
                print(f"‚ö†Ô∏è Bucket –Ω–µ —ñ—Å–Ω—É—î: {self.s3_bucket}")
            else:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–µ—Å—ñ—é –∑ S3: {e}")
        return False
    
    def _save_session_to_s3(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î —Å–µ—Å—ñ—é –≤ S3"""
        if not self.use_s3:
            return False
            
        try:
            session_data = {
                'cookies': self._session_cookies,
                'timestamp': self._session_timestamp,
                'lambda_function': os.getenv('AWS_LAMBDA_FUNCTION_NAME', 'local'),
                'saved_at': datetime.now().isoformat()
            }
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ bucket —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
            try:
                self.s3_client.head_bucket(Bucket=self.s3_bucket)
            except Exception as e:
                error_str = str(e)
                if '404' in error_str or 'NoSuchBucket' in error_str:
                    print(f"‚òÅÔ∏è –°—Ç–≤–æ—Ä—é—î–º–æ bucket: {self.s3_bucket}")
                    self.s3_client.create_bucket(
                        Bucket=self.s3_bucket,
                        CreateBucketConfiguration={'LocationConstraint': 'eu-north-1'}
                    )
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
            self.s3_client.put_object(
                Bucket=self.s3_bucket,
                Key=self.s3_key,
                Body=json.dumps(session_data, indent=2),
                ContentType='application/json'
            )
            
            print(f"‚òÅÔ∏è –°–µ—Å—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ S3: {self.s3_bucket}/{self.s3_key}")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Å–µ—Å—ñ—é –≤ S3: {e}")
            return False

    def _load_session_from_file(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–µ—Å—ñ—é –∑ —Ñ–∞–π–ª—É"""
        try:
            if os.path.exists(self._session_file):
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
                file_size = os.path.getsize(self._session_file)
                print(f"üìÇ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª —Å–µ—Å—ñ—ó: {self._session_file} (—Ä–æ–∑–º—ñ—Ä: {file_size} –±–∞–π—Ç)")
                
                with open(self._session_file, 'r') as f:
                    session_data = json.load(f)
                    self._session_cookies = session_data.get('cookies', [])
                    self._session_timestamp = session_data.get('timestamp', 0)
                    
                    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –¥–µ–±–∞–≥—É
                    print(f"üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Å–µ—Å—ñ—é –∑ —Ñ–∞–π–ª—É: {len(self._session_cookies)} cookies")
                    print(f"üìÇ Timestamp —Å–µ—Å—ñ—ó: {self._session_timestamp} ({datetime.fromtimestamp(self._session_timestamp) if self._session_timestamp else 'None'})")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É cookies
                    if self._session_cookies:
                        sample_cookie = self._session_cookies[0]
                        print(f"üìÇ –ü—Ä–∏–∫–ª–∞–¥ cookie: {list(sample_cookie.keys())}")
                    
                    return True
            else:
                print(f"üìÇ –§–∞–π–ª —Å–µ—Å—ñ—ó –Ω–µ —ñ—Å–Ω—É—î: {self._session_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–µ—Å—ñ—é –∑ —Ñ–∞–π–ª—É: {e}")
        return False
    
    def _save_session_to_file(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î —Å–µ—Å—ñ—é —É —Ñ–∞–π–ª"""
        try:
            session_data = {
                'cookies': self._session_cookies,
                'timestamp': self._session_timestamp,
                'lambda_function': os.getenv('AWS_LAMBDA_FUNCTION_NAME', 'local'),
                'saved_at': datetime.now().isoformat()
            }
            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
            os.makedirs(os.path.dirname(self._session_file), exist_ok=True)
            
            with open(self._session_file, 'w') as f:
                json.dump(session_data, f, indent=2)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ
            file_size = os.path.getsize(self._session_file)
            print(f"üíæ –°–µ—Å—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: {self._session_file} (—Ä–æ–∑–º—ñ—Ä: {file_size} –±–∞–π—Ç)")
            
            # –í AWS Lambda –¥–æ–¥–∞—Ç–∫–æ–≤–æ –ª–æ–≥—É—î–º–æ —Å—Ç–∞–Ω /tmp
            if os.getenv('AWS_LAMBDA_FUNCTION_NAME'):
                try:
                    tmp_files = os.listdir('/tmp')
                    print(f"üíæ –§–∞–π–ª–∏ –≤ /tmp: {len(tmp_files)} —Ñ–∞–π–ª—ñ–≤")
                except:
                    pass
    
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Å–µ—Å—ñ—é —É —Ñ–∞–π–ª: {e}")
            # –í AWS Lambda —Ü–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, —Ç–æ–º—É –¥–æ–¥–∞—î–º–æ –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
            if os.getenv('AWS_LAMBDA_FUNCTION_NAME'):
                try:
                    print(f"‚ö†Ô∏è –î–µ–±–∞–≥ /tmp: –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å={os.access('/tmp', os.W_OK)}")
                except:
                    pass
    
    def _save_session(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω—É —Å–µ—Å—ñ—é (cookies)"""
        try:
            self._session_cookies = self.page.context.cookies()
            self._session_timestamp = time.time()
            
            # –°–ø–æ—á–∞—Ç–∫—É –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ S3 (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ), –ø–æ—Ç—ñ–º –≤ —Ñ–∞–π–ª —è–∫ backup
            if self.use_s3:
                s3_success = self._save_session_to_s3()
                if s3_success:
                    print(f"‚òÅÔ∏è –°–µ—Å—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ S3 –∑ {len(self._session_cookies)} cookies")
                else:
                    print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –≤ S3, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ–∞–π–ª")
                    self._save_session_to_file()
            else:
                self._save_session_to_file()
                print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Å–µ—Å—ñ—é —É —Ñ–∞–π–ª –∑ {len(self._session_cookies)} cookies")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Å–µ—Å—ñ—é: {e}")
    
    def _restore_session(self):
        """–í—ñ–¥–Ω–æ–≤–ª—é—î –∑–±–µ—Ä–µ–∂–µ–Ω—É —Å–µ—Å—ñ—é"""
        # –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ S3 –∞–±–æ —Ñ–∞–π–ª—É
        if not self._session_cookies:
            if self.use_s3:
                print("üîÑ –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–µ—Å—ñ—é –∑ S3...")
                if not self._load_session_from_s3():
                    print("üîÑ S3 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤, –ø—Ä–æ–±—É—î–º–æ —Ñ–∞–π–ª...")
                    self._load_session_from_file()
            else:
                self._load_session_from_file()
            
        if not self._is_session_valid() or not self._session_cookies:
            return False
            
        try:
            # –ö–†–û–ö 1: –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Å–∞–π—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–æ–º–µ–Ω—É
            print("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Å–∞–π—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...")
            self.page.goto('https://safeyourlove.com/', timeout=15000, wait_until='domcontentloaded')
            
            # –ö–†–û–ö 2: –§—ñ–ª—å—Ç—Ä—É—î–º–æ —ñ –æ—á–∏—â—É—î–º–æ cookies
            cookies_to_set = []
            current_time = time.time()
            
            for cookie in self._session_cookies:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
                if 'name' not in cookie or 'value' not in cookie:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ cookie –±–µ–∑ name/value: {cookie}")
                    continue
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó
                if 'expires' in cookie and cookie['expires'] and cookie['expires'] != -1:
                    if cookie['expires'] < current_time:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ç—É—Ö–ª–∏–π cookie: {cookie['name']}")
                        continue
                
                cookie_dict = {
                    'name': cookie['name'],
                    'value': cookie['value']
                }
                
                # –î–æ–¥–∞—î–º–æ domain –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                if 'domain' in cookie and cookie['domain']:
                    # –û—á–∏—â—É—î–º–æ domain –≤—ñ–¥ —Ç–æ—á–∫–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É
                    domain = cookie['domain'].lstrip('.')
                    cookie_dict['domain'] = domain
                    if 'path' in cookie and cookie['path']:
                        cookie_dict['path'] = cookie['path']
                else:
                    # –Ø–∫—â–æ –Ω–µ–º–∞—î domain, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ URL
                    cookie_dict['url'] = 'https://safeyourlove.com/'
                
                cookies_to_set.append(cookie_dict)
                
            print(f"üîÑ –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(cookies_to_set)} cookies (–∑ {len(self._session_cookies)})")
            
            # –ö–†–û–ö 3: –î–æ–¥–∞—î–º–æ cookies
            if cookies_to_set:
                self.page.context.add_cookies(cookies_to_set)
                print(f"‚úÖ –î–æ–¥–∞–Ω–æ {len(cookies_to_set)} cookies –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É")
            
            # –ö–†–û–ö 4: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ cookies –∑–∞—Å—Ç–æ—Å—É–≤–∞–ª–∏—Å—è
            current_cookies = self.page.context.cookies()
            print(f"üîç –ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å cookies –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ: {len(current_cookies)}")
            
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å–µ—Å—ñ—é: {e}")
            return False
        
    def _get_iframe(self, timeout=8000):
        """–û—Ç—Ä–∏–º—É—î iframe –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º —Ç–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ"""
        try:
            if self._cached_iframe:
                try:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ iframe —â–µ –∞–∫—Ç–∏–≤–Ω–∏–π —ñ –Ω–µ –≤—ñ–¥'—î–¥–Ω–∞–Ω–∏–π –≤—ñ–¥ DOM
                    frame = self._cached_iframe.content_frame()
                    if frame and not frame.is_detached():
                        return frame
                except Exception:
                    # –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞, —Å–∫–∏–¥–∞—î–º–æ –∫–µ—à
                    self._cached_iframe = None

            # –®—É–∫–∞—î–º–æ iframe –∑–∞–Ω–æ–≤–æ
            iframe_selector = 'iframe[src*="adminLegacy/data.php"]'
            self._cached_iframe = self.page.wait_for_selector(iframe_selector, state='visible', timeout=timeout)
            frame = self._cached_iframe.content_frame()

            if frame:
                # –í–ê–ñ–õ–ò–í–û: –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
                print("‚è≥ –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤...")
                
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π JavaScript, —è–∫–∏–π –Ω–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ :has-text
                frame.wait_for_function("""
                    () => {
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ñ
                        const table = document.querySelector('table');
                        if (!table) return false;

                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤ —Ç–∞–±–ª–∏—Ü—ñ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –∞–±–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        const hasRows = table.querySelector('tbody tr') !== null;
                        const hasHeaders = table.querySelector('thead tr') !== null;
                        
                        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ true, —è–∫—â–æ —î —Ö–æ—á —â–æ—Å—å, —â–æ —Å–≤—ñ–¥—á–∏—Ç—å –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                        return hasRows || hasHeaders;
                    }
                """, timeout=10000)
                
                print("‚úÖ –¢–∞–±–ª–∏—Ü—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")

            return frame

        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–±–æ –¥–æ—á–µ–∫–∞—Ç–∏—Å—è iframe: {e}")
            self._cached_iframe = None  # –°–∫–∏–¥–∞—î–º–æ –∫–µ—à –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            return None
    
    def login(self):
        """–í–∏–∫–æ–Ω—É—î —à–≤–∏–¥–∫–∏–π –ª–æ–≥—ñ–Ω –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó —Å–µ—Å—ñ—ó"""
        start_time = time.time()
        print("üîê –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –ª–æ–≥—ñ–Ω—É...")
        
        # –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—É —Å–µ—Å—ñ—é
        if self._restore_session():
            try:
                # –ö–†–û–ö 1: –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –∞–¥–º—ñ–Ω —Å—Ç–æ—Ä—ñ–Ω–∫—É —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ
                print("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—É —Å–µ—Å—ñ—é...")
                self.page.goto(self.admin_url, timeout=20000, wait_until='domcontentloaded')
                
                # –ö–†–û–ö 2: –ë—ñ–ª—å—à —Ä–µ—Ç–µ–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
                # –ß–µ–∫–∞—î–º–æ –∞–±–æ iframe (—É—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è) –∞–±–æ –ø–æ–ª—è –ª–æ–≥—ñ–Ω—É (–ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è)
                try:
                    # –°–ø–æ—á–∞—Ç–∫—É —à–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ iframe
                    iframe_selector = 'iframe[src*="adminLegacy/data.php"]'
                    iframe = self.page.wait_for_selector(iframe_selector, state='visible', timeout=8000)
                    if iframe:
                        print(f"‚úÖ –°–µ—Å—ñ—è –¥—ñ–π—Å–Ω–∞! –ó–Ω–∞–π–¥–µ–Ω–æ iframe –∑–∞ {time.time() - start_time:.2f}—Å")
                        return True
                except:
                    # –Ø–∫—â–æ iframe –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –º–æ–∂–ª–∏–≤–æ —Å–µ—Å—ñ—è –Ω–µ–¥—ñ–π—Å–Ω–∞
                    pass
                
                # –ö–†–û–ö 3: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑'—è–≤–∏–ª–∏—Å—è –ø–æ–ª—è –ª–æ–≥—ñ–Ω—É (–æ–∑–Ω–∞—á–∞—î –Ω–µ–¥—ñ–π—Å–Ω—É —Å–µ—Å—ñ—é)
                try:
                    login_field = self.page.wait_for_selector(
                        'input[placeholder*="–ø–æ—à—Ç–∞"], input[placeholder*="–ª–æ–≥—ñ–Ω"], input[type="text"]',
                        state='visible',
                        timeout=3000
                    )
                    if login_field:
                        print("üîê –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—è –ª–æ–≥—ñ–Ω—É - —Å–µ—Å—ñ—è –Ω–µ–¥—ñ–π—Å–Ω–∞")
                        return False
                except:
                    pass
                
                # –ö–†–û–ö 4: –Ø–∫—â–æ –Ω–µ–º–∞—î –Ω—ñ iframe –Ω—ñ –ø–æ–ª—ñ–≤ –ª–æ–≥—ñ–Ω—É - —á–µ–∫–∞—î–º–æ —â–µ —Ç—Ä–æ—Ö–∏
                try:
                    self.page.wait_for_timeout(2000)  # –î–æ–¥–∞—Ç–∫–æ–≤–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
                    iframe = self.page.query_selector('iframe[src*="adminLegacy/data.php"]')
                    if iframe:
                        print(f"‚úÖ –°–µ—Å—ñ—è –¥—ñ–π—Å–Ω–∞! Iframe –∑'—è–≤–∏–≤—Å—è –ø—ñ—Å–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞ {time.time() - start_time:.2f}—Å")
                        return True
                    else:
                        print("üîê Iframe –Ω–µ –∑'—è–≤–∏–≤—Å—è - —Å–µ—Å—ñ—è –Ω–µ–¥—ñ–π—Å–Ω–∞")
                        return False
                except:
                    print("üîê –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ iframe - —Å–µ—Å—ñ—è –Ω–µ–¥—ñ–π—Å–Ω–∞")
                    return False
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å–µ—Å—ñ—ó: {e}")
                return False
        
        # AWS Lambda: —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ cookies –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Å–µ—Å—ñ—è –∑–¥–∞—î—Ç—å—Å—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ—é
        # –ê–ª–µ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ cookies –Ω–µ –¥—É–∂–µ —Å—Ç–∞—Ä—ñ (–¥–æ 2 –≥–æ–¥–∏–Ω)
        if os.getenv('AWS_LAMBDA_FUNCTION_NAME') and self._session_cookies and self._session_timestamp:
            current_time = time.time()
            age = current_time - self._session_timestamp
            # –°–ø—Ä–æ–±—É—î–º–æ –Ω–∞–≤—ñ—Ç—å –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ cookies, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ —Å—Ç–∞—Ä—à–µ 2 –≥–æ–¥–∏–Ω
            if age <= 7200:  # 2 –≥–æ–¥–∏–Ω–∏
                print(f"üîÑ AWS Lambda: –°–ø—Ä–æ–±—É—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ cookies (–≤—ñ–∫: {age:.0f}—Å)...")
                try:
                    # –ü—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ cookies –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–æ–Ω–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ
                    cookies_to_set = []
                    for cookie in self._session_cookies:
                        if 'name' not in cookie or 'value' not in cookie:
                            continue
                        cookie_dict = {
                            'name': cookie['name'],
                            'value': cookie['value']
                        }
                        if 'domain' in cookie and cookie['domain']:
                            cookie_dict['domain'] = cookie['domain']
                            if 'path' in cookie and cookie['path']:
                                cookie_dict['path'] = cookie['path']
                        else:
                            cookie_dict['url'] = 'https://safeyourlove.com/'
                        cookies_to_set.append(cookie_dict)
                    
                    self.page.context.add_cookies(cookies_to_set)
                    print(f"üîÑ –î–æ–¥–∞–Ω–æ {len(cookies_to_set)} –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö cookies")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—Ä–∞—Ü—é—é—Ç—å –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ cookies
                    self.page.goto(self.admin_url, timeout=20000, wait_until='domcontentloaded')
                    try:
                        iframe_selector = 'iframe[src*="adminLegacy/data.php"]'
                        self.page.wait_for_selector(iframe_selector, state='visible', timeout=8000)
                        print(f"üéâ –ó–∞—Å—Ç–∞—Ä—ñ–ª—ñ cookies –ø—Ä–∞—Ü—é—é—Ç—å! –õ–æ–≥—ñ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {time.time() - start_time:.2f}—Å")
                        # –û–Ω–æ–≤–ª—é—î–º–æ timestamp —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
                        self._session_timestamp = time.time()
                        self._save_session_to_file()
                        return True
                    except:
                        print("‚ùå –ó–∞—Å—Ç–∞—Ä—ñ–ª—ñ cookies –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–º–∏ cookies: {e}")
                
                # –û—á–∏—â—É—î–º–æ cookies —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥—ñ–Ω—É
                try:
                    self.page.context.clear_cookies()
                    print("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω–æ –ø—ñ—Å–ª—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö cookies")
                except:
                    pass
            else:
                print(f"üïê Cookies –∑–∞–Ω–∞–¥—Ç–æ —Å—Ç–∞—Ä—ñ (–≤—ñ–∫: {age:.0f}—Å), –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–ø—Ä–æ–±—É")
        
        # –Ø–∫—â–æ —Å–µ—Å—ñ—è –Ω–µ–¥—ñ–π—Å–Ω–∞, –≤–∏–∫–æ–Ω—É—î–º–æ –ø–æ–≤–Ω–∏–π –ª–æ–≥—ñ–Ω
        login_start = time.time()
        print("üîê –í–∏–∫–æ–Ω—É—î–º–æ –ª–æ–≥—ñ–Ω...")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ª–æ–≥—ñ–Ω—É –∑ –∑–±—ñ–ª—å—à–µ–Ω–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è Lambda
        timeout = 25000 if os.getenv('AWS_LAMBDA_FUNCTION_NAME') else 15000
        self.page.goto(self.admin_url, timeout=timeout, wait_until='domcontentloaded')
        
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ñ–æ—Ä–º—É –ª–æ–≥—ñ–Ω—É (—á–µ–∫–∞—î–º–æ –ø–æ—è–≤–∏ –ø–æ–ª—ñ–≤ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏)
        # –ó–±—ñ–ª—å—à—É—î–º–æ —Ç–∞–π–º–∞—É—Ç–∏ –¥–ª—è AWS Lambda
        login_timeout = 25000 if os.getenv('AWS_LAMBDA_FUNCTION_NAME') else 8000
        
        login_fields = self.page.wait_for_selector(
            'input[placeholder*="–ø–æ—à—Ç–∞"], input[placeholder*="–ª–æ–≥—ñ–Ω"], input[type="text"]',
            state='visible',
            timeout=login_timeout
        )
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ø–æ–ª—è —Ñ–æ—Ä–º–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
        username_field = self.page.query_selector('input[placeholder*="–ø–æ—à—Ç–∞"], input[placeholder*="–ª–æ–≥—ñ–Ω"], input[type="text"]')
        password_field = self.page.query_selector('input[type="password"]')
        submit_button = self.page.query_selector('button[type="submit"]')
        
        if not username_field or not password_field or not submit_button:
            print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—è —Ñ–æ—Ä–º–∏ –ª–æ–≥—ñ–Ω—É")
            raise Exception("–ü–æ–ª—è —Ñ–æ—Ä–º–∏ –ª–æ–≥—ñ–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
        
        # –®–≤–∏–¥–∫–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
        if not self.admin_username or not self.admin_password:
            print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É")
            raise Exception("–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É")
            
        username_field.fill(self.admin_username)
        password_field.fill(self.admin_password)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ä–º—É
        submit_button.click()
        
        # –ß–µ–∫–∞—î–º–æ —É—Å–ø—ñ—à–Ω–æ–≥–æ –ª–æ–≥—ñ–Ω—É (iframe –∑'—è–≤–ª—è—î—Ç—å—Å—è –ø—ñ—Å–ª—è –ª–æ–≥—ñ–Ω—É)
        iframe_selector = 'iframe[src*="adminLegacy/data.php"]'
        iframe_timeout = 20000 if os.getenv('AWS_LAMBDA_FUNCTION_NAME') else 10000
        self.page.wait_for_selector(iframe_selector, state='visible', timeout=iframe_timeout)
        
        login_time = time.time() - login_start
        print(f"‚úÖ –õ–æ–≥—ñ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {login_time:.2f}—Å")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–µ—Å—ñ—é –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å
        self._save_session()
        
        total_time = time.time() - start_time
        print(f"üèÅ –í–µ—Å—å –ø—Ä–æ—Ü–µ—Å –ª–æ–≥—ñ–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {total_time:.2f}—Å")
        return True

    def get_used_codes_count(self):
        """
        –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –ë–ï–ó –æ—á–∏—â–µ–Ω–Ω—è.
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø–æ—Ç—Ä–µ–± —É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—ñ.
        """
        used_codes_key = self.used_codes_key
        
        if not self.s3_client:
            print("‚ùå S3 –∫–ª—ñ—î–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∞–º–∏")
            return {}
            
        try:
            response = self.s3_client.get_object(Bucket=self.s3_bucket, Key=used_codes_key)
            used_data = json.loads(response['Body'].read().decode('utf-8'))
            
            print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∏: {used_data}")
            return used_data
            
        except ClientError as e:
            if e.response['Error']['Code'] == 'NoSuchKey':
                print("‚ÑπÔ∏è –§–∞–π–ª –∑ –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∞–º–∏ –Ω–µ —ñ—Å–Ω—É—î.")
                return {}
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ª—ñ—á—ñ–ª—å–Ω–∏–∫—ñ–≤: {e}")
                return {}
        except Exception as e:
            print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∞–º–∏: {e}")
            return {}

    def clear_used_codes_count(self, amount: int):
        """
        –û—á–∏—â–∞—î –ª—ñ—á—ñ–ª—å–Ω–∏–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å—É–º–∏.
        –ó–∞–ª–∏—à–∞—î —ñ–Ω—à—ñ —Å—É–º–∏ –Ω–µ–¥–æ—Ç–æ—Ä–∫–∞–Ω–∏–º–∏ –¥–ª—è –±–µ–∑–ø–µ–∫–∏.
        """
        used_codes_key = self.used_codes_key
        amount_key = str(amount)
        
        if not self.s3_client:
            print("‚ùå S3 –∫–ª—ñ—î–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ª—ñ—á—ñ–ª—å–Ω–∏–∫—ñ–≤")
            return False
            
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ
            try:
                response = self.s3_client.get_object(Bucket=self.s3_bucket, Key=used_codes_key)
                used_data = json.loads(response['Body'].read().decode('utf-8'))
            except ClientError as e:
                if e.response['Error']['Code'] == 'NoSuchKey':
                    print("‚ÑπÔ∏è –§–∞–π–ª –∑ –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∞–º–∏ –Ω–µ —ñ—Å–Ω—É—î - –Ω—ñ—á–æ–≥–æ –æ—á–∏—â–∞—Ç–∏.")
                    return True
                else:
                    raise
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ä–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
            old_count = used_data.get(amount_key, 0)
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Å—É–º—É
            if amount_key in used_data:
                del used_data[amount_key]
                print(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ –ª—ñ—á—ñ–ª—å–Ω–∏–∫ –¥–ª—è —Å—É–º–∏ {amount} (–±—É–ª–æ: {old_count})")
            else:
                print(f"‚ÑπÔ∏è –õ—ñ—á—ñ–ª—å–Ω–∏–∫ –¥–ª—è —Å—É–º–∏ {amount} –≤–∂–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
            self.s3_client.put_object(
                Bucket=self.s3_bucket,
                Key=used_codes_key,
                Body=json.dumps(used_data, indent=2),
                ContentType='application/json'
            )
            
            # –õ–æ–≥—É—î–º–æ —â–æ –∑–∞–ª–∏—à–∏–ª–æ—Å—å
            remaining_sums = list(used_data.keys())
            if remaining_sums:
                print(f"üíæ –ó–∞–ª–∏—à–∏–ª–∏—Å—å –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∏ –¥–ª—è —Å—É–º: {remaining_sums}")
            else:
                print("üíæ –í—Å—ñ –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∏ –æ—á–∏—â–µ–Ω–æ")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∞ –¥–ª—è —Å—É–º–∏ {amount}: {e}")
            return False