import json
import logging
import os
import sys
import time
from functools import wraps
from promo_logic import PromoService
from browser_manager import create_browser_manager
from decorators import timeout_handler, retry_on_failure
from config_validator import validate_environment

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥–µ—Ä–∞ ---
def setup_logger():
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –ª–æ–≥–µ—Ä –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è Lambda —Ñ—É–Ω–∫—Ü—ñ—ó"""
    logger = logging.getLogger(__name__)
    if not logger.handlers:  # –£–Ω–∏–∫–∞—î–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è handlers
        handler = logging.StreamHandler(sys.stdout)
        formatter = logging.Formatter(
            '[%(levelname)s] %(asctime)s - %(name)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        logger.setLevel(logging.INFO)
    return logger

def create_response(status, message=None, **kwargs):
    """–°—Ç–≤–æ—Ä—é—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å"""
    response = {
        'status': status,
        'timestamp': int(time.time()),
        'version': '2.0'  # –í–µ—Ä—Å—ñ—è API –¥–ª—è backwards compatibility
    }
    
    if message:
        response['message'] = message
    
    # –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è
    response.update(kwargs)
    
    return response

def validate_event(event):
    """–í–∞–ª—ñ–¥—É—î –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ Lambda event"""
    if not isinstance(event, dict):
        raise ValueError("Event –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ dictionary")
    
    # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö
    # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: required fields, format validation —Ç–æ—â–æ
    return True

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π Lambda handler (AWS Lambda –æ—á—ñ–∫—É—î —Ñ—É–Ω–∫—Ü—ñ—é –∑ –Ω–∞–∑–≤–æ—é lambda_handler)
@timeout_handler(timeout_seconds=1200)
@retry_on_failure(max_retries=2, delay=2)
def lambda_handler(event, context):
    """
    –§–æ–Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫: –æ–±—Ä–æ–±–ª—è—î —á–µ—Ä–≥—É –∑–∞–ø–∏—Ç—ñ–≤ —ñ —Å—Ç–≤–æ—Ä—é—î –ø—Ä–æ–º–æ–∫–æ–¥–∏ –±–∞—Ç—á–∞–º–∏.
    """
    start_time = time.time()
    logger = setup_logger()
    
    try:
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        try:
            validate_environment()
        except ValueError as config_error:
            logger.error(f"‚ùå [Replenish] –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {config_error}")
            return create_response('error', f'Configuration error: {config_error}')
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        validate_event(event)
        logger.info("üöÄ [Replenish] —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—â–µ–Ω–∞")
    except ValueError as e:
        logger.error(f"‚ùå [Replenish] –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ: {e}")
        return create_response('error', f'Invalid input: {e}')
    
    browser_manager = None
    try:
        
        logger.info("üì¶ [Replenish] –û–±—Ä–æ–±–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±—Ä–∞—É–∑–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä
        browser_manager = create_browser_manager()
        page = browser_manager.get_page()
        
        promo_service = PromoService(page)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ –ë–ï–ó –æ—á–∏—â–µ–Ω–Ω—è
        used_codes_count = promo_service.get_used_codes_count()
        
        if not used_codes_count:
            logger.info("‚ÑπÔ∏è [Replenish] –õ—ñ—á—ñ–ª—å–Ω–∏–∫–∏ –ø—É—Å—Ç—ñ, –Ω—ñ—á–æ–≥–æ –æ–±—Ä–æ–±–ª—è—Ç–∏")
            execution_time = time.time() - start_time
            return create_response('success', 'No used codes to process', 
                                 execution_time=round(execution_time, 2),
                                 processed_amounts=[])
        
        logger.info(f"üìä [Replenish] –ó–Ω–∞–π–¥–µ–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏: {used_codes_count}")
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑—É–º–Ω–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥)
        # –í—ñ–Ω –æ–Ω–æ–≤–ª—é—î —Ç—ñ–ª—å–∫–∏ —Ç—ñ —Å—É–º–∏, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —ñ–Ω—à—ñ –Ω–µ–¥–æ—Ç–æ—Ä–∫–∞–Ω–∏–º–∏
        success = promo_service.replenish_promo_codes(used_codes_count)
        
        if success:
            # –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è, –æ—á–∏—â–∞—î–º–æ –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
            total_cleared = 0
            for amount_str in used_codes_count.keys():
                amount = int(amount_str)
                if promo_service.clear_used_codes_count(amount):
                    total_cleared += 1
                    logger.info(f"‚úÖ [Replenish] –û—á–∏—â–µ–Ω–æ –ª—ñ—á—ñ–ª—å–Ω–∏–∫ –¥–ª—è —Å—É–º–∏ {amount}")
                else:
                    logger.warning(f"‚ö†Ô∏è [Replenish] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ –ª—ñ—á—ñ–ª—å–Ω–∏–∫ –¥–ª—è —Å—É–º–∏ {amount}")
            
            logger.info(f"üéâ [Replenish] –†–æ–∑—É–º–Ω–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! –û—á–∏—â–µ–Ω–æ {total_cleared} –ª—ñ—á—ñ–ª—å–Ω–∏–∫—ñ–≤")
            
            return {
                'status': 'success',
                'method': 'smart_replenish',
                'processed_amounts': list(used_codes_count.keys()),
                'cleared_counters': total_cleared,
                'amount_summary': used_codes_count,
                'timestamp': int(time.time())  # –î–æ–¥–∞—î–º–æ timestamp –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
            }
        else:
            logger.error("‚ùå [Replenish] –†–æ–∑—É–º–Ω–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è")
            return {'status': 'error', 'message': 'Smart replenish failed'}
        
    except Exception as e:
        logger.error(f"‚ùå [Replenish] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
        return {'status': 'error', 'message': str(e)}
    finally:
        if browser_manager:
            browser_manager.cleanup()
            logger.info("üö™ [Replenish] –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–∏—Ç–æ.")