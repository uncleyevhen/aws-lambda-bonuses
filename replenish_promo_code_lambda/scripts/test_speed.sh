#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ./test_speed.sh <—Å—É–º–∞>

if [ $# -eq 0 ]; then
    echo "‚ùå –ü–æ–º–∏–ª–∫–∞: –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Å—É–º—É"
    echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 <—Å—É–º–∞>"
    echo "–ü—Ä–∏–∫–ª–∞–¥: $0 1500"
    exit 1
fi

AMOUNT=$1
FUNCTION_NAME="replenish-promo-code"
S3_BUCKET="lambda-promo-sessions"
S3_KEY="promo-codes/used_codes_count.json"

echo "üéØ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –¥–ª—è —Å—É–º–∏: $AMOUNT"
echo "‚è∞ $(date)"
echo ""

# 1. –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –∑ —Å—É–º–æ—é
echo "üìù –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –∑ —Å—É–º–æ—é $AMOUNT..."

# –°—Ç–≤–æ—Ä—é—î–º–æ JSON –∑ –≤–∏—Å–æ–∫–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –¥–ª—è —Ü—ñ—î—ó —Å—É–º–∏ (—â–æ–± —Å–ø—Ä–∞—Ü—é–≤–∞–≤ –ø–æ—Ä—ñ–≥)
cat > test_data.json << EOF
{
  "$AMOUNT": 25
}
EOF

# 2. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –≤ S3
echo "‚òÅÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –≤ S3: s3://$S3_BUCKET/$S3_KEY"
aws s3 cp test_data.json s3://$S3_BUCKET/$S3_KEY

if [ $? -eq 0 ]; then
    echo "‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –≤ S3"
else
    echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ S3"
    exit 1
fi

echo ""

# 3. –ó–∞–ø—É—Å–∫–∞—î–º–æ Lambda —Ñ—É–Ω–∫—Ü—ñ—é
echo "üöÄ –ó–∞–ø—É—Å–∫ Lambda —Ñ—É–Ω–∫—Ü—ñ—ó: $FUNCTION_NAME"
echo ""

# –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
echo "üì° –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é..."

aws lambda invoke \
    --function-name "$FUNCTION_NAME" \
    --payload '{}' \
    --cli-binary-format raw-in-base64-out \
    --log-type Tail \
    response.json > invoke_output.json

echo ""

# 4. –î–µ–∫–æ–¥—É—î–º–æ —ñ –≤–∏–≤–æ–¥–∏–º–æ –ª–æ–≥–∏
echo "üìú –õ–æ–≥–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:"
echo "========================================"

if [ -f invoke_output.json ]; then
    # –í–∏—Ç—è–≥—É—î–º–æ LogResult —ñ –¥–µ–∫–æ–¥—É—î–º–æ base64
    LOG_RESULT=$(cat invoke_output.json | jq -r '.LogResult // empty' 2>/dev/null)
    
    if [ -n "$LOG_RESULT" ] && [ "$LOG_RESULT" != "null" ]; then
        echo "$LOG_RESULT" | base64 -d
    else
        echo "‚ö†Ô∏è –õ–æ–≥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"
    fi
else
    echo "‚ö†Ô∏è –§–∞–π–ª –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫–ª–∏–∫—É –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ"
fi

echo ""
echo "========================================"
echo ""

# 5. –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü—ñ—ó
echo "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:"
if [ -f response.json ]; then
    if command -v jq >/dev/null 2>&1; then
        cat response.json | jq '.' 2>/dev/null || cat response.json
    else
        cat response.json
    fi
else
    echo "‚ö†Ô∏è –§–∞–π–ª –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ"
fi

echo ""
echo "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

# –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
rm -f response.json invoke_output.json test_data.json
