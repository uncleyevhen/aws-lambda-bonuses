#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó —Å—É–º–∏ 1002 –≤ used_codes_count.json –≤ S3
—ñ –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—É —à–≤–∏–¥–∫–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è 10 –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
"""
import json
import boto3
import os
import sys
from botocore.exceptions import ClientError

def add_test_amount_to_s3():
    """–î–æ–¥–∞—î —Å—É–º—É 1002 –∑ –ª—ñ—á—ñ–ª—å–Ω–∏–∫–æ–º 10 –¥–æ S3 —Ñ–∞–π–ª—É used_codes_count.json"""
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è S3
    bucket = os.getenv('SESSION_S3_BUCKET', 'lambda-promo-sessions')
    key = os.getenv('USED_CODES_S3_KEY', 'promo-codes/used_codes_count.json')
    
    try:
        s3_client = boto3.client('s3')
        
        # –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π —Ñ–∞–π–ª
        try:
            response = s3_client.get_object(Bucket=bucket, Key=key)
            used_data = json.loads(response['Body'].read().decode('utf-8'))
            print(f"üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ: {used_data}")
        except ClientError as e:
            if e.response['Error']['Code'] == 'NoSuchKey':
                print("üì¶ –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π")
                used_data = {}
            else:
                raise
        
        # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—É —Å—É–º—É
        used_data['1002'] = 10  # 10 –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ —Å—É–º–∏ 1002
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–∞–¥ –≤ S3
        s3_client.put_object(
            Bucket=bucket,
            Key=key,
            Body=json.dumps(used_data, indent=2),
            ContentType='application/json'
        )
        
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ used_codes_count.json:")
        print(f"   üìä –î–∞–Ω—ñ: {used_data}")
        print(f"   ü™£ Bucket: {bucket}")
        print(f"   üîë Key: {key}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–±–æ—Ç–∏ –∑ S3: {e}")
        return False

def test_lambda_locally():
    """–¢–µ—Å—Ç—É—î lambda —Ñ—É–Ω–∫—Ü—ñ—é –ª–æ–∫–∞–ª—å–Ω–æ"""
    try:
        # –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—ñ–≤
        sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
        
        from lambda_function import replenish_promo_code_handler
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π event
        test_event = {
            'test': True,
            'source': 'speed_test'
        }
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ mock context
        class MockContext:
            def __init__(self):
                self.function_name = 'test-promo-replenish'
                self.function_version = '1'
                self.memory_limit_in_mb = '512'
                self.remaining_time_in_millis = lambda: 900000  # 15 —Ö–≤–∏–ª–∏–Ω
        
        context = MockContext()
        
        print("üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ Lambda —Ñ—É–Ω–∫—Ü—ñ—é –ª–æ–∫–∞–ª—å–Ω–æ...")
        result = replenish_promo_code_handler(test_event, context)
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(json.dumps(result, indent=2, ensure_ascii=False))
        
        return result
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Lambda: {e}")
        import traceback
        traceback.print_exc()
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üß™ –¢–ï–°–¢ –®–í–ò–î–ö–û–°–¢–Ü –°–¢–í–û–†–ï–ù–ù–Ø –ü–†–û–ú–û–ö–û–î–Ü–í")
    print("=" * 50)
    
    # –ö—Ä–æ–∫ 1: –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –≤ S3
    print("\nüì¶ –ö—Ä–æ–∫ 1: –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó —Å—É–º–∏ 1002 –≤ S3...")
    if not add_test_amount_to_s3():
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ S3, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ AWS credentials")
        return
    
    # –ö—Ä–æ–∫ 2: –ó–∞–ø—É—Å–∫–∞—î–º–æ Lambda —Ñ—É–Ω–∫—Ü—ñ—é
    print("\nüöÄ –ö—Ä–æ–∫ 2: –ó–∞–ø—É—Å–∫ Lambda —Ñ—É–Ω–∫—Ü—ñ—ó...")
    result = test_lambda_locally()
    
    if result:
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        if result.get('status') == 'success':
            print(f"üéâ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ —Å—É–º–∏: {result.get('processed_amounts', [])}")
            print(f"‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {result.get('execution_time', '–Ω/–¥')}—Å")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {result.get('message', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
    else:
        print("‚ùå –¢–µ—Å—Ç –Ω–µ –≤–¥–∞–≤—Å—è")

if __name__ == '__main__':
    main()
