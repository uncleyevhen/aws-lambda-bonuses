#!/usr/bin/env python3
"""
–ë–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –±–æ–Ω—É—Å—ñ–≤ –∫–ª—ñ—î–Ω—Ç–∞–º KeyCRM
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î multiprocessing –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
"""

import requests
import json
import time
from decimal import Decimal
import logging
from datetime import datetime, timezone
import csv
import threading
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor, as_completed
import multiprocessing as mp
import math
import os
import sys

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(processName)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bonus_calculation_multiprocess.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class KeyCRMBonusCalculator:
    def __init__(self, api_key, bonus_percentage=7.0, proxy_config=None):
        self.api_key = api_key
        self.base_url = "https://openapi.keycrm.app/v1"
        self.bonus_percentage = bonus_percentage
        
        # UUID –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –ø–æ–ª—ñ–≤ KeyCRM
        self.BONUS_FIELD_UUID = "CT_1023"  # –ü–æ–ª–µ "–ë–æ–Ω—É—Å–Ω—ñ –±–∞–ª–∏"
        self.HISTORY_FIELD_UUID = "CT_1033"  # –ü–æ–ª–µ "–Ü—Å—Ç–æ—Ä—ñ—è –±–æ–Ω—É—Å—ñ–≤"
        self.BONUS_EXPIRY_FIELD_UUID = "CT_1024"  # –ü–æ–ª–µ "–î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤"
        
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Accept": "application/json",
            "Content-Type": "application/json"
        }
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–æ–∫—Å—ñ
        self.proxy_config = proxy_config
        self.proxy_enabled = proxy_config is not None
        
        if self.proxy_enabled and proxy_config:
            logger.info(f"üåê –£–≤—ñ–º–∫–Ω–µ–Ω–æ –ø—Ä–æ–∫—Å—ñ: {proxy_config.get('host', 'unknown')}:{proxy_config.get('port', 'unknown')}")
            self.rate_limit_delay = 0.3  # 200 –∑–∞–ø–∏—Ç—ñ–≤/—Ö–≤–∏–ª–∏–Ω—É = 3.33/—Å–µ–∫ = 0.2—Å–µ–∫ –∑–∞—Ç—Ä–∏–º–∫–∞
        else:
            logger.info("‚ö†Ô∏è –ü—Ä–æ–∫—Å—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            self.rate_limit_delay = 0.3  # 200 –∑–∞–ø–∏—Ç—ñ–≤/—Ö–≤–∏–ª–∏–Ω—É = 3.33/—Å–µ–∫ = 0.3—Å–µ–∫ –∑–∞—Ç—Ä–∏–º–∫–∞
    
    def make_request(self, url, method="GET", data=None, max_retries=5):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø—Ä–æ–∫—Å—ñ"""
        full_url = f"{self.base_url}{url}"
        
        for attempt in range(max_retries):
            response = None
            session = requests.Session()
            
            try:
                # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø—Ä–æ–∫—Å—ñ —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ
                if self.proxy_enabled and self.proxy_config:
                    proxy_url = f"http://{self.proxy_config['username']}:{self.proxy_config['password']}@{self.proxy_config['host']}:{self.proxy_config['port']}"
                    session.proxies = {
                        'http': proxy_url,
                        'https': proxy_url
                    }
                
                # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
                if method == "GET":
                    response = session.get(full_url, headers=self.headers, timeout=20)
                elif method == "PUT":
                    response = session.put(full_url, headers=self.headers, json=data, timeout=20)
                else:
                    raise ValueError(f"–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥: {method}")
                
                if response is None:
                    raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞")
                
                response.raise_for_status()
                
                # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ø–∞—É–∑–∞
                time.sleep(self.rate_limit_delay)
                
                return response.json()
                
            except (requests.exceptions.ProxyError, 
                    requests.exceptions.ConnectTimeout,
                    requests.exceptions.ReadTimeout) as proxy_error:
                
                if attempt < max_retries - 1:
                    # –î–ª—è –ø—Ä–æ–∫—Å—ñ –ø–æ–º–∏–ª–æ–∫ —Ä–æ–±–∏–º–æ –¥–æ–≤—à—É –ø–∞—É–∑—É
                    wait_time = min(2 ** attempt, 10)  # –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–æ 10 —Å–µ–∫
                    logger.warning(f"–ü—Ä–æ–∫—Å—ñ –ø–æ–º–∏–ª–∫–∞ {attempt + 1}/{max_retries} –¥–ª—è {full_url}: {proxy_error}")
                    logger.info(f"–ß–µ–∫–∞—î–º–æ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...")
                    time.sleep(wait_time)
                    continue
                else:
                    logger.error(f"–ü—Ä–æ–∫—Å—ñ –ø–æ–º–∏–ª–∫–∞ –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–± –¥–ª—è {full_url}: {proxy_error}")
                    raise
                    
            except Exception as e:
                if attempt < max_retries - 1:
                    wait_time = 1 + attempt  # –õ—ñ–Ω—ñ–π–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫
                    logger.warning(f"–°–ø—Ä–æ–±–∞ {attempt + 1}/{max_retries} –Ω–µ–≤–¥–∞–ª–∞ –¥–ª—è {full_url}: {e}")
                    time.sleep(wait_time)
                    continue
                else:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ {full_url} –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–±: {e}")
                    raise
            finally:
                session.close()
    
    def get_total_pages(self, limit=50):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫"""
        try:
            response = self.make_request(f"/buyer?page=1&limit={limit}")
            
            if response is None:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API")
                return 0, 0
            
            total_records = response.get('total', 0)
            total_pages = response.get('last_page', 0)
            
            logger.info(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤: {total_records}")
            logger.info(f"üìÑ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫ (limit={limit}): {total_pages}")
            
            return total_pages, total_records
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫: {e}")
            return 0, 0
    
    def get_current_bonuses(self, buyer):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –±–æ–Ω—É—Å—ñ–≤ –∑ –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –ø–æ–ª—ñ–≤ –∑–∞ UUID"""
        custom_fields = buyer.get('custom_fields', [])
        
        for field in custom_fields:
            if field.get('uuid') == self.BONUS_FIELD_UUID:
                try:
                    return int(field.get('value', 0) or 0)
                except (ValueError, TypeError):
                    return 0
        
        return 0
    
    def get_current_expiry_date(self, buyer):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤ –∑ –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –ø–æ–ª—ñ–≤ –∑–∞ UUID"""
        custom_fields = buyer.get('custom_fields', [])
        
        for field in custom_fields:
            if field.get('uuid') == self.BONUS_EXPIRY_FIELD_UUID:
                return field.get('value', '')
        
        return ''

def process_page_range(args):
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ
    """
    start_page, end_page, api_key, bonus_percentage, proxy_config, dry_run, process_id, total_records, search_config = args
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É
    logger = logging.getLogger(f"Process-{process_id}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É
    calculator = KeyCRMBonusCalculator(api_key, bonus_percentage, proxy_config)
    
    # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É
    search_mode = search_config.get('enabled', False)
    only_search = search_config.get('only_search', False)
    min_bonus_amount = search_config.get('min_bonus_amount', 3000)
    
    if search_mode and only_search:
        logger.info(f"üîç –ü—Ä–æ—Ü–µ—Å {process_id}: –†–ï–ñ–ò–ú –ü–û–®–£–ö–£ - —à—É–∫–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –±–æ–Ω—É—Å–∞–º–∏ ‚â• {min_bonus_amount}")
    elif search_mode:
        logger.info(f"üîç –ü—Ä–æ—Ü–µ—Å {process_id}: –ó–ú–Ü–®–ê–ù–ò–ô –†–ï–ñ–ò–ú - –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –±–æ–Ω—É—Å–∞–º–∏ ‚â• {min_bonus_amount} + –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è")
    else:
        logger.info(f"üöÄ –ü—Ä–æ—Ü–µ—Å {process_id}: –æ–±—Ä–æ–±–ª—è—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {start_page}-{end_page} (–≤—Å—å–æ–≥–æ {end_page - start_page + 1} —Å—Ç–æ—Ä—ñ–Ω–æ–∫)")
    
    processed_customers = {}
    successful_updates = 0
    failed_updates = 0
    total_processed = 0
    
    # –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—Ä–æ—Ü–µ—Å 1 –ø–æ—á–∏–Ω–∞—î –∑ 0, –ø—Ä–æ—Ü–µ—Å 2 –∑ ~12000, —Ç–æ—â–æ)
    estimated_clients_per_page = 50  # –ú–∞–∫—Å–∏–º—É–º –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
    global_client_start_index = (start_page - 1) * estimated_clients_per_page
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –¥–∞—Ç—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤ (–¥–æ –∫—ñ–Ω—Ü—è –ª—ñ—Ç–∞ 2025)
    expiry_date = datetime(2025, 8, 31, 23, 59, 59, tzinfo=timezone.utc)
    expiry_date_str = expiry_date.strftime('%Y-%m-%d')
    
    try:
        # –õ—ñ—á–∏–ª—å–Ω–∏–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É
        current_global_client_index = global_client_start_index
        
        for page in range(start_page, end_page + 1):
            try:
                # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                pages_done = page - start_page + 1
                pages_total = end_page - start_page + 1
                if pages_done % 5 == 1:  # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–∂–Ω—É 5-—Ç—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
                    progress_percent = (pages_done / pages_total) * 100
                    logger.info(f"üìÑ P{process_id}: –æ–±—Ä–æ–±–ª—è—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É {page} ({pages_done}/{pages_total}, {progress_percent:.1f}%)")
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
                response = calculator.make_request(
                    f"/buyer?page={page}&limit=50&include=custom_fields"
                )
                
                if response is None:
                    logger.warning(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {page} –≤ –ø—Ä–æ—Ü–µ—Å—ñ {process_id}")
                    continue
                
                buyers = response.get('data', [])
                
                if not buyers:
                    logger.info(f"‚ùå –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page} –ø–æ—Ä–æ–∂–Ω—è –≤ –ø—Ä–æ—Ü–µ—Å—ñ {process_id}")
                    continue
                
                # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ–∫—É–ø—Ü—ñ–≤ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏
                buyers_with_orders = [
                    buyer for buyer in buyers 
                    if buyer.get('orders_sum') and float(buyer.get('orders_sum', 0)) > 0
                ]
                
                page_updated = 0
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ—á–Ω–æ –≤ –º–µ–∂–∞—Ö –ø—Ä–æ—Ü–µ—Å—É
                def update_client(buyer, local_client_index, total_clients_on_page):
                    nonlocal page_updated, current_global_client_index
                    
                    current_global_client_index += 1
                    buyer_id = buyer.get('id')
                    orders_sum = Decimal(str(buyer.get('orders_sum', 0)))
                    
                    # –ü–æ–∫–∞–∑—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å –≤—ñ–¥–Ω–æ—Å–Ω–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ —É —Å–∏—Å—Ç–µ–º—ñ
                    global_progress = (current_global_client_index / total_records) * 100
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –±–æ–Ω—É—Å–∏
                    current_bonuses = calculator.get_current_bonuses(buyer)
                    
                    # –Ø–∫—â–æ —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É –≤–∫–ª—é—á–µ–Ω–∏–π
                    if search_mode:
                        if current_bonuses >= min_bonus_amount:
                            logger.info(f"ÔøΩ P{process_id}: –ó–ù–ê–ô–î–ï–ù–û! {buyer.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')} –º–∞—î {current_bonuses} –±–æ–Ω—É—Å—ñ–≤ (‚â•{min_bonus_amount}) - –∫–ª—ñ—î–Ω—Ç {current_global_client_index}/{total_records}")
                            
                            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
                            processed_customers[str(buyer_id)] = {
                                'buyer_info': {
                                    'id': buyer_id,
                                    'full_name': buyer.get('full_name', ''),
                                    'email': buyer.get('email', []),
                                    'phone': buyer.get('phone', [])
                                },
                                'orders_count': buyer.get('orders_count', 0),
                                'total_amount': float(orders_sum),
                                'current_bonuses': current_bonuses,
                                'current_expiry_date': calculator.get_current_expiry_date(buyer),
                                'bonus_amount': 0,  # –í —Ä–µ–∂–∏–º—ñ –ø–æ—à—É–∫—É –Ω–µ —Ä–∞—Ö—É—î–º–æ –Ω–æ–≤—ñ –±–æ–Ω—É—Å–∏
                                'bonus_amount_int': 0,
                                'search_result': True
                            }
                            
                            # –Ø–∫—â–æ —Ç—ñ–ª—å–∫–∏ –ø–æ—à—É–∫ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
                            if only_search:
                                page_updated += 1
                                return True
                        else:
                            # –ö–ª—ñ—î–Ω—Ç –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫—Ä–∏—Ç–µ—Ä—ñ—è–º –ø–æ—à—É–∫—É
                            if current_global_client_index % 100 == 0:  # –õ–æ–≥—É—î–º–æ –∫–æ–∂–Ω–æ–≥–æ 100-–≥–æ
                                logger.info(f"üë§ P{process_id}: –∫–ª—ñ—î–Ω—Ç {current_global_client_index}/{total_records} ({global_progress:.1f}%) - {buyer.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')} ({current_bonuses} –±–æ–Ω—É—Å—ñ–≤)")
                            
                            # –Ø–∫—â–æ —Ç—ñ–ª—å–∫–∏ –ø–æ—à—É–∫ —ñ –∫–ª—ñ—î–Ω—Ç –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                            if only_search:
                                return False
                    else:
                        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
                        logger.info(f"ÔøΩüë§ P{process_id}: –∫–ª—ñ—î–Ω—Ç {current_global_client_index}/{total_records} ({global_progress:.1f}% –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É) - {buyer.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
                    
                    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –±–æ–Ω—É—Å–∏ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ —Ä–µ–∂–∏–º "—Ç—ñ–ª—å–∫–∏ –ø–æ—à—É–∫")
                    if not (search_mode and only_search):
                        bonus_amount = (orders_sum * Decimal(str(calculator.bonus_percentage))) / Decimal('100')
                        bonus_amount_int = int(bonus_amount)
                        
                        if bonus_amount_int <= 0:
                            logger.info(f"‚ùå P{process_id}: {buyer.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}: –±–æ–Ω—É—Å–∏ ‚â§ 0 ({bonus_amount_int}), –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ - –∫–ª—ñ—î–Ω—Ç {current_global_client_index}/{total_records}")
                            return False
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è
                        current_expiry_date = calculator.get_current_expiry_date(buyer)
                        expected_expiry_date = "2025-08-31"  # –û—á—ñ–∫—É–≤–∞–Ω–∞ –¥–∞—Ç–∞
                        
                        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∑–≤—ñ—Ç—É
                        if str(buyer_id) not in processed_customers:  # –Ø–∫—â–æ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ –≤ —Ä–µ–∂–∏–º—ñ –ø–æ—à—É–∫—É
                            processed_customers[str(buyer_id)] = {
                                'buyer_info': {
                                    'id': buyer_id,
                                    'full_name': buyer.get('full_name', ''),
                                    'email': buyer.get('email', []),
                                    'phone': buyer.get('phone', [])
                                },
                                'orders_count': buyer.get('orders_count', 0),
                                'total_amount': float(orders_sum),
                                'bonus_amount': float(bonus_amount),
                                'bonus_amount_int': bonus_amount_int,
                                'current_bonuses': current_bonuses,
                                'current_expiry_date': current_expiry_date,
                                'search_result': False
                            }

                        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, –¢–Ü–õ–¨–ö–ò —è–∫—â–æ –±–æ–Ω—É—Å–∏ —ñ –¥–∞—Ç–∞ –≤–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ
                        # –í–ê–ñ–õ–ò–í–û: –∑–∞–≤–∂–¥–∏ –æ–Ω–æ–≤–ª—é—î–º–æ, —è–∫—â–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π –±–æ–Ω—É—Å –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ
                        if current_bonuses == bonus_amount_int and current_expiry_date == expected_expiry_date:
                            logger.info(f"‚è≠Ô∏è P{process_id}: {buyer.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}: –≤–∂–µ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ {bonus_amount_int} –±–æ–Ω—É—Å—ñ–≤ –¥–æ {current_expiry_date}, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ - –∫–ª—ñ—î–Ω—Ç {current_global_client_index}/{total_records}")
                            return False
                        
                        # –õ–æ–≥—É—î–º–æ —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏
                        if current_bonuses != bonus_amount_int:
                            logger.info(f"üîÑ P{process_id}: {buyer.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}: –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ –±–æ–Ω—É—Å–∏ {current_bonuses} ‚Üí {bonus_amount_int} (—Å—É–º–∞: {float(orders_sum):.0f}‚Ç¥ √ó {calculator.bonus_percentage}%)")
                        if current_expiry_date != expected_expiry_date:
                            logger.info(f"üìÖ P{process_id}: {buyer.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}: –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞—Ç—É {current_expiry_date} ‚Üí {expected_expiry_date}")

                        if not dry_run:
                            try:
                                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–∏—á–∏–Ω—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
                                update_reason = []
                                if current_bonuses != bonus_amount_int:
                                    update_reason.append(f"–±–æ–Ω—É—Å–∏ {current_bonuses}‚Üí{bonus_amount_int}")
                                if current_expiry_date != expected_expiry_date:
                                    update_reason.append(f"–¥–∞—Ç–∞ {current_expiry_date}‚Üí{expected_expiry_date}")
                                
                                reason_text = ", ".join(update_reason)
                                
                                # –§–æ—Ä–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –±–æ–Ω—É—Å—ñ–≤
                                date_str = datetime.now(timezone.utc).strftime('%d.%m')
                                expiry_date_short = "31.08.25"  # –ö—ñ–Ω–µ—Ü—å –ª—ñ—Ç–∞ 2025
                                transaction_entry = f"üîÑ {date_str} | –ü–æ—á–∞—Ç–∫–æ–≤—ñ –±–æ–Ω—É—Å–∏ | {float(orders_sum):.0f}‚Ç¥ | +{bonus_amount_int} | -{current_bonuses} | {current_bonuses}‚Üí{bonus_amount_int} | –¥–æ {expiry_date_short}"
                                
                                # –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—ñ –ø–æ–ª—è
                                update_data = {
                                    "custom_fields": [
                                        {"uuid": calculator.BONUS_FIELD_UUID, "value": str(bonus_amount_int)},
                                        {"uuid": calculator.BONUS_EXPIRY_FIELD_UUID, "value": expiry_date_str},
                                        {"uuid": calculator.HISTORY_FIELD_UUID, "value": transaction_entry}
                                    ]
                                }
                                
                                # –í–∏–∫–æ–Ω—É—î–º–æ PUT –∑–∞–ø–∏—Ç
                                update_response = calculator.make_request(f"/buyer/{buyer_id}", "PUT", update_data)
                                
                                if update_response:
                                    logger.info(f"‚úÖ P{process_id}: {buyer.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}: {bonus_amount_int} –±–æ–Ω—É—Å—ñ–≤ ({reason_text}) - –∫–ª—ñ—î–Ω—Ç {current_global_client_index}/{total_records}")
                                    page_updated += 1
                                    return True
                                else:
                                    logger.error(f"‚ùå P{process_id}: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è {buyer.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')} - –∫–ª—ñ—î–Ω—Ç {current_global_client_index}/{total_records}")
                                    return False
                                    
                            except Exception as e:
                                logger.error(f"‚ùå P{process_id}: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è {buyer.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}: {e}")
                                return False
                        else:
                            page_updated += 1
                            return True
                    
                    # –Ø–∫—â–æ –¥—ñ–π—à–ª–∏ —Å—é–¥–∏ –≤ —Ä–µ–∂–∏–º—ñ "—Ç—ñ–ª—å–∫–∏ –ø–æ—à—É–∫" - –∑–Ω–∞—á–∏—Ç—å –∫–ª—ñ—î–Ω—Ç –æ–±—Ä–æ–±–ª–µ–Ω–∏–π
                    return True
                
                # –ë–∞–≥–∞—Ç–æ–ø–æ—Ç–æ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ (–æ–±–º–µ–∂—É—î–º–æ –¥–ª—è 200 –∑–∞–ø–∏—Ç—ñ–≤/—Ö–≤–∏–ª–∏–Ω—É)
                max_workers = 2  # –û–¥–∏–Ω –ø–æ—Ç—ñ–∫ –Ω–∞ –ø—Ä–æ—Ü–µ—Å –¥–ª—è –¥–æ—Ç—Ä–∏–º–∞–Ω–Ω—è rate limit
                total_clients_on_page = len(buyers_with_orders)
                
                with ThreadPoolExecutor(max_workers=max_workers) as executor:
                    futures = [
                        executor.submit(update_client, buyer, idx + 1, total_clients_on_page) 
                        for idx, buyer in enumerate(buyers_with_orders)
                    ]
                    
                    for future in as_completed(futures):
                        try:
                            success = future.result()
                            if success:
                                successful_updates += 1
                            else:
                                failed_updates += 1
                        except Exception as e:
                            failed_updates += 1
                            logger.error(f"‚ùå P{process_id}: –ü–æ–º–∏–ª–∫–∞ –≤ –ø–æ—Ç–æ—Ü—ñ: {e}")
                
                total_processed += len(buyers_with_orders)
                
                if page % 5 == 0:  # –õ–æ–≥—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω—ñ 5 —Å—Ç–æ—Ä—ñ–Ω–æ–∫
                    pages_done = page - start_page + 1
                    pages_total = end_page - start_page + 1
                    pages_remaining = pages_total - pages_done
                    progress_percent = (pages_done / pages_total) * 100
                    global_progress = (current_global_client_index / total_records) * 100 if total_records > 0 else 0
                    clients_remaining = total_records - current_global_client_index
                    logger.info(f"üìä P{process_id}: —Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page}/{end_page} ({progress_percent:.1f}%), –æ–±—Ä–æ–±–ª–µ–Ω–æ {current_global_client_index}/{total_records} –∫–ª—ñ—î–Ω—Ç—ñ–≤ ({global_progress:.1f}%), –∑–∞–ª–∏—à–∏–ª–æ—Å—å ~{clients_remaining} –∫–ª—ñ—î–Ω—Ç—ñ–≤")
                
            except Exception as e:
                logger.error(f"‚ùå P{process_id}: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {page}: {e}")
                
                # –Ø–∫—â–æ —Ü–µ –ø—Ä–æ–∫—Å—ñ –ø–æ–º–∏–ª–∫–∞, –º–æ–∂–µ–º–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ –ø—Ä–æ–∫—Å—ñ –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É
                if "ProxyError" in str(e) or "Connection refused" in str(e):
                    logger.warning(f"üîÑ P{process_id}: –ü—Ä–æ–∫—Å—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å–ø—Ä–æ–±—É—î–º–æ –±–µ–∑ –ø—Ä–æ–∫—Å—ñ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {page}")
                    try:
                        # –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –ø—Ä–æ–∫—Å—ñ –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
                        calculator.proxy_enabled = False
                        calculator.rate_limit_delay = 0.3  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è 200 –∑–∞–ø–∏—Ç—ñ–≤/—Ö–≤–∏–ª–∏–Ω—É
                        
                        # –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –±–µ–∑ –ø—Ä–æ–∫—Å—ñ
                        response = calculator.make_request(
                            f"/buyer?page={page}&limit=50&include=custom_fields"
                        )
                        
                        if response and response.get('data'):
                            logger.info(f"‚úÖ P{process_id}: –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É {page} –±–µ–∑ –ø—Ä–æ–∫—Å—ñ")
                        
                        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–∫—Å—ñ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
                        calculator.proxy_enabled = proxy_config is not None
                        calculator.rate_limit_delay = 0.3  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è 200 –∑–∞–ø–∏—Ç—ñ–≤/—Ö–≤–∏–ª–∏–Ω—É
                        
                    except Exception as fallback_error:
                        logger.error(f"‚ùå P{process_id}: –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—ñ—Ç—å –±–µ–∑ –ø—Ä–æ–∫—Å—ñ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {page}: {fallback_error}")
                
                continue
    
    except Exception as e:
        logger.error(f"‚ùå P{process_id}: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    
    pages_processed = end_page - start_page + 1
    logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å {process_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {pages_processed} —Å—Ç–æ—Ä—ñ–Ω–æ–∫, {successful_updates} —É—Å–ø—ñ—à–Ω–∏—Ö, {failed_updates} –ø–æ–º–∏–ª–æ–∫, {total_processed} –∫–ª—ñ—î–Ω—Ç—ñ–≤")
    
    return {
        'process_id': process_id,
        'start_page': start_page,
        'end_page': end_page,
        'processed_customers': processed_customers,
        'successful_updates': successful_updates,
        'failed_updates': failed_updates,
        'total_processed': total_processed
    }

def process_all_customers_multiprocess(calculator, num_processes=10, dry_run=True, test_mode=False, search_config=None):
    """
    –ë–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
    """
    if search_config and search_config.get('enabled') and search_config.get('only_search'):
        logger.info("=" * 80)
        logger.info("ÔøΩ –ë–ê–ì–ê–¢–û–ü–†–û–¶–ï–°–û–†–ù–ò–ô –ü–û–®–£–ö –ö–õ–Ü–Ñ–ù–¢–Ü–í –ó –í–ï–õ–ò–ö–ò–ú–ò –ë–û–ù–£–°–ê–ú–ò")
        logger.info("=" * 80)
    else:
        logger.info("=" * 80)
        logger.info("ÔøΩüöÄ –ë–ê–ì–ê–¢–û–ü–†–û–¶–ï–°–û–†–ù–ï –ù–ê–†–ê–•–£–í–ê–ù–ù–Ø –ü–û–ß–ê–¢–ö–û–í–ò–• –ë–û–ù–£–°–Ü–í")
        logger.info("=" * 80)
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        total_pages, total_records = calculator.get_total_pages(limit=50)
        
        if total_pages == 0:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
            return {}
        
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ –æ–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 5 —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        if test_mode:
            total_pages = min(5, total_pages)
            logger.info(f"üß™ –¢–ï–°–¢–û–í–ò–ô –†–ï–ñ–ò–ú: –æ–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ {total_pages} —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
        
        logger.info(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫: {total_pages}")
        logger.info(f"üîÑ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—ñ–≤: {num_processes}")
        
        # –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –º—ñ–∂ –ø—Ä–æ—Ü–µ—Å–∞–º–∏
        pages_per_process = math.ceil(total_pages / num_processes)
        process_ranges = []
        
        for i in range(num_processes):
            start_page = i * pages_per_process + 1
            end_page = min((i + 1) * pages_per_process, total_pages)
            
            if start_page <= total_pages:
                process_ranges.append((start_page, end_page, i + 1))
        
        logger.info("üìã –†–æ–∑–ø–æ–¥—ñ–ª —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –º—ñ–∂ –ø—Ä–æ—Ü–µ—Å–∞–º–∏:")
        for start_page, end_page, process_id in process_ranges:
            logger.info(f"   –ü—Ä–æ—Ü–µ—Å {process_id}: —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {start_page}-{end_page} ({end_page-start_page+1} —Å—Ç–æ—Ä—ñ–Ω–æ–∫)")
        
        # –ì–æ—Ç—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—ñ–≤
        process_args = [
            (start_page, end_page, calculator.api_key, calculator.bonus_percentage, 
             calculator.proxy_config, dry_run, process_id, total_records, search_config or {})
            for start_page, end_page, process_id in process_ranges
        ]
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω—É –æ–±—Ä–æ–±–∫—É
        start_time = datetime.now()
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ {len(process_args)} –ø—Ä–æ—Ü–µ—Å—ñ–≤...")
        
        all_results = {}
        total_successful = 0
        total_failed = 0
        total_customers = 0
        completed_processes = 0
        
        with ProcessPoolExecutor(max_workers=num_processes) as executor:
            # –ü–æ–¥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
            future_to_process = {
                executor.submit(process_page_range, args): args[6]  # process_id
                for args in process_args
            }
            
            # –ó–±–∏—Ä–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            for future in as_completed(future_to_process):
                process_id = future_to_process[future]
                
                try:
                    result = future.result()
                    
                    # –û–±'—î–¥–Ω—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                    all_results.update(result['processed_customers'])
                    total_successful += result['successful_updates']
                    total_failed += result['failed_updates']
                    total_customers += result['total_processed']
                    completed_processes += 1
                    
                    # –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
                    overall_progress = (completed_processes / len(process_args)) * 100
                    logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å {result['process_id']} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É. –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å: {completed_processes}/{len(process_args)} ({overall_progress:.1f}%)")
                    
                except Exception as e:
                    completed_processes += 1
                    overall_progress = (completed_processes / len(process_args)) * 100
                    logger.error(f"‚ùå –ü—Ä–æ—Ü–µ—Å {process_id} –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é: {e}. –ü—Ä–æ–≥—Ä–µ—Å: {completed_processes}/{len(process_args)} ({overall_progress:.1f}%)")
        
        end_time = datetime.now()
        execution_time = (end_time - start_time).total_seconds()
        
        # –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("=" * 80)
        logger.info("–†–ï–ó–£–õ–¨–¢–ê–¢–ò –ë–ê–ì–ê–¢–û–ü–†–û–¶–ï–°–û–†–ù–û–á –û–ë–†–û–ë–ö–ò:")
        logger.info(f"–ü—Ä–æ—Ü–µ—Å—ñ–≤ –∑–∞–ø—É—â–µ–Ω–æ: {len(process_args)}")
        logger.info(f"–°—Ç–æ—Ä—ñ–Ω–æ–∫ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {total_pages}")
        logger.info(f"–ö–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏: {total_customers}")
        
        if not dry_run:
            logger.info(f"–£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ: {total_successful}")
            logger.info(f"–ü–æ–º–∏–ª–æ–∫: {total_failed}")
            success_rate = (total_successful / (total_successful + total_failed) * 100) if (total_successful + total_failed) > 0 else 0
            logger.info(f"–í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—Ö—É: {success_rate:.1f}%")
        
        logger.info(f"–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
        if total_customers > 0:
            logger.info(f"–®–≤–∏–¥–∫—ñ—Å—Ç—å: {total_customers/execution_time:.1f} –∫–ª—ñ—î–Ω—Ç—ñ–≤/—Å–µ–∫")
        logger.info("=" * 80)
        
        return all_results
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –±–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏: {e}")
        return {}

def generate_optimized_report(customer_bonuses, filename=None, search_config=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É"""
    if not filename:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        if search_config and search_config.get('enabled') and search_config.get('only_search'):
            filename = f"keycrm_high_bonus_clients_{timestamp}"
        else:
            filename = f"keycrm_bonus_report_multiprocess_{timestamp}"
    
    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –±–æ–Ω—É—Å–∞–º–∏
    if search_config and search_config.get('enabled') and search_config.get('only_search'):
        # –í —Ä–µ–∂–∏–º—ñ –ø–æ—à—É–∫—É —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –±–æ–Ω—É—Å–∞–º–∏
        sorted_customers = sorted(
            customer_bonuses.items(),
            key=lambda x: x[1].get('current_bonuses', 0),
            reverse=True
        )
        report_method = 'multiprocess_search'
    else:
        # –í –∑–≤–∏—á–∞–π–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏–º–∏ –±–æ–Ω—É—Å–∞–º–∏
        sorted_customers = sorted(
            customer_bonuses.items(),
            key=lambda x: x[1]['bonus_amount'],
            reverse=True
        )
        report_method = 'multiprocess_optimized'
    
    # –î–µ—Ç–∞–ª—å–Ω–∏–π JSON –∑–≤—ñ—Ç
    if search_config and search_config.get('enabled') and search_config.get('only_search'):
        # –†–∞—Ö—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ—à—É–∫—É
        search_results = [data for data in customer_bonuses.values() if data.get('search_result', False)]
        
        report_data = {
            'generation_date': datetime.now().isoformat(),
            'method': report_method,
            'search_criteria': {
                'min_bonus_amount': search_config.get('min_bonus_amount', 3000),
                'search_only': True
            },
            'summary': {
                'total_customers_checked': len(customer_bonuses),
                'customers_found': len(search_results),
                'total_bonuses_found': sum(data.get('current_bonuses', 0) for data in search_results),
                'average_bonus_found': (sum(data.get('current_bonuses', 0) for data in search_results) / len(search_results)) if search_results else 0,
                'total_orders_value': sum(data.get('total_amount', 0) for data in search_results),
                'total_orders_count': sum(data.get('orders_count', 0) for data in search_results)
            },
            'customers': dict(sorted_customers)
        }
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∑–≤—ñ—Ç
        report_data = {
            'generation_date': datetime.now().isoformat(),
            'method': report_method,
            'summary': {
                'total_customers': len(customer_bonuses),
                'total_amount': sum(data['total_amount'] for data in customer_bonuses.values()),
                'total_new_bonus': sum(data['bonus_amount'] for data in customer_bonuses.values()),
                'total_current_bonus': sum(data['current_bonuses'] for data in customer_bonuses.values()),
                'total_orders': sum(data['orders_count'] for data in customer_bonuses.values()),
                'average_bonus': sum(data['bonus_amount'] for data in customer_bonuses.values()) / len(customer_bonuses) if customer_bonuses else 0,
                'average_order_value': sum(data['total_amount'] for data in customer_bonuses.values()) / sum(data['orders_count'] for data in customer_bonuses.values()) if sum(data['orders_count'] for data in customer_bonuses.values()) > 0 else 0
            },
            'customers': dict(sorted_customers)
        }
    
    with open(f"{filename}.json", 'w', encoding='utf-8') as f:
        json.dump(report_data, f, ensure_ascii=False, indent=2)
    
    # CSV –∑–≤—ñ—Ç
    with open(f"{filename}.csv", 'w', encoding='utf-8', newline='') as f:
        writer = csv.writer(f)
        
        if search_config and search_config.get('enabled') and search_config.get('only_search'):
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º—É –ø–æ—à—É–∫—É
            writer.writerow([
                'ID –∫–ª—ñ—î–Ω—Ç–∞', '–Ü–º\'—è', 'Email', '–¢–µ–ª–µ—Ñ–æ–Ω', 
                '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å', '–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞', '–ü–æ—Ç–æ—á–Ω—ñ –±–æ–Ω—É—Å–∏',
                '–î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤'
            ])
            
            for buyer_id, data in sorted_customers:
                if data.get('search_result', False):  # –¢—ñ–ª—å–∫–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏
                    buyer_info = data['buyer_info']
                    email = ', '.join(buyer_info.get('email', []))
                    phone = ', '.join(buyer_info.get('phone', []))
                    
                    writer.writerow([
                        buyer_id,
                        buyer_info.get('full_name', ''),
                        email,
                        phone,
                        data['orders_count'],
                        f"{data['total_amount']:.2f}",
                        data['current_bonuses'],
                        data.get('current_expiry_date', '')
                    ])
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow([
                'ID –∫–ª—ñ—î–Ω—Ç–∞', '–Ü–º\'—è', 'Email', '–¢–µ–ª–µ—Ñ–æ–Ω', 
                '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å', '–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞', '–ü–æ—Ç–æ—á–Ω—ñ –±–æ–Ω—É—Å–∏',
                '–ù–æ–≤—ñ –±–æ–Ω—É—Å–∏', '–ó–º—ñ–Ω–∞ –±–æ–Ω—É—Å—ñ–≤'
            ])
            
            for buyer_id, data in sorted_customers:
                buyer_info = data['buyer_info']
                email = ', '.join(buyer_info.get('email', []))
                phone = ', '.join(buyer_info.get('phone', []))
                
                writer.writerow([
                    buyer_id,
                    buyer_info.get('full_name', ''),
                    email,
                    phone,
                    data['orders_count'],
                    f"{data['total_amount']:.2f}",
                    data['current_bonuses'],
                    data['bonus_amount_int'],
                    data.get('bonus_change', data['bonus_amount_int'])
                ])
    
    logger.info(f"–ó–≤—ñ—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filename}.json —Ç–∞ {filename}.csv")

def load_config():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
            
        # –î–æ–¥–∞—î–º–æ search_mode —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        if 'search_mode' not in config:
            config['search_mode'] = {
                "enabled": False,
                "only_search": False,
                "min_bonus_amount": 3000
            }
            
        return config
    except FileNotFoundError:
        return {
            "api_key": "M2IyOTFjNWM4ODA2OWU0NjU4ZDRkODAxZDVkMTQ4ZGNlMzUzYzc5NQ",
            "bonus_percentage": 7.0,
            "description": "–ë–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
            "search_mode": {
                "enabled": False,
                "only_search": False,
                "min_bonus_amount": 3000
            },
            "proxy": {
                "enabled": True,
                "host": "p.webshare.io",
                "port": 80,
                "username": "oxfwmgn-UA-rotate",
                "password": "drci27S4eayj"
            }
        }

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    config = load_config()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É
    search_config = config.get('search_mode', {})
    search_enabled = search_config.get('enabled', False)
    only_search = search_config.get('only_search', False)
    min_bonus_amount = search_config.get('min_bonus_amount', 3000)
    
    if search_enabled and only_search:
        print("üîç –ü–û–®–£–ö –ö–õ–Ü–Ñ–ù–¢–Ü–í –ó –í–ï–õ–ò–ö–ò–ú–ò –ë–û–ù–£–°–ê–ú–ò")
        print(f"(–®—É–∫–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –±–æ–Ω—É—Å–∞–º–∏ ‚â• {min_bonus_amount})")
    elif search_enabled:
        print("üîç –ó–ú–Ü–®–ê–ù–ò–ô –†–ï–ñ–ò–ú: –ü–û–®–£–ö + –ù–ê–†–ê–•–£–í–ê–ù–ù–Ø –ë–û–ù–£–°–Ü–í")
        print(f"(–®—É–∫–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –±–æ–Ω—É—Å–∞–º–∏ ‚â• {min_bonus_amount} + –Ω–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–æ–Ω—É—Å–∏)")
    else:
        print("üöÄ –ë–ê–ì–ê–¢–û–ü–†–û–¶–ï–°–û–†–ù–ò–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ë–û–ù–£–°–Ü–í –î–õ–Ø KEYCRM")
        print("(–ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤)")
    print("=" * 80)
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø—Ä–æ–∫—Å—ñ
    proxy_config = None
    if config.get('proxy', {}).get('enabled', False):
        proxy_config = config['proxy']
        print(f"üåê –ü—Ä–æ–∫—Å—ñ: {proxy_config['host']}:{proxy_config['port']}")
    
    if search_enabled and only_search:
        print(f"üîç –í—ñ–¥—Å–æ—Ç–æ–∫ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è: –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è (—Ä–µ–∂–∏–º –ø–æ—à—É–∫—É)")
        print(f"üéØ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–æ–Ω—É—Å—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É: {min_bonus_amount}")
    elif search_enabled:
        print(f"üìä –í—ñ–¥—Å–æ—Ç–æ–∫ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è: {config['bonus_percentage']}%")
        print(f"üéØ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–æ–Ω—É—Å—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É: {min_bonus_amount}")
    else:
        print(f"üìä –í—ñ–¥—Å–æ—Ç–æ–∫ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è: {config['bonus_percentage']}%")
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—ñ–≤ (–æ–±–º–µ–∂—É—î–º–æ –¥–ª—è 200 –∑–∞–ø–∏—Ç—ñ–≤/—Ö–≤–∏–ª–∏–Ω—É)
    if proxy_config:
        num_processes = min(mp.cpu_count(), 5)  # –ú–∞–∫—Å–∏–º—É–º 5 –ø—Ä–æ—Ü–µ—Å—ñ–≤ –∑ –ø—Ä–æ–∫—Å—ñ
    else:
        num_processes = min(mp.cpu_count(), 2)  # –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–æ—Ü–µ—Å–∏ –±–µ–∑ –ø—Ä–æ–∫—Å—ñ
    print(f"üîÑ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—ñ–≤: {num_processes}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    calculator = KeyCRMBonusCalculator(
        api_key=config['api_key'],
        bonus_percentage=config['bonus_percentage'],
        proxy_config=proxy_config
    )
    
    try:
        start_time = datetime.now()
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –±–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω—É –æ–±—Ä–æ–±–∫—É
        customer_bonuses = process_all_customers_multiprocess(
            calculator=calculator,
            num_processes=num_processes,
            dry_run=False if not (search_enabled and only_search) else True,  # –í —Ä–µ–∂–∏–º—ñ –ø–æ—à—É–∫—É –Ω–µ –∑–∞–ø–∏—Å—É—î–º–æ
            test_mode=False,  # –í—Å—ñ –∫–ª—ñ—î–Ω—Ç–∏
            search_config=search_config
        )
        
        end_time = datetime.now()
        execution_time = (end_time - start_time).total_seconds()
        
        if customer_bonuses:
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            if search_enabled and only_search:
                filename = f"keycrm_high_bonus_clients_{timestamp}"
            else:
                filename = f"keycrm_bonus_report_multiprocess_{timestamp}"
            generate_optimized_report(customer_bonuses, filename, search_config)
            
            if search_enabled and only_search:
                # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É
                search_results = [
                    (buyer_id, data) for buyer_id, data in customer_bonuses.items()
                    if data.get('search_result', False)
                ]
                
                print(f"\nüíé –ó–ù–ê–ô–î–ï–ù–û {len(search_results)} –ö–õ–Ü–Ñ–ù–¢–Ü–í –ó –ë–û–ù–£–°–ê–ú–ò ‚â• {min_bonus_amount}:")
                print("-" * 80)
                
                # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –±–æ–Ω—É—Å—ñ–≤
                search_results.sort(key=lambda x: x[1]['current_bonuses'], reverse=True)
                
                for i, (buyer_id, data) in enumerate(search_results, 1):
                    buyer_name = data['buyer_info'].get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')
                    current_bonuses = data['current_bonuses']
                    orders_sum = data['total_amount']
                    print(f"{i:2d}. {buyer_name:<25} –ü–æ—Ç–æ—á–Ω—ñ –±–æ–Ω—É—Å–∏: {current_bonuses:>5} | –ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–∞: {orders_sum:>8.0f}‚Ç¥")
            else:
                # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø-10
                sorted_customers = sorted(
                    customer_bonuses.items(),
                    key=lambda x: x[1]['bonus_amount'],
                    reverse=True
                )
                
                print(f"\nüèÜ –¢–û–ü-{min(10, len(sorted_customers))} –ö–õ–Ü–Ñ–ù–¢–Ü–í –ó–ê –ù–ê–†–ê–•–û–í–ê–ù–ò–ú–ò –ë–û–ù–£–°–ê–ú–ò:")
                print("-" * 80)
                for i, (buyer_id, data) in enumerate(sorted_customers[:10], 1):
                    buyer_name = data['buyer_info'].get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')
                    new = data['bonus_amount_int']
                    orders_sum = data['total_amount']
                    print(f"{i:2d}. {buyer_name:<25} –ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–∞: {orders_sum:>8.0f}‚Ç¥ ‚Üí {new:>4} –±–æ–Ω—É—Å—ñ–≤")
        
        if search_enabled and only_search:
            print(f"\n‚úÖ –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        else:
            print(f"\n‚úÖ –ë–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–µ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"‚è±Ô∏è  –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
        if customer_bonuses:
            if search_enabled and only_search:
                search_results_count = len([data for data in customer_bonuses.values() if data.get('search_result', False)])
                print(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –≤–µ–ª–∏–∫–∏–º–∏ –±–æ–Ω—É—Å–∞–º–∏: {search_results_count}")
                print(f"üöÄ –®–≤–∏–¥–∫—ñ—Å—Ç—å –ø–æ—à—É–∫—É: {len(customer_bonuses)/execution_time:.1f} –∫–ª—ñ—î–Ω—Ç—ñ–≤/—Å–µ–∫")
            else:
                print(f"üöÄ –®–≤–∏–¥–∫—ñ—Å—Ç—å: {len(customer_bonuses)/execution_time:.1f} –∫–ª—ñ—î–Ω—Ç—ñ–≤/—Å–µ–∫")
        
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è multiprocessing
    mp.set_start_method('spawn', force=True)
    main()
