#!/usr/bin/env python3
"""
–ë–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ KeyCRM —É CSV —Ñ–∞–π–ª
–í–∏—Ç—è–≥—É—î —ñ–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ, –µ–º–µ–π–ª, —Ç–µ–ª–µ—Ñ–æ–Ω, –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∑–∞–º–æ–≤–ª–µ–Ω—å
"""

import requests
import json
import time
import logging
from datetime import datetime, timezone
import csv
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor, as_completed
import multiprocessing as mp
import math
import os
import sys
import threading

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(processName)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('client_export_multiprocess.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class KeyCRMClientExporter:
    def __init__(self, api_key, proxy_config=None):
        self.api_key = api_key
        self.base_url = "https://openapi.keycrm.app/v1"
        
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Accept": "application/json",
            "Content-Type": "application/json"
        }
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–æ–∫—Å—ñ
        self.proxy_config = proxy_config
        self.proxy_enabled = proxy_config is not None
        
        if self.proxy_enabled and proxy_config:
            logger.info(f"üåê –£–≤—ñ–º–∫–Ω–µ–Ω–æ –ø—Ä–æ–∫—Å—ñ: {proxy_config.get('host', 'unknown')}:{proxy_config.get('port', 'unknown')}")
            self.rate_limit_delay = 0.1  # 600 –∑–∞–ø–∏—Ç—ñ–≤/—Ö–≤–∏–ª–∏–Ω—É
        else:
            logger.info("‚ö†Ô∏è –ü—Ä–æ–∫—Å—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            self.rate_limit_delay = 0.3  # 200 –∑–∞–ø–∏—Ç—ñ–≤/—Ö–≤–∏–ª–∏–Ω—É
    
    def make_request(self, url, max_retries=5):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø—Ä–æ–∫—Å—ñ"""
        full_url = f"{self.base_url}{url}"
        
        for attempt in range(max_retries):
            response = None
            session = requests.Session()
            
            try:
                # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø—Ä–æ–∫—Å—ñ —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ
                if self.proxy_enabled and self.proxy_config:
                    proxy_url = f"http://{self.proxy_config['username']}:{self.proxy_config['password']}@{self.proxy_config['host']}:{self.proxy_config['port']}"
                    session.proxies = {
                        'http': proxy_url,
                        'https': proxy_url
                    }
                
                # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
                response = session.get(full_url, headers=self.headers, timeout=20)
                
                if response is None:
                    raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞")
                
                response.raise_for_status()
                
                # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ø–∞—É–∑–∞
                time.sleep(self.rate_limit_delay)
                
                return response.json()
                
            except (requests.exceptions.ProxyError, 
                    requests.exceptions.ConnectTimeout,
                    requests.exceptions.ReadTimeout) as proxy_error:
                
                if attempt < max_retries - 1:
                    # –î–ª—è –ø—Ä–æ–∫—Å—ñ –ø–æ–º–∏–ª–æ–∫ —Ä–æ–±–∏–º–æ –¥–æ–≤—à—É –ø–∞—É–∑—É
                    wait_time = min(2 ** attempt, 10)  # –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–æ 10 —Å–µ–∫
                    logger.warning(f"–ü—Ä–æ–∫—Å—ñ –ø–æ–º–∏–ª–∫–∞ {attempt + 1}/{max_retries} –¥–ª—è {full_url}: {proxy_error}")
                    logger.info(f"–ß–µ–∫–∞—î–º–æ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...")
                    time.sleep(wait_time)
                    continue
                else:
                    logger.error(f"–ü—Ä–æ–∫—Å—ñ –ø–æ–º–∏–ª–∫–∞ –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–± –¥–ª—è {full_url}: {proxy_error}")
                    raise
                    
            except Exception as e:
                if attempt < max_retries - 1:
                    wait_time = 1 + attempt  # –õ—ñ–Ω—ñ–π–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫
                    logger.warning(f"–°–ø—Ä–æ–±–∞ {attempt + 1}/{max_retries} –Ω–µ–≤–¥–∞–ª–∞ –¥–ª—è {full_url}: {e}")
                    time.sleep(wait_time)
                    continue
                else:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ {full_url} –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–±: {e}")
                    raise
            finally:
                session.close()
    
    def get_total_pages(self, limit=50):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫"""
        try:
            response = self.make_request(f"/buyer?page=1&limit={limit}")
            
            if response is None:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API")
                return 0, 0
            
            total_records = response.get('total', 0)
            total_pages = response.get('last_page', 0)
            
            logger.info(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤: {total_records}")
            logger.info(f"üìÑ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫ (limit={limit}): {total_pages}")
            
            return total_pages, total_records
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫: {e}")
            return 0, 0

def extract_client_data(buyer):
    """–í–∏—Ç—è–≥—É—î –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞"""
    buyer_id = buyer.get('id', '')
    full_name = buyer.get('full_name', '')
    
    # –†–æ–∑–¥—ñ–ª—è—î–º–æ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ
    name_parts = full_name.split(' ', 1) if full_name else ['', '']
    first_name = name_parts[0] if len(name_parts) > 0 else ''
    last_name = name_parts[1] if len(name_parts) > 1 else ''
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –µ–º–µ–π–ª–∏ —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∏
    emails = buyer.get('email', [])
    phones = buyer.get('phone', [])
    
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Ä—è–¥–∫–∏
    email_str = ', '.join(emails) if isinstance(emails, list) else str(emails) if emails else ''
    phone_str = ', '.join(phones) if isinstance(phones, list) else str(phones) if phones else ''
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –¥–∞–Ω—ñ
    orders_sum = float(buyer.get('orders_sum', 0) or 0)
    orders_count = int(buyer.get('orders_count', 0) or 0)
    
    # –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    created_at = buyer.get('created_at', '')
    
    return {
        'id': buyer_id,
        'first_name': first_name,
        'last_name': last_name,
        'full_name': full_name,
        'email': email_str,
        'phone': phone_str,
        'orders_sum': orders_sum,
        'orders_count': orders_count,
        'created_at': created_at
    }

def progress_monitor(global_counter, lock, total_records, start_time, stop_event):
    """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É"""
    while not stop_event.is_set():
        try:
            time.sleep(30)  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
            if stop_event.is_set():
                break
                
            with lock:
                current_count = global_counter.value
            
            if current_count > 0:
                progress = (current_count / total_records) * 100 if total_records > 0 else 0
                elapsed = (datetime.now() - start_time).total_seconds()
                speed = current_count / elapsed if elapsed > 0 else 0
                
                if total_records > current_count:
                    remaining = total_records - current_count
                    eta_seconds = remaining / speed if speed > 0 else 0
                    eta_minutes = eta_seconds / 60
                    
                    logger.info(f"‚è±Ô∏è  –ü–û–¢–û–ß–ù–ò–ô –ü–†–û–ì–†–ï–°: {current_count}/{total_records} ({progress:.1f}%) | –®–≤–∏–¥–∫—ñ—Å—Ç—å: {speed:.1f} –∫–ª/—Å–µ–∫ | ETA: ~{eta_minutes:.1f} —Ö–≤")
                else:
                    logger.info(f"‚è±Ô∏è  –ü–û–¢–û–ß–ù–ò–ô –ü–†–û–ì–†–ï–°: {current_count}/{total_records} ({progress:.1f}%) | –®–≤–∏–¥–∫—ñ—Å—Ç—å: {speed:.1f} –∫–ª/—Å–µ–∫")
                    
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ–≥—Ä–µ—Å—É: {e}")
            break

def process_page_range_export(args):
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ (–µ–∫—Å–ø–æ—Ä—Ç)
    """
    start_page, end_page, api_key, proxy_config, process_id, total_records, global_counter, lock = args
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É
    logger = logging.getLogger(f"Process-{process_id}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫—Å–ø–æ—Ä—Ç–µ—Ä –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É
    exporter = KeyCRMClientExporter(api_key, proxy_config)
    
    logger.info(f"ÔøΩ –ü—Ä–æ—Ü–µ—Å {process_id}: —Å—Ç–∞—Ä—Ç –µ–∫—Å–ø–æ—Ä—Ç—É —Å—Ç–æ—Ä—ñ–Ω–æ–∫ {start_page}-{end_page} (–≤—Å—å–æ–≥–æ {end_page - start_page + 1} —Å—Ç–æ—Ä—ñ–Ω–æ–∫)")
    
    exported_clients = []
    total_processed = 0
    
    # –õ–æ–∫–∞–ª—å–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Ü—å–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É
    local_client_count = 0
    
    try:
        for page in range(start_page, end_page + 1):
            try:
                # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                pages_done = page - start_page + 1
                pages_total = end_page - start_page + 1
                if pages_done % 10 == 1:  # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–∂–Ω—É 10-—Ç—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
                    progress_percent = (pages_done / pages_total) * 100
                    logger.info(f"üìÑ P{process_id}: –µ–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É {page} ({pages_done}/{pages_total}, {progress_percent:.1f}%)")
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
                response = exporter.make_request(f"/buyer?page={page}&limit=50")
                
                if response is None:
                    logger.warning(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {page} –≤ –ø—Ä–æ—Ü–µ—Å—ñ {process_id}")
                    continue
                
                buyers = response.get('data', [])
                
                if not buyers:
                    logger.info(f"‚ùå –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page} –ø–æ—Ä–æ–∂–Ω—è –≤ –ø—Ä–æ—Ü–µ—Å—ñ {process_id}")
                    continue
                
                # –õ–æ–≥—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —è–∫—â–æ –≤–æ–Ω–∞ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó
                if len(buyers) != 50:
                    logger.info(f"üìÑ P{process_id}: —Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page} –º—ñ—Å—Ç–∏—Ç—å {len(buyers)} –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å 50)")
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤
                for buyer in buyers:
                    local_client_count += 1
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫
                    with lock:
                        global_counter.value += 1
                        current_global_count = global_counter.value
                    
                    client_data = extract_client_data(buyer)
                    exported_clients.append(client_data)
                    
                    # –õ–æ–≥—É—î–º–æ –∫–æ–∂–Ω–æ–≥–æ 1000-–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –ì–õ–û–ë–ê–õ–¨–ù–û
                    if current_global_count % 1000 == 0:
                        global_progress = (current_global_count / total_records) * 100 if total_records > 0 else 0
                        logger.info(f"üåç –ó–ê–ì–ê–õ–¨–ù–ò–ô –ü–†–û–ì–†–ï–°: {current_global_count}/{total_records} –∫–ª—ñ—î–Ω—Ç—ñ–≤ ({global_progress:.1f}%) [P{process_id}: {local_client_count} –ª–æ–∫–∞–ª—å–Ω–æ]")
                
                total_processed += len(buyers)
                
                # –õ–æ–≥—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω—ñ 10 —Å—Ç–æ—Ä—ñ–Ω–æ–∫
                if page % 10 == 0:
                    pages_done = page - start_page + 1
                    pages_total = end_page - start_page + 1
                    progress_percent = (pages_done / pages_total) * 100
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –≥–ª–æ–±–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
                    with lock:
                        current_global_count = global_counter.value
                    global_progress = (current_global_count / total_records) * 100 if total_records > 0 else 0
                    
                    logger.info(f"üìä P{process_id}: —Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page}/{end_page} ({progress_percent:.1f}%), –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {local_client_count} –∫–ª—ñ—î–Ω—Ç—ñ–≤ –≤ —Ü—å–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ. –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å: {current_global_count}/{total_records} ({global_progress:.1f}%)")
                
            except Exception as e:
                logger.error(f"‚ùå P{process_id}: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {page}: {e}")
                
                # –Ø–∫—â–æ —Ü–µ –ø—Ä–æ–∫—Å—ñ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É—î–º–æ –±–µ–∑ –ø—Ä–æ–∫—Å—ñ
                if "ProxyError" in str(e) or "Connection refused" in str(e):
                    logger.warning(f"üîÑ P{process_id}: –ü—Ä–æ–∫—Å—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å–ø—Ä–æ–±—É—î–º–æ –±–µ–∑ –ø—Ä–æ–∫—Å—ñ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {page}")
                    try:
                        # –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –ø—Ä–æ–∫—Å—ñ
                        exporter.proxy_enabled = False
                        exporter.rate_limit_delay = 0.3
                        
                        # –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –±–µ–∑ –ø—Ä–æ–∫—Å—ñ
                        response = exporter.make_request(f"/buyer?page={page}&limit=50")
                        
                        if response and response.get('data'):
                            logger.info(f"‚úÖ P{process_id}: –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É {page} –±–µ–∑ –ø—Ä–æ–∫—Å—ñ")
                            buyers = response.get('data', [])
                            for buyer in buyers:
                                local_client_count += 1
                                
                                # –û–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫
                                with lock:
                                    global_counter.value += 1
                                    current_global_count = global_counter.value
                                
                                client_data = extract_client_data(buyer)
                                exported_clients.append(client_data)
                            total_processed += len(buyers)
                        
                        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–∫—Å—ñ
                        exporter.proxy_enabled = proxy_config is not None
                        exporter.rate_limit_delay = 0.3
                        
                    except Exception as fallback_error:
                        logger.error(f"‚ùå P{process_id}: –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—ñ—Ç—å –±–µ–∑ –ø—Ä–æ–∫—Å—ñ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {page}: {fallback_error}")
                
                continue
    
    except Exception as e:
        logger.error(f"‚ùå P{process_id}: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    
    pages_processed = end_page - start_page + 1
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞
    with lock:
        final_global_count = global_counter.value
    
    logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å {process_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {pages_processed} —Å—Ç–æ—Ä—ñ–Ω–æ–∫, {len(exported_clients)} –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ —Ü—å–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É. –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å: {final_global_count}/{total_records}")
    
    return {
        'process_id': process_id,
        'start_page': start_page,
        'end_page': end_page,
        'exported_clients': exported_clients,
        'total_processed': total_processed
    }

def export_all_clients_multiprocess(exporter, num_processes=10, test_mode=False):
    """
    –ë–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–∏–π –µ–∫—Å–ø–æ—Ä—Ç –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
    """
    logger.info("=" * 80)
    logger.info("üì§ –ë–ê–ì–ê–¢–û–ü–†–û–¶–ï–°–û–†–ù–ò–ô –ï–ö–°–ü–û–†–¢ –ö–õ–Ü–Ñ–ù–¢–Ü–í –ó KEYCRM")
    logger.info("=" * 80)
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        total_pages, total_records = exporter.get_total_pages(limit=50)
        
        if total_pages == 0:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
            return []
        
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ –æ–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 5 —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        if test_mode:
            total_pages = min(5, total_pages)
            logger.info(f"üß™ –¢–ï–°–¢–û–í–ò–ô –†–ï–ñ–ò–ú: –µ–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ç—ñ–ª—å–∫–∏ {total_pages} —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
        
        logger.info(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫: {total_pages}")
        logger.info(f"üîÑ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—ñ–≤: {num_processes}")
        
        # –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –º—ñ–∂ –ø—Ä–æ—Ü–µ—Å–∞–º–∏
        pages_per_process = math.ceil(total_pages / num_processes)
        process_ranges = []
        
        for i in range(num_processes):
            start_page = i * pages_per_process + 1
            end_page = min((i + 1) * pages_per_process, total_pages)
            
            if start_page <= total_pages:
                process_ranges.append((start_page, end_page, i + 1))
        
        logger.info("üìã –†–æ–∑–ø–æ–¥—ñ–ª —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –º—ñ–∂ –ø—Ä–æ—Ü–µ—Å–∞–º–∏:")
        for start_page, end_page, process_id in process_ranges:
            logger.info(f"   –ü—Ä–æ—Ü–µ—Å {process_id}: —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {start_page}-{end_page} ({end_page-start_page+1} —Å—Ç–æ—Ä—ñ–Ω–æ–∫)")
        
        # –ì–æ—Ç—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—ñ–≤ –∑ —Å–ø—ñ–ª—å–Ω–∏–º –ª—ñ—á–∏–ª—å–Ω–∏–∫–æ–º
        manager = mp.Manager()
        global_counter = manager.Value('i', 0)  # –°–ø—ñ–ª—å–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
        lock = manager.Lock()  # –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
        
        process_args = [
            (start_page, end_page, exporter.api_key, exporter.proxy_config, process_id, total_records, global_counter, lock)
            for start_page, end_page, process_id in process_ranges
        ]
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–∏–π –µ–∫—Å–ø–æ—Ä—Ç
        start_time = datetime.now()
        last_progress_time = start_time
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ {len(process_args)} –ø—Ä–æ—Ü–µ—Å—ñ–≤...")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—É
        stop_monitor = threading.Event()
        monitor_thread = threading.Thread(
            target=progress_monitor, 
            args=(global_counter, lock, total_records, start_time, stop_monitor)
        )
        monitor_thread.daemon = True
        monitor_thread.start()
        
        all_clients = []
        total_exported = 0
        completed_processes = 0
        
        with ProcessPoolExecutor(max_workers=num_processes) as executor:
            # –ü–æ–¥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
            future_to_process = {
                executor.submit(process_page_range_export, args): args[4]  # process_id
                for args in process_args
            }
            
            # –ó–±–∏—Ä–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            for future in as_completed(future_to_process):
                process_id = future_to_process[future]
                
                try:
                    result = future.result()
                    
                    # –û–±'—î–¥–Ω—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                    all_clients.extend(result['exported_clients'])
                    total_exported += result['total_processed']
                    completed_processes += 1
                    
                    # –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
                    overall_progress = (completed_processes / len(process_args)) * 100
                    total_clients_so_far = len(all_clients)
                    client_progress = (total_clients_so_far / total_records) * 100 if total_records > 0 else 0
                    logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å {result['process_id']} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É (+{len(result['exported_clients'])} –∫–ª—ñ—î–Ω—Ç—ñ–≤). –ü—Ä–æ—Ü–µ—Å—ñ–≤: {completed_processes}/{len(process_args)} ({overall_progress:.1f}%), –∫–ª—ñ—î–Ω—Ç—ñ–≤: {total_clients_so_far}/{total_records} ({client_progress:.1f}%)")
                    
                except Exception as e:
                    completed_processes += 1
                    overall_progress = (completed_processes / len(process_args)) * 100
                    logger.error(f"‚ùå –ü—Ä–æ—Ü–µ—Å {process_id} –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é: {e}. –ü—Ä–æ–≥—Ä–µ—Å: {completed_processes}/{len(process_args)} ({overall_progress:.1f}%)")
        
        end_time = datetime.now()
        execution_time = (end_time - start_time).total_seconds()
        
        # –ó—É–ø–∏–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—É
        stop_monitor.set()
        monitor_thread.join(timeout=1)
        
        # –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("=" * 80)
        logger.info("–†–ï–ó–£–õ–¨–¢–ê–¢–ò –ë–ê–ì–ê–¢–û–ü–†–û–¶–ï–°–û–†–ù–û–ì–û –ï–ö–°–ü–û–†–¢–£:")
        logger.info(f"–ü—Ä–æ—Ü–µ—Å—ñ–≤ –∑–∞–ø—É—â–µ–Ω–æ: {len(process_args)}")
        logger.info(f"–°—Ç–æ—Ä—ñ–Ω–æ–∫ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {total_pages}")
        logger.info(f"–ö–ª—ñ—î–Ω—Ç—ñ–≤ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ: {len(all_clients)}")
        logger.info(f"–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
        if len(all_clients) > 0:
            logger.info(f"–®–≤–∏–¥–∫—ñ—Å—Ç—å: {len(all_clients)/execution_time:.1f} –∫–ª—ñ—î–Ω—Ç—ñ–≤/—Å–µ–∫")
        logger.info("=" * 80)
        
        return all_clients
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –±–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–æ–≥–æ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}")
        return []

def save_clients_to_csv(clients_data, filename=None):
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ —É CSV —Ñ–∞–π–ª"""
    if not filename:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"keycrm_clients_export_{timestamp}.csv"
    
    # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ —Ñ–∞–π–ª –º–∞—î —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è .csv
    if not filename.endswith('.csv'):
        filename += '.csv'
    
    try:
        with open(filename, 'w', encoding='utf-8', newline='') as f:
            writer = csv.writer(f)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow([
                'ID –∫–ª—ñ—î–Ω—Ç–∞',
                '–Ü–º\'—è',
                '–ü—Ä—ñ–∑–≤–∏—â–µ',
                '–ü–æ–≤–Ω–µ —ñ–º\'—è',
                'Email',
                '–¢–µ–ª–µ—Ñ–æ–Ω',
                '–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å (‚Ç¥)',
                '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å',
                '–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'
            ])
            
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∑–∞–≥–∞–ª—å–Ω–æ—é —Å—É–º–æ—é –∑–∞–º–æ–≤–ª–µ–Ω—å (–≤—ñ–¥ –Ω–∞–π–±—ñ–ª—å—à–æ—ó –¥–æ –Ω–∞–π–º–µ–Ω—à–æ—ó)
            sorted_clients = sorted(
                clients_data, 
                key=lambda x: x.get('orders_sum', 0), 
                reverse=True
            )
            
            # –ó–∞–ø–∏—Å—É—î–º–æ –¥–∞–Ω—ñ
            for client in sorted_clients:
                writer.writerow([
                    client.get('id', ''),
                    client.get('first_name', ''),
                    client.get('last_name', ''),
                    client.get('full_name', ''),
                    client.get('email', ''),
                    client.get('phone', ''),
                    f"{client.get('orders_sum', 0):.2f}",
                    client.get('orders_count', 0),
                    client.get('created_at', '')
                ])
        
        logger.info(f"üìÑ CSV —Ñ–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filename}")
        logger.info(f"üìä –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {len(clients_data)} –∫–ª—ñ—î–Ω—Ç—ñ–≤")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if clients_data:
            total_sum = sum(client.get('orders_sum', 0) for client in clients_data)
            total_orders = sum(client.get('orders_count', 0) for client in clients_data)
            clients_with_orders = len([c for c in clients_data if c.get('orders_sum', 0) > 0])
            
            logger.info(f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {total_sum:,.2f}‚Ç¥")
            logger.info(f"üì¶ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å: {total_orders:,}")
            logger.info(f"üõçÔ∏è –ö–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏: {clients_with_orders}/{len(clients_data)}")
            
            if clients_with_orders > 0:
                avg_order_value = total_sum / total_orders if total_orders > 0 else 0
                avg_sum_per_client = total_sum / clients_with_orders
                logger.info(f"üíµ –°–µ—Ä–µ–¥–Ω—è –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {avg_order_value:.2f}‚Ç¥")
                logger.info(f"üë§ –°–µ—Ä–µ–¥–Ω—è —Å—É–º–∞ –Ω–∞ –∫–ª—ñ—î–Ω—Ç–∞: {avg_sum_per_client:.2f}‚Ç¥")
        
        return filename
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è CSV —Ñ–∞–π–ª—É: {e}")
        return None

def load_config():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        return config
    except FileNotFoundError:
        return {
            "api_key": "M2IyOTFjNWM4ODA2OWU0NjU4ZDRkODAxZDVkMTQ4ZGNlMzUzYzc5NQ",
            "proxy": {
                "enabled": True,
                "host": "p.webshare.io",
                "port": 80,
                "username": "oxfwmgn-UA-rotate",
                "password": "drci27S4eayj"
            }
        }

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üì§ –ï–ö–°–ü–û–†–¢ –ö–õ–Ü–Ñ–ù–¢–Ü–í –ó KEYCRM –£ CSV")
    print("=" * 80)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    config = load_config()
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø—Ä–æ–∫—Å—ñ
    proxy_config = None
    if config.get('proxy', {}).get('enabled', False):
        proxy_config = config['proxy']
        print(f"üåê –ü—Ä–æ–∫—Å—ñ: {proxy_config['host']}:{proxy_config['port']}")
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—ñ–≤
    if proxy_config:
        num_processes = min(mp.cpu_count(), 5)  # –ú–∞–∫—Å–∏–º—É–º 5 –ø—Ä–æ—Ü–µ—Å—ñ–≤ –∑ –ø—Ä–æ–∫—Å—ñ
    else:
        num_processes = min(mp.cpu_count(), 2)  # –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–æ—Ü–µ—Å–∏ –±–µ–∑ –ø—Ä–æ–∫—Å—ñ
    print(f"üîÑ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—ñ–≤: {num_processes}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫—Å–ø–æ—Ä—Ç–µ—Ä
    exporter = KeyCRMClientExporter(
        api_key=config['api_key'],
        proxy_config=proxy_config
    )
    
    try:
        start_time = datetime.now()
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –±–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–∏–π –µ–∫—Å–ø–æ—Ä—Ç
        clients_data = export_all_clients_multiprocess(
            exporter=exporter,
            num_processes=num_processes,
            test_mode=False  # –í—Å—ñ –∫–ª—ñ—î–Ω—Ç–∏
        )
        
        end_time = datetime.now()
        execution_time = (end_time - start_time).total_seconds()
        
        if clients_data:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É CSV —Ñ–∞–π–ª
            csv_filename = save_clients_to_csv(clients_data)
            
            if csv_filename:
                print(f"\n‚úÖ –ï–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
                print(f"üìÑ –§–∞–π–ª: {csv_filename}")
                print(f"üë• –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤: {len(clients_data)}")
                print(f"‚è±Ô∏è  –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
                print(f"üöÄ –®–≤–∏–¥–∫—ñ—Å—Ç—å: {len(clients_data)/execution_time:.1f} –∫–ª—ñ—î–Ω—Ç—ñ–≤/—Å–µ–∫")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø-10 –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ —Å—É–º–æ—é –∑–∞–º–æ–≤–ª–µ–Ω—å
                top_clients = sorted(
                    [c for c in clients_data if c.get('orders_sum', 0) > 0],
                    key=lambda x: x.get('orders_sum', 0),
                    reverse=True
                )[:10]
                
                if top_clients:
                    print(f"\nüèÜ –¢–û–ü-{len(top_clients)} –ö–õ–Ü–Ñ–ù–¢–Ü–í –ó–ê –°–£–ú–û–Æ –ó–ê–ú–û–í–õ–ï–ù–¨:")
                    print("-" * 80)
                    for i, client in enumerate(top_clients, 1):
                        name = client.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')
                        orders_sum = client.get('orders_sum', 0)
                        orders_count = client.get('orders_count', 0)
                        print(f"{i:2d}. {name:<30} {orders_sum:>10.2f}‚Ç¥ ({orders_count} –∑–∞–º–æ–≤–ª–µ–Ω—å)")
            else:
                print("\n‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É")
        else:
            print("\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤")
        
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è multiprocessing
    mp.set_start_method('spawn', force=True)
    main()
