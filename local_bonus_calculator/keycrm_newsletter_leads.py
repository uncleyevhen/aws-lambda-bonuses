#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ª—ñ–¥–∞–º–∏ –≤ –≤–æ—Ä–æ–Ω—Ü—ñ "–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å" KeyCRM
–î–æ–¥–∞—î –Ω–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –¥–æ –≤–æ—Ä–æ–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
"""

import requests
import json
import time
from datetime import datetime
import logging
from concurrent.futures import ProcessPoolExecutor, as_completed
import multiprocessing as mp
import math
import csv

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(processName)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('newsletter_leads_management.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class KeyCRMNewsletterManager:
    def __init__(self, api_key, proxy_config=None, auto_delete_duplicates=True, duplicate_status_id=257):
        self.api_key = api_key
        self.base_url = "https://openapi.keycrm.app/v1"
        self.newsletter_funnel_id = 15  # –í–æ—Ä–æ–Ω–∫–∞ "–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"
        self.auto_delete_duplicates = auto_delete_duplicates
        self.duplicate_status_id = duplicate_status_id  # –°—Ç–∞—Ç—É—Å –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Accept": "application/json",
            "Content-Type": "application/json; charset=utf-8"
        }
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–æ–∫—Å—ñ
        self.proxy_config = proxy_config
        self.proxy_enabled = proxy_config is not None
        
        if self.proxy_enabled and proxy_config:
            logger.info(f"üåê –£–≤—ñ–º–∫–Ω–µ–Ω–æ –ø—Ä–æ–∫—Å—ñ: {proxy_config.get('host', 'unknown')}:{proxy_config.get('port', 'unknown')}")
            self.rate_limit_delay = 0.3  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        else:
            logger.info("Proxy not configured")
            self.rate_limit_delay = 0.3
    
    def make_request(self, url, method="GET", data=None, max_retries=5):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø—Ä–æ–∫—Å—ñ"""
        full_url = f"{self.base_url}{url}"
        
        for attempt in range(max_retries):
            response = None
            session = requests.Session()
            
            try:
                # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø—Ä–æ–∫—Å—ñ —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ
                if self.proxy_enabled and self.proxy_config:
                    proxy_url = f"http://{self.proxy_config['username']}:{self.proxy_config['password']}@{self.proxy_config['host']}:{self.proxy_config['port']}"
                    session.proxies = {
                        'http': proxy_url,
                        'https': proxy_url
                    }
                
                # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
                if method == "GET":
                    response = session.get(full_url, headers=self.headers, timeout=20)
                elif method == "POST":
                    response = session.post(
                        full_url, 
                        headers=self.headers, 
                        json=data, 
                        timeout=20
                    )
                elif method == "PUT":
                    response = session.put(
                        full_url, 
                        headers=self.headers, 
                        json=data, 
                        timeout=20
                    )
                elif method == "DELETE":
                    response = session.delete(full_url, headers=self.headers, timeout=20)
                else:
                    raise ValueError(f"–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥: {method}")
                
                if response is None:
                    raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞")
                
                response.raise_for_status()
                
                # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ø–∞—É–∑–∞
                time.sleep(self.rate_limit_delay)
                
                # –î–ª—è DELETE –∑–∞–ø–∏—Ç—ñ–≤ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                if method == "DELETE":
                    if response.status_code == 204:  # No Content - —É—Å–ø—ñ—à–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                        return {"success": True, "message": "Card deleted successfully"}
                    try:
                        return response.json()
                    except:
                        return {"success": True, "status_code": response.status_code}
                else:
                    return response.json()
                
            except (requests.exceptions.ProxyError, 
                    requests.exceptions.ConnectTimeout,
                    requests.exceptions.ReadTimeout) as proxy_error:
                
                if attempt < max_retries - 1:
                    wait_time = 2 ** attempt  # –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–∫—Å—ñ –ø–æ–º–∏–ª–∫–∞ (—Å–ø—Ä–æ–±–∞ {attempt + 1}/{max_retries}): {proxy_error}. –ß–µ–∫–∞—î–º–æ {wait_time}—Å...")
                    time.sleep(wait_time)
                    continue
                else:
                    logger.error(f"‚ùå –ü—Ä–æ–∫—Å—ñ –ø–æ–º–∏–ª–∫–∞ –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–±: {proxy_error}")
                    raise
                    
            except requests.exceptions.HTTPError as http_error:
                if response and response.status_code == 429:  # Rate limit
                    wait_time = 60  # –ß–µ–∫–∞—î–º–æ —Ö–≤–∏–ª–∏–Ω—É
                    logger.warning(f"‚ö†Ô∏è Rate limit –¥–æ—Å—è–≥–Ω—É—Ç–æ. –ß–µ–∫–∞—î–º–æ {wait_time}—Å...")
                    time.sleep(wait_time)
                    continue
                elif response and response.status_code in [500, 502, 503, 504]:  # Server errors
                    if attempt < max_retries - 1:
                        wait_time = 2 ** attempt
                        logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ {response.status_code} (—Å–ø—Ä–æ–±–∞ {attempt + 1}/{max_retries}). –ß–µ–∫–∞—î–º–æ {wait_time}—Å...")
                        time.sleep(wait_time)
                        continue
                
                logger.error(f"HTTP error: {http_error}")
                if response:
                    logger.error(f"Server response: {response.text}")
                    logger.error(f"Response status: {response.status_code}")
                    logger.error(f"Response headers: {dict(response.headers)}")
                raise
                
            except Exception as e:
                if attempt < max_retries - 1:
                    wait_time = 1
                    logger.warning(f"Request error (attempt {attempt + 1}/{max_retries}): {e}. Waiting {wait_time}s...")
                    time.sleep(wait_time)
                    continue
                else:
                    logger.error(f"Error after {max_retries} attempts: {e}")
                    raise
            finally:
                session.close()
    
    def get_pipeline_cards(self, pipeline_id, page=1, limit=50):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫ –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –≤–æ—Ä–æ–Ω–∫–∏"""
        try:
            url = f"/pipelines/cards?page={page}&limit={limit}&filter[pipeline_id]={pipeline_id}&include=contact.client"
            response = self.make_request(url)
            return response
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫ –∑ –≤–æ—Ä–æ–Ω–∫–∏ {pipeline_id}: {e}")
            return None
    
    def get_all_pipeline_cards(self, pipeline_id, max_pages=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞—Ä—Ç–æ–∫ –∑ –≤–æ—Ä–æ–Ω–∫–∏"""
        logger.info(f"üîç –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏ –∑ –≤–æ—Ä–æ–Ω–∫–∏ {pipeline_id}...")
        if max_pages:
            logger.info(f"üß™ –¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º: –æ–±–º–µ–∂—É—î–º–æ –¥–æ {max_pages} —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
            
        all_cards = {}
        page = 1
        
        while True:
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö —É —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
                if max_pages and page > max_pages:
                    logger.info(f"üß™ –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É: {max_pages} —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
                    break
                    
                response = self.get_pipeline_cards(pipeline_id, page)
                if not response or not response.get('data'):
                    break
                
                cards = response.get('data', [])
                cards_with_client_id = 0
                cards_without_client_id = 0
                duplicates_found = 0
                
                for card in cards:
                    contact = card.get('contact')
                    if contact and contact.get('client_id'):
                        client_id = contact.get('client_id')
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –¥—É–±–ª—ñ–∫–∞—Ç
                        if client_id in all_cards:
                            duplicates_found += 1
                            existing_card = all_cards[client_id]
                            
                            # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –¥–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, —â–æ–± –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —è–∫—É –∫–∞—Ä—Ç–∫—É –≤–∏–¥–∞–ª–∏—Ç–∏
                            existing_created = existing_card.get('created_at', '')
                            new_created = card.get('created_at', '')
                            
                            logger.warning(f"üîÑ –î–£–ë–õ–Ü–ö–ê–¢ client_id {client_id}:")
                            logger.warning(f"   ‚îú‚îÄ –Ü—Å–Ω—É—é—á–∞ –∫–∞—Ä—Ç–∫–∞: ID {existing_card.get('id')}, title: '{existing_card.get('title', 'N/A')}', created: {existing_created}")
                            logger.warning(f"   ‚îî‚îÄ –ù–æ–≤–∞ –∫–∞—Ä—Ç–∫–∞: ID {card.get('id')}, title: '{card.get('title', 'N/A')}', created: {new_created}")
                            
                            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫—É –∫–∞—Ä—Ç–∫—É –ø–µ—Ä–µ–º—ñ—â—É–≤–∞—Ç–∏ –≤ —Å—Ç–∞—Ç—É—Å 257 (–∑–∞–ª–∏—à–∞—î–º–æ –Ω–æ–≤—ñ—à—É)
                            if new_created > existing_created:
                                # –ù–æ–≤–∞ –∫–∞—Ä—Ç–∫–∞ –Ω–æ–≤—ñ—à–∞ - –ø–µ—Ä–µ–º—ñ—â—É—î–º–æ —Å—Ç–∞—Ä—É –≤ —Å—Ç–∞—Ç—É—Å 257
                                card_to_move = existing_card
                                card_to_keep = card
                                logger.warning(f"   ‚îî‚îÄ ÔøΩÔ∏è –ü–ï–†–ï–ú–Ü–©–£–Ñ–ú–û –°–¢–ê–†–£ –∫–∞—Ä—Ç–∫—É ID {existing_card.get('id')} –≤ —Å—Ç–∞—Ç—É—Å 257")
                            else:
                                # –Ü—Å–Ω—É—é—á–∞ –∫–∞—Ä—Ç–∫–∞ –Ω–æ–≤—ñ—à–∞ –∞–±–æ –¥–∞—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ - –ø–µ—Ä–µ–º—ñ—â—É—î–º–æ –Ω–æ–≤—É –≤ —Å—Ç–∞—Ç—É—Å 257
                                card_to_move = card
                                card_to_keep = existing_card
                                logger.warning(f"   ‚îî‚îÄ ÔøΩÔ∏è –ü–ï–†–ï–ú–Ü–©–£–Ñ–ú–û –ù–û–í–£ –∫–∞—Ä—Ç–∫—É ID {card.get('id')} –≤ —Å—Ç–∞—Ç—É—Å 257")
                            
                            # –°–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç –≤ —Å—Ç–∞—Ç—É—Å 257
                            move_result = self.delete_pipeline_card(card_to_move.get('id'))
                            if move_result:
                                logger.info(f"   ‚úÖ –ö–∞—Ä—Ç–∫—É ID {card_to_move.get('id')} —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –≤ —Å—Ç–∞—Ç—É—Å 257")
                                # –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Ä—Ç–∫—É —â–æ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è
                                all_cards[client_id] = card_to_keep
                            else:
                                logger.error(f"   ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É ID {card_to_move.get('id')} –≤ —Å—Ç–∞—Ç—É—Å 257")
                                # –í —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è, –∑–∞–ª–∏—à–∞—î–º–æ —Ç—É —â–æ –±—É–ª–∞
                                if client_id not in all_cards:
                                    all_cards[client_id] = existing_card
                        else:
                            # –ù–æ–≤–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∞ –∫–∞—Ä—Ç–∫–∞
                            all_cards[client_id] = card
                        
                        cards_with_client_id += 1
                    else:
                        cards_without_client_id += 1
                        # –õ–æ–≥—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–æ –∫–∞—Ä—Ç–∫–∏ –±–µ–∑ client_id
                        card_id = card.get('id', 'unknown')
                        card_title = card.get('title', '–±–µ–∑ –Ω–∞–∑–≤–∏')
                        contact_info = "–Ω–µ–º–∞—î –∫–æ–Ω—Ç–∞–∫—Ç–∞" if not contact else f"–∫–æ–Ω—Ç–∞–∫—Ç –±–µ–∑ client_id (contact_id: {contact.get('id', 'unknown')})"
                        
                        logger.warning(f"‚ö†Ô∏è –ö–ê–†–¢–ö–ê –ë–ï–ó CLIENT_ID:")
                        logger.warning(f"   ‚îú‚îÄ Card ID: {card_id}")
                        logger.warning(f"   ‚îú‚îÄ Title: '{card_title}'")
                        logger.warning(f"   ‚îú‚îÄ Contact: {contact_info}")
                        logger.warning(f"   ‚îî‚îÄ Created: {card.get('created_at', 'unknown')}")
                
                logger.info(f"üìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page}: –æ—Ç—Ä–∏–º–∞–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ–∫ –∑–∞–≥–∞–ª–æ–º")
                logger.info(f"   ‚îú‚îÄ –ó client_id: {cards_with_client_id}, –±–µ–∑ client_id: {cards_without_client_id}")
                logger.info(f"   ‚îú‚îÄ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: {duplicates_found}")
                logger.info(f"   ‚îî‚îÄ –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–æ: {len(all_cards)}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —â–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                if page >= response.get('last_page', 1):
                    break
                
                page += 1
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {page}: {e}")
                break
        
        logger.info(f"‚úÖ –ó–∞–≥–∞–ª–æ–º –æ—Ç—Ä–∏–º–∞–Ω–æ {len(all_cards)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫ –∑ –≤–æ—Ä–æ–Ω–∫–∏ {pipeline_id}")
        
        return all_cards

    def get_all_pipeline_cards_multiprocess(self, pipeline_id, max_pages=None, num_processes=3):
        """–ú—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞—Ä—Ç–æ–∫ –∑ –≤–æ—Ä–æ–Ω–∫–∏"""
        logger.info(f"üîç –ú—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫ –∑ –≤–æ—Ä–æ–Ω–∫–∏ {pipeline_id}...")
        
        # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        first_response = self.get_pipeline_cards(pipeline_id, 1)
        if not first_response:
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–∞—Ä—Ç–æ–∫")
            return {}
        
        total_pages = first_response.get('last_page', 1)
        total_records = first_response.get('total', 0)
        current_page = first_response.get('current_page', 1)
        per_page = first_response.get('per_page', 50)
        
        logger.info(f"üìä API —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–æ—Ä–æ–Ω–∫—É {pipeline_id}:")
        logger.info(f"   ‚îî‚îÄ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫: {total_records}")
        logger.info(f"   ‚îî‚îÄ –ö–∞—Ä—Ç–æ–∫ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ: {per_page}")
        logger.info(f"   ‚îî‚îÄ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫: {total_pages}")
        logger.info(f"   ‚îî‚îÄ –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞: {current_page}")
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
        first_page_cards = first_response.get('data', [])
        cards_with_client_id = sum(1 for card in first_page_cards if card.get('contact', {}).get('client_id'))
        cards_without_client_id = len(first_page_cards) - cards_with_client_id
        
        logger.info(f"üìÑ –ü–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞: {len(first_page_cards)} –∫–∞—Ä—Ç–æ–∫")
        logger.info(f"   ‚îî‚îÄ –ó client_id: {cards_with_client_id}")
        logger.info(f"   ‚îî‚îÄ –ë–µ–∑ client_id: {cards_without_client_id}")
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è —è–∫—â–æ —î
        if max_pages:
            total_pages = min(max_pages, total_pages)
            logger.info(f"üß™ –¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º: –æ–±–º–µ–∂—É—î–º–æ –¥–æ {total_pages} —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
        
        logger.info(f"üìä –ë—É–¥–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ —Å—Ç–æ—Ä—ñ–Ω–æ–∫: {total_pages}")
        
        if total_pages <= 1:
            # –Ø–∫—â–æ —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä—à–æ–≥–æ –∑–∞–ø–∏—Ç—É
            all_cards = {}
            for card in first_response.get('data', []):
                contact = card.get('contact')
                if contact and contact.get('client_id'):
                    client_id = contact.get('client_id')
                    all_cards[client_id] = card
            return all_cards
        
        # –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –º—ñ–∂ –ø—Ä–æ—Ü–µ—Å–∞–º–∏
        pages_per_process = math.ceil(total_pages / num_processes)
        process_ranges = []
        
        for i in range(num_processes):
            start_page = i * pages_per_process + 1
            end_page = min((i + 1) * pages_per_process, total_pages)
            
            if start_page <= total_pages:
                process_ranges.append((start_page, end_page, i + 1))
        
        logger.info(f"üìã –†–æ–∑–ø–æ–¥—ñ–ª —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∫–∞—Ä—Ç–æ–∫ –º—ñ–∂ {len(process_ranges)} –ø—Ä–æ—Ü–µ—Å–∞–º–∏:")
        for start_page, end_page, process_id in process_ranges:
            logger.info(f"   –ü—Ä–æ—Ü–µ—Å {process_id}: —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {start_page}-{end_page} ({end_page-start_page+1} —Å—Ç–æ—Ä—ñ–Ω–æ–∫)")
        
        # –ì–æ—Ç—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—ñ–≤
        process_args = [
            (start_page, end_page, self.api_key, self.proxy_config, 
             process_id, pipeline_id)
            for start_page, end_page, process_id in process_ranges
        ]
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫
        start_time = datetime.now()
        all_cards = {}
        
        with ProcessPoolExecutor(max_workers=num_processes) as executor:
            # –ü–æ–¥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
            future_to_process = {
                executor.submit(get_pipeline_cards_range, args): args[4]  # process_id
                for args in process_args
            }
            
        end_time = datetime.now()
        execution_time = (end_time - start_time).total_seconds()
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –º—ñ–∂ –ø—Ä–æ—Ü–µ—Å–∞–º–∏
        total_duplicates = 0
        total_without_client_id = 0
        cards_to_delete = []  # –ö–∞—Ä—Ç–∫–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–¥—É–±–ª—ñ–∫–∞—Ç–∏ –º—ñ–∂ –ø—Ä–æ—Ü–µ—Å–∞–º–∏)
        
        for future in as_completed(future_to_process):
            process_id = future_to_process[future]
            
            try:
                result = future.result()
                cards_from_process = result.get('cards', {})
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –º—ñ–∂ –ø—Ä–æ—Ü–µ—Å–∞–º–∏
                for client_id, new_card in cards_from_process.items():
                    if client_id in all_cards:
                        # –ó–Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç –º—ñ–∂ –ø—Ä–æ—Ü–µ—Å–∞–º–∏
                        existing_card = all_cards[client_id]
                        total_duplicates += 1
                        
                        # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –¥–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
                        existing_created = existing_card.get('created_at', '')
                        new_created = new_card.get('created_at', '')
                        
                        logger.warning(f"üîÑ –î–£–ë–õ–Ü–ö–ê–¢ –ú–Ü–ñ –ü–†–û–¶–ï–°–ê–ú–ò client_id {client_id}:")
                        logger.warning(f"   ‚îú‚îÄ –Ü—Å–Ω—É—é—á–∞ –∫–∞—Ä—Ç–∫–∞: ID {existing_card.get('id')}, created: {existing_created}")
                        logger.warning(f"   ‚îî‚îÄ –ù–æ–≤–∞ –∫–∞—Ä—Ç–∫–∞: ID {new_card.get('id')}, created: {new_created}")
                        
                        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫—É –∫–∞—Ä—Ç–∫—É –≤–∏–¥–∞–ª–∏—Ç–∏ (–∑–∞–ª–∏—à–∞—î–º–æ –Ω–æ–≤—ñ—à—É)
                        if new_created > existing_created:
                            # –ù–æ–≤–∞ –∫–∞—Ä—Ç–∫–∞ –Ω–æ–≤—ñ—à–∞ - –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É
                            cards_to_delete.append(existing_card.get('id'))
                            all_cards[client_id] = new_card
                            logger.warning(f"   ‚îî‚îÄ üóëÔ∏è –ü–û–ó–ù–ê–ß–ï–ù–û –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä—É –∫–∞—Ä—Ç–∫—É ID {existing_card.get('id')}")
                        else:
                            # –Ü—Å–Ω—É—é—á–∞ –∫–∞—Ä—Ç–∫–∞ –Ω–æ–≤—ñ—à–∞ - –≤–∏–¥–∞–ª—è—î–º–æ –Ω–æ–≤—É
                            cards_to_delete.append(new_card.get('id'))
                            logger.warning(f"   ‚îî‚îÄ üóëÔ∏è –ü–û–ó–ù–ê–ß–ï–ù–û –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ–≤—É –∫–∞—Ä—Ç–∫—É ID {new_card.get('id')}")
                    else:
                        # –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –∫–∞—Ä—Ç–∫–∞
                        all_cards[client_id] = new_card
                
                logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å {process_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –æ—Ç—Ä–∏–º–∞–Ω–æ {len(cards_from_process)} –∫–∞—Ä—Ç–æ–∫")
                
            except Exception as e:
                logger.error(f"‚ùå –ü—Ä–æ—Ü–µ—Å {process_id} –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é: {e}")
        
        # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ –∞–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è
        if self.auto_delete_duplicates and cards_to_delete:
            logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ {len(cards_to_delete)} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –º—ñ–∂ –ø—Ä–æ—Ü–µ—Å–∞–º–∏...")
            deleted_count = 0
            
            for card_id in cards_to_delete:
                try:
                    result = self.delete_pipeline_card(card_id)
                    if result:
                        deleted_count += 1
                        logger.info(f"   ‚úÖ –ö–∞—Ä—Ç–∫—É ID {card_id} –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –≤ —Å—Ç–∞—Ç—É—Å {self.duplicate_status_id}")
                    else:
                        logger.error(f"   ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É ID {card_id}")
                except Exception as e:
                    logger.error(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ ID {card_id}: {e}")
            
            logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ {deleted_count}/{len(cards_to_delete)} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤")
        
        logger.info(f"‚úÖ –ú—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
        logger.info(f"   –ó–∞–≥–∞–ª–æ–º –æ—Ç—Ä–∏–º–∞–Ω–æ: {len(all_cards)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫")
        logger.info(f"   –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –º—ñ–∂ –ø—Ä–æ—Ü–µ—Å–∞–º–∏: {total_duplicates}")
        logger.info(f"   –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        return all_cards
    
    def get_total_customers_pages(self, limit=50):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
        try:
            response = self.make_request(f"/buyer?page=1&limit={limit}")
            
            if response is None:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API")
                return 0, 0
            
            total_records = response.get('total', 0)
            total_pages = response.get('last_page', 0)
            
            logger.info(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤: {total_records}")
            logger.info(f"üìÑ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫ (limit={limit}): {total_pages}")
            
            return total_pages, total_records
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫: {e}")
            return 0, 0
    
    def get_customers_page(self, page, limit=50):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
        try:
            url = f"/buyer?page={page}&limit={limit}"
            response = self.make_request(url)
            return response.get('data', []) if response else []
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {page}: {e}")
            return []
    
    def find_or_create_contact_for_buyer(self, buyer_id, buyer_info=None):
        """–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø—Ü—è"""
        try:
            # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –∑ client_id = buyer_id
            # –¶–µ —Å–∫–ª–∞–¥–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ —á–µ—Ä–µ–∑ API, —Ç–æ–º—É —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç
            # —ñ KeyCRM —Å–∞–º –∑—Ä–æ–±–∏—Ç—å –∑–≤'—è–∑–æ–∫ —è–∫—â–æ –ø–æ–∫—É–ø–µ—Ü—å –≤–∂–µ —ñ—Å–Ω—É—î
            
            if not buyer_info:
                # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–∫—É–ø—Ü—è
                buyer_response = self.make_request(f"/buyer/{buyer_id}")
                if not buyer_response:
                    return None
                buyer_info = buyer_response
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–∫—É–ø—Ü—è
            contact_data = {
                "client_id": buyer_id,
                "full_name": buyer_info.get('full_name', ''),
            }
            
            # –î–æ–¥–∞—î–º–æ email —è–∫—â–æ —î
            emails = buyer_info.get('email', [])
            if emails and len(emails) > 0:
                contact_data["email"] = emails[0]
            
            # –î–æ–¥–∞—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω —è–∫—â–æ —î
            phones = buyer_info.get('phone', [])
            if phones and len(phones) > 0:
                contact_data["phone"] = phones[0]
            
            # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
            contact_endpoints = ["/contacts", "/contact", "/buyer/contact", "/crm/contact"]
            
            for endpoint in contact_endpoints:
                try:
                    logger.debug(f"–ü—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ {endpoint}")
                    response = self.make_request(endpoint, method="POST", data=contact_data)
                    if response:
                        logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ {endpoint}")
                        return response
                except Exception as e:
                    logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –∑ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–æ–º {endpoint}: {e}")
                    continue
            
            logger.error(f"–í—Å—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –ø–æ–∫—É–ø—Ü—è {buyer_id}")
            return None
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø—Ü—è {buyer_id}: {e}")
            return None

    def move_card_to_status(self, card_id, status_id):
        """–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ –≤ —ñ–Ω—à–∏–π —Å—Ç–∞—Ç—É—Å"""
        try:
            card_data = {"status_id": status_id}
            response = self.make_request(f"/pipelines/cards/{card_id}", method="PUT", data=card_data)
            return response
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ {card_id} –≤ —Å—Ç–∞—Ç—É—Å {status_id}: {e}")
            return None

    def delete_pipeline_card(self, card_id):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ –∑ –≤–æ—Ä–æ–Ω–∫–∏ (–ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≤ —Å—Ç–∞—Ç—É—Å –¥—É–±–ª—ñ–∫–∞—Ç—É)"""
        try:
            # –ó–∞–º—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º—ñ—â—É—î–º–æ –≤ —Å—Ç–∞—Ç—É—Å –¥—É–±–ª—ñ–∫–∞—Ç—É
            response = self.move_card_to_status(card_id, self.duplicate_status_id)
            if response:
                logger.info(f"‚úÖ –ö–∞—Ä—Ç–∫—É ID {card_id} –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –≤ —Å—Ç–∞—Ç—É—Å {self.duplicate_status_id} (–¥—É–±–ª—ñ–∫–∞—Ç)")
                return {"success": True, "message": f"Card moved to status {self.duplicate_status_id}"}
            return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ {card_id} –≤ —Å—Ç–∞—Ç—É—Å {self.duplicate_status_id}: {e}")
            return None

    def create_pipeline_card(self, buyer_id, pipeline_id, status_id=241, buyer_info=None):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–∞—Ä—Ç–∫–∏ –≤ –≤–æ—Ä–æ–Ω—Ü—ñ"""
        try:
            # –ó–≥—ñ–¥–Ω–æ –∑ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç —è–∫ –æ–±'—î–∫—Ç
            buyer_name = buyer_info.get('full_name', f'Client {buyer_id}') if buyer_info else f'Client {buyer_id}'
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç–∫—É –∑–≥—ñ–¥–Ω–æ –∑ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é
            card_data = {
                "title": f"{buyer_name}",
                "pipeline_id": pipeline_id,
                "contact": {
                    "full_name": buyer_name
                }
            }
            
            # –î–æ–¥–∞—î–º–æ client_id —è–∫—â–æ —Ü–µ –Ω–µ —Ç–µ—Å—Ç–æ–≤–∏–π ID
            if not str(buyer_id).startswith('test_'):
                card_data["contact"]["client_id"] = buyer_id
            
            # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å (–∑–∞–≤–∂–¥–∏)
            card_data["status_id"] = status_id
            
            # –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–Ω—Ç–∞–∫—Ç —è–∫—â–æ —î
            if buyer_info:
                if buyer_info.get('email'):
                    # email –º–æ–∂–µ –±—É—Ç–∏ —Å–ø–∏—Å–∫–æ–º, –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π
                    email = buyer_info['email']
                    if isinstance(email, list) and len(email) > 0:
                        card_data["contact"]["email"] = email[0]
                    elif isinstance(email, str):
                        card_data["contact"]["email"] = email
                        
                if buyer_info.get('phone'):
                    # phone –º–æ–∂–µ –±—É—Ç–∏ —Å–ø–∏—Å–∫–æ–º, –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π
                    phone = buyer_info['phone']
                    if isinstance(phone, list) and len(phone) > 0:
                        card_data["contact"]["phone"] = phone[0]
                    elif isinstance(phone, str):
                        card_data["contact"]["phone"] = phone
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç–∫—É
            logger.info(f"Sending card data: {json.dumps(card_data, ensure_ascii=False, indent=2)}")
            response = self.make_request("/pipelines/cards", method="POST", data=card_data)
            
            if response:
                logger.info(f"Card created successfully for client {buyer_id}")
                return response
            else:
                logger.warning(f"Failed to create card for client {buyer_id}")
                return None
                
        except Exception as e:
            logger.error(f"Error creating card for client {buyer_id}: {e}")
            return None

    def _create_card_with_contact(self, buyer_id, pipeline_id, status_id=None, buyer_info=None):
        """–†–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç"""
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –∑–Ω–∞—Ö–æ–¥–∏–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø–æ–∫—É–ø—Ü—è
            contact = self.find_or_create_contact_for_buyer(buyer_id, buyer_info)
            if not contact:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø–æ–∫—É–ø—Ü—è {buyer_id}")
                return None
            
            contact_id = contact.get('id')
            if not contact_id:
                logger.error(f"–ö–æ–Ω—Ç–∞–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ, –∞–ª–µ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ contact_id –¥–ª—è –ø–æ–∫—É–ø—Ü—è {buyer_id}")
                return None
            
            # –¢–µ–ø–µ—Ä —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç–∫—É
            card_data = {
                "contact_id": contact_id,
                "pipeline_id": pipeline_id
            }
            
            if status_id:
                card_data["status_id"] = status_id
                
            # –î–æ–¥–∞—î–º–æ –Ω–∞–∑–≤—É –∫–∞—Ä—Ç–∫–∏
            buyer_name = buyer_info.get('full_name', f'–ö–ª—ñ—î–Ω—Ç {buyer_id}') if buyer_info else f'–ö–ª—ñ—î–Ω—Ç {buyer_id}'
            card_data["title"] = f"–†–æ–∑—Å–∏–ª–∫–∞ - {buyer_name}"
            
            response = self.make_request("/pipelines/cards", method="POST", data=card_data)
            return response
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ {buyer_id}: {e}")
            return None


def get_pipeline_cards_range(args):
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫ –∑ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ
    """
    start_page, end_page, api_key, proxy_config, process_id, pipeline_id = args
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É
    logger = logging.getLogger(f"Cards-Process-{process_id}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É (–±–µ–∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ —É –ø—Ä–æ—Ü–µ—Å–∞—Ö)
    manager = KeyCRMNewsletterManager(api_key, proxy_config, auto_delete_duplicates=False)
    
    logger.info(f"üöÄ –ü—Ä–æ—Ü–µ—Å {process_id}: –æ—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ä—Ç–∫–∏ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ {start_page}-{end_page}")
    
    cards_collected = {}
    total_cards_processed = 0
    duplicates_found = 0  # –î–æ–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—ñ
    
    try:
        for page in range(start_page, end_page + 1):
            try:
                response = manager.get_pipeline_cards(pipeline_id, page)
                
                if not response or not response.get('data'):
                    logger.info(f"CP{process_id}: –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page} –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∞")
                    continue
                
                cards = response.get('data', [])
                if not cards:
                    logger.info(f"CP{process_id}: –î–æ—Å—è–≥–Ω—É—Ç–æ –∫—ñ–Ω—Ü—è —Å–ø–∏—Å–∫—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {page}")
                    break
                
                cards_with_client_id = 0
                cards_without_client_id = 0
                page_duplicates = 0  # –î—É–±–ª—ñ–∫–∞—Ç–∏ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–∞—Ä—Ç–∫–∏
                for card in cards:
                    contact = card.get('contact')
                    if contact and contact.get('client_id'):
                        client_id = contact.get('client_id')
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –¥—É–±–ª—ñ–∫–∞—Ç –≤ –º–µ–∂–∞—Ö –ø—Ä–æ—Ü–µ—Å—É
                        if client_id in cards_collected:
                            page_duplicates += 1
                            duplicates_found += 1  # –ó–∞–≥–∞–ª—å–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É
                            existing_card = cards_collected[client_id]
                            
                            # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –¥–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
                            existing_created = existing_card.get('created_at', '')
                            new_created = card.get('created_at', '')
                            
                            logger.warning(f"üîÑ CP{process_id} –î–£–ë–õ–Ü–ö–ê–¢ client_id {client_id}:")
                            logger.warning(f"   ‚îú‚îÄ –Ü—Å–Ω—É—é—á–∞ –∫–∞—Ä—Ç–∫–∞: ID {existing_card.get('id')}, title: '{existing_card.get('title', 'N/A')}', created: {existing_created}")
                            logger.warning(f"   ‚îî‚îÄ –ù–æ–≤–∞ –∫–∞—Ä—Ç–∫–∞: ID {card.get('id')}, title: '{card.get('title', 'N/A')}', created: {new_created}")
                            
                            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫—É –∫–∞—Ä—Ç–∫—É –∑–∞–ª–∏—à–∏—Ç–∏ (–Ω–æ–≤—ñ—à—É)
                            if new_created > existing_created:
                                # –ù–æ–≤–∞ –∫–∞—Ä—Ç–∫–∞ –Ω–æ–≤—ñ—à–∞ - –∑–∞–ª–∏—à–∞—î–º–æ —ó—ó
                                cards_collected[client_id] = card
                                logger.warning(f"   ‚îî‚îÄ üìù CP{process_id}: –ó–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ –Ω–æ–≤—ñ—à—É –∫–∞—Ä—Ç–∫—É ID {card.get('id')}")
                            else:
                                # –Ü—Å–Ω—É—é—á–∞ –∫–∞—Ä—Ç–∫–∞ –Ω–æ–≤—ñ—à–∞ - –∑–∞–ª–∏—à–∞—î–º–æ —ó—ó
                                logger.warning(f"   ‚îî‚îÄ üìù CP{process_id}: –ó–∞–ª–∏—à–µ–Ω–æ —ñ—Å–Ω—É—é—á—É –∫–∞—Ä—Ç–∫—É ID {existing_card.get('id')}")
                        else:
                            # –ù–æ–≤–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∞ –∫–∞—Ä—Ç–∫–∞
                            cards_collected[client_id] = card
                        
                        cards_with_client_id += 1
                    else:
                        cards_without_client_id += 1
                        # –õ–æ–≥—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–æ –∫–∞—Ä—Ç–∫–∏ –±–µ–∑ client_id
                        card_id = card.get('id', 'unknown')
                        card_title = card.get('title', '–±–µ–∑ –Ω–∞–∑–≤–∏')
                        contact_info = "–Ω–µ–º–∞—î –∫–æ–Ω—Ç–∞–∫—Ç–∞" if not contact else f"–∫–æ–Ω—Ç–∞–∫—Ç –±–µ–∑ client_id (contact_id: {contact.get('id', 'unknown')})"
                        
                        logger.warning(f"‚ö†Ô∏è CP{process_id} –ö–ê–†–¢–ö–ê –ë–ï–ó CLIENT_ID:")
                        logger.warning(f"   ‚îú‚îÄ Card ID: {card_id}")
                        logger.warning(f"   ‚îú‚îÄ Title: '{card_title}'")
                        logger.warning(f"   ‚îú‚îÄ Contact: {contact_info}")
                        logger.warning(f"   ‚îî‚îÄ Created: {card.get('created_at', 'unknown')}")
                
                # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                logger.info(f"üìÑ CP{process_id}: —Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page} - {len(cards)} –∫–∞—Ä—Ç–æ–∫ –∑–∞–≥–∞–ª–æ–º")
                logger.info(f"   ‚îú‚îÄ –ó client_id: {cards_with_client_id}, –±–µ–∑ client_id: {cards_without_client_id}")
                logger.info(f"   ‚îî‚îÄ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ: {page_duplicates}")
                
                # –õ–æ–≥—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω—ñ 5 —Å—Ç–æ—Ä—ñ–Ω–æ–∫
                if page % 5 == 0:
                    logger.info(f"üìä CP{process_id}: —Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page}/{end_page}, –æ–±—Ä–æ–±–ª–µ–Ω–æ {len(cards_collected)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫")
                
                # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                time.sleep(0.5)
                
            except Exception as e:
                logger.error(f"‚ùå CP{process_id}: –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {page}: {e}")
                time.sleep(2)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
                continue
    
    except Exception as e:
        logger.error(f"‚ùå CP{process_id}: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    
    pages_processed = end_page - start_page + 1
    logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å {process_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {pages_processed} —Å—Ç–æ—Ä—ñ–Ω–æ–∫, {len(cards_collected)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫")
    
    return {
        'process_id': process_id,
        'start_page': start_page,
        'end_page': end_page,
        'cards': cards_collected,
        'total_processed': len(cards_collected),
        'duplicates_within_process': duplicates_found
    }


def process_customers_page_range(args):
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ
    """
    start_page, end_page, api_key, proxy_config, process_id, existing_client_ids, funnel_id, dry_run = args
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É
    logger = logging.getLogger(f"Process-{process_id}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É (–±–µ–∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ —É –ø—Ä–æ—Ü–µ—Å–∞—Ö)
    manager = KeyCRMNewsletterManager(api_key, proxy_config, auto_delete_duplicates=False)
    
    logger.info(f"üöÄ –ü—Ä–æ—Ü–µ—Å {process_id}: –æ–±—Ä–æ–±–ª—è—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {start_page}-{end_page}")
    
    new_leads_created = 0
    total_customers_checked = 0
    
    try:
        for page in range(start_page, end_page + 1):
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–∫—É–ø—Ü—ñ–≤ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–±–µ–∑ include –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
                response = manager.make_request(f"/buyer?page={page}&limit=50")
                
                if not response or 'data' not in response:
                    logger.info(f"P{process_id}: –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page} –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∞")
                    continue
                
                customers = response['data']
                if not customers:
                    logger.info(f"P{process_id}: –î–æ—Å—è–≥–Ω—É—Ç–æ –∫—ñ–Ω—Ü—è —Å–ø–∏—Å–∫—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {page}")
                    break
                
                for customer in customers:
                    buyer_id = customer.get('id')
                    if not buyer_id:
                        continue
                    
                    total_customers_checked += 1
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–ª—ñ—î–Ω—Ç –≤–∂–µ —î –≤ –≤–æ—Ä–æ–Ω—Ü—ñ (–ø–æ client_id)
                    if buyer_id not in existing_client_ids:
                        if not dry_run:
                            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫–∞—Ä—Ç–∫—É
                            result = manager.create_pipeline_card(
                                buyer_id=buyer_id,
                                pipeline_id=funnel_id,
                                status_id=241,  # –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
                                buyer_info=customer
                            )
                            if result:
                                new_leads_created += 1
                                existing_client_ids.add(buyer_id)  # –î–æ–¥–∞—î–º–æ –¥–æ –∫–µ—à—É
                                logger.info(f"‚ûï P{process_id}: –î–æ–¥–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ {buyer_id} ({customer.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}) –¥–æ –≤–æ—Ä–æ–Ω–∫–∏")
                            else:
                                logger.warning(f"‚ö†Ô∏è P{process_id}: –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ {buyer_id}")
                        else:
                            new_leads_created += 1
                            if new_leads_created <= 5:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5 –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
                                logger.info(f"‚ûï P{process_id}: [DRY RUN] –ë—É–≤ –±–∏ –¥–æ–¥–∞–Ω–∏–π –∫–ª—ñ—î–Ω—Ç {buyer_id} ({customer.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')})")
                
                # –õ–æ–≥—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω—ñ 10 —Å—Ç–æ—Ä—ñ–Ω–æ–∫
                if page % 10 == 0:
                    logger.info(f"üìä P{process_id}: —Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page}/{end_page}, –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ {total_customers_checked} –∫–ª—ñ—î–Ω—Ç—ñ–≤, –¥–æ–¥–∞–Ω–æ {new_leads_created}")
                
                # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                time.sleep(1)
                
            except Exception as e:
                logger.error(f"‚ùå P{process_id}: –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {page}: {e}")
                time.sleep(5)  # –ë—ñ–ª—å—à–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
                continue
    
    except Exception as e:
        logger.error(f"‚ùå P{process_id}: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    
    pages_processed = end_page - start_page + 1
    logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å {process_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {pages_processed} —Å—Ç–æ—Ä—ñ–Ω–æ–∫, {total_customers_checked} –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ, {new_leads_created} –Ω–æ–≤–∏—Ö –ª—ñ–¥—ñ–≤")
    
    return {
        'process_id': process_id,
        'start_page': start_page,
        'end_page': end_page,
        'customers_checked': total_customers_checked,
        'new_leads_created': new_leads_created
    }


def process_all_customers_multiprocess(manager, existing_cards, existing_client_ids, num_processes=5, dry_run=True, test_mode=False):
    """
    –ë–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —ó—Ö –¥–æ –≤–æ—Ä–æ–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏
    """
    logger.info("=" * 80)
    logger.info("üì® –ë–ê–ì–ê–¢–û–ü–†–û–¶–ï–°–û–†–ù–ï –î–û–î–ê–í–ê–ù–ù–Ø –ö–õ–Ü–Ñ–ù–¢–Ü–í –î–û –í–û–†–û–ù–ö–ò –†–û–ó–°–ò–õ–ö–ò")
    logger.info("=" * 80)
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        total_pages, total_records = manager.get_total_customers_pages(limit=50)
        
        if total_pages == 0:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
            return {}
        
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ –æ–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 5 —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        if test_mode:
            total_pages = min(5, total_pages)
            logger.info(f"üß™ –¢–ï–°–¢–û–í–ò–ô –†–ï–ñ–ò–ú: –æ–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ {total_pages} —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
        
        logger.info(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫: {total_pages}")
        logger.info(f"üë• –ö–ª—ñ—î–Ω—Ç—ñ–≤ –≤–∂–µ –≤ –≤–æ—Ä–æ–Ω—Ü—ñ: {len(existing_cards)}")
        logger.info(f"üîÑ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—ñ–≤: {num_processes}")
        
        # –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –º—ñ–∂ –ø—Ä–æ—Ü–µ—Å–∞–º–∏
        pages_per_process = math.ceil(total_pages / num_processes)
        process_ranges = []
        
        for i in range(num_processes):
            start_page = i * pages_per_process + 1
            end_page = min((i + 1) * pages_per_process, total_pages)
            
            if start_page <= total_pages:
                process_ranges.append((start_page, end_page, i + 1))
        
        logger.info("üìã –†–æ–∑–ø–æ–¥—ñ–ª —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –º—ñ–∂ –ø—Ä–æ—Ü–µ—Å–∞–º–∏:")
        for start_page, end_page, process_id in process_ranges:
            logger.info(f"   –ü—Ä–æ—Ü–µ—Å {process_id}: —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {start_page}-{end_page} ({end_page-start_page+1} —Å—Ç–æ—Ä—ñ–Ω–æ–∫)")
        
        # –ì–æ—Ç—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—ñ–≤
        process_args = [
            (start_page, end_page, manager.api_key, manager.proxy_config, 
             process_id, existing_client_ids, manager.newsletter_funnel_id, dry_run)
            for start_page, end_page, process_id in process_ranges
        ]
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω—É –æ–±—Ä–æ–±–∫—É
        start_time = datetime.now()
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ {len(process_args)} –ø—Ä–æ—Ü–µ—Å—ñ–≤...")
        
        all_results = {}
        total_customers_checked = 0
        total_new_leads = 0
        completed_processes = 0
        
        with ProcessPoolExecutor(max_workers=num_processes) as executor:
            # –ü–æ–¥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
            future_to_process = {
                executor.submit(process_customers_page_range, args): args[4]  # process_id
                for args in process_args
            }
            
            # –ó–±–∏—Ä–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            for future in as_completed(future_to_process):
                process_id = future_to_process[future]
                
                try:
                    result = future.result()
                    total_customers_checked += result['customers_checked']
                    total_new_leads += result['new_leads_created']
                    completed_processes += 1
                    
                    # –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
                    overall_progress = (completed_processes / len(process_args)) * 100
                    logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å {result['process_id']} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É. –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å: {completed_processes}/{len(process_args)} ({overall_progress:.1f}%)")
                    
                except Exception as e:
                    completed_processes += 1
                    overall_progress = (completed_processes / len(process_args)) * 100
                    logger.error(f"‚ùå –ü—Ä–æ—Ü–µ—Å {process_id} –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é: {e}. –ü—Ä–æ–≥—Ä–µ—Å: {completed_processes}/{len(process_args)} ({overall_progress:.1f}%)")
        
        end_time = datetime.now()
        execution_time = (end_time - start_time).total_seconds()
        
        # –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("=" * 80)
        logger.info("–†–ï–ó–£–õ–¨–¢–ê–¢–ò –ë–ê–ì–ê–¢–û–ü–†–û–¶–ï–°–û–†–ù–û–á –û–ë–†–û–ë–ö–ò:")
        logger.info(f"–ü—Ä–æ—Ü–µ—Å—ñ–≤ –∑–∞–ø—É—â–µ–Ω–æ: {len(process_args)}")
        logger.info(f"–°—Ç–æ—Ä—ñ–Ω–æ–∫ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {total_pages}")
        logger.info(f"–ö–ª—ñ—î–Ω—Ç—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: {total_customers_checked}")
        logger.info(f"–ù–æ–≤–∏—Ö –ª—ñ–¥—ñ–≤ {'–¥–æ–¥–∞–Ω–æ' if not dry_run else '–∑–Ω–∞–π–¥–µ–Ω–æ'}: {total_new_leads}")
        logger.info(f"–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        if total_customers_checked > 0:
            logger.info(f"–®–≤–∏–¥–∫—ñ—Å—Ç—å: {total_customers_checked/execution_time:.1f} –∫–ª—ñ—î–Ω—Ç—ñ–≤/—Å–µ–∫")
        
        logger.info("=" * 80)
        
        return {
            'total_customers_checked': total_customers_checked,
            'new_leads_created': total_new_leads,
            'execution_time': execution_time
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –±–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏: {e}")
        return {}


def generate_report(existing_cards, results, filename=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É"""
    if not filename:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"newsletter_leads_report_{timestamp}"
    
    # –í–∏–ª—É—á–∞—î–º–æ client_id –∑ –∫–∞—Ä—Ç–æ–∫
    existing_client_ids = []
    if existing_cards:
        for card in existing_cards:
            contact = card.get('contact', {})
            if contact and 'client_id' in contact:
                existing_client_ids.append(contact['client_id'])
    
    report_data = {
        'generation_date': datetime.now().isoformat(),
        'summary': {
            'existing_leads_count': len(existing_cards) if existing_cards else 0,
            'unique_clients_count': len(existing_client_ids),
            'customers_checked': results.get('total_customers_checked', 0),
            'new_leads_created': results.get('new_leads_created', 0),
            'execution_time_seconds': results.get('execution_time', 0)
        },
        'existing_client_ids': existing_client_ids
    }
    
    # JSON –∑–≤—ñ—Ç
    with open(f"{filename}.json", 'w', encoding='utf-8') as f:
        json.dump(report_data, f, ensure_ascii=False, indent=2)
    
    # CSV –∑–≤—ñ—Ç
    with open(f"{filename}.csv", 'w', encoding='utf-8', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–Ω—è'])
        writer.writerow(['–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó', report_data['generation_date']])
        writer.writerow(['–Ü—Å–Ω—É—é—á–∏—Ö –ª—ñ–¥—ñ–≤ —É –≤–æ—Ä–æ–Ω—Ü—ñ', len(existing_cards) if existing_cards else 0])
        writer.writerow(['–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤', len(existing_client_ids)])
        writer.writerow(['–ö–ª—ñ—î–Ω—Ç—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ', results.get('total_customers_checked', 0)])
        writer.writerow(['–ù–æ–≤–∏—Ö –ª—ñ–¥—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ', results.get('new_leads_created', 0)])
        writer.writerow(['–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–µ–∫)', results.get('execution_time', 0)])
    
    logger.info(f"üìã –ó–≤—ñ—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filename}.json —Ç–∞ {filename}.csv")

def load_config():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    try:
        with open('config_newsletter.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        return config
    except FileNotFoundError:
        logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª config_newsletter.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º")
        return {
            "api_key": "M2IyOTFjNWM4ODA2OWU0NjU4ZDRkODAxZDVkMTQ4ZGNlMzUzYzc5NQ",
            "newsletter_funnel_id": 15,
            "auto_delete_duplicates": True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –≤ —Å—Ç–∞—Ç—É—Å 257
            "duplicate_status_id": 257,  # –°—Ç–∞—Ç—É—Å –¥–ª—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
            "proxy": {
                "enabled": True,
                "host": "p.webshare.io",
                "port": 80,
                "username": "oxfwmgn-UA-rotate",
                "password": "drci27S4eayj"
            }
        }


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üì® –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –õ–Ü–î–ê–ú–ò –í –í–û–†–û–ù–¶–Ü –†–û–ó–°–ò–õ–ö–ò KEYCRM")
    print("=" * 80)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    config = load_config()
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø—Ä–æ–∫—Å—ñ
    proxy_config = None
    if config.get('proxy', {}).get('enabled', False):
        proxy_config = config['proxy']
        print(f"üåê –ü—Ä–æ–∫—Å—ñ: {proxy_config['host']}:{proxy_config['port']}")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–∫—Å—ñ –≤–∏–º–∫–Ω–µ–Ω–æ –∞–±–æ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—ñ–≤
    if proxy_config:
        num_processes = 10  # –ü—Ä–∏–Ω—É–¥–æ–≤–æ 5 –ø—Ä–æ—Ü–µ—Å—ñ–≤ –∑ –ø—Ä–æ–∫—Å—ñ
    else:
        num_processes = min(mp.cpu_count(), 2)  # –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–æ—Ü–µ—Å–∏ –±–µ–∑ –ø—Ä–æ–∫—Å—ñ
    print(f"üîÑ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—ñ–≤: {num_processes}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = KeyCRMNewsletterManager(
        api_key=config['api_key'],
        proxy_config=proxy_config,
        auto_delete_duplicates=config.get('auto_delete_duplicates', True),
        duplicate_status_id=config.get('duplicate_status_id', 257)
    )
    
    # –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ ID –≤–æ—Ä–æ–Ω–∫–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —è–∫—â–æ —î
    if 'newsletter_funnel_id' in config:
        manager.newsletter_funnel_id = config['newsletter_funnel_id']
        print(f"üì® –í–æ—Ä–æ–Ω–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: ID {manager.newsletter_funnel_id}")
    else:
        print(f"üì® –í–æ—Ä–æ–Ω–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: ID {manager.newsletter_funnel_id} (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)")
    
    try:
        start_time = datetime.now()
        
        # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö —ñ—Å–Ω—É—é—á–∏—Ö –∫–∞—Ä—Ç–æ–∫ –∑ –≤–æ—Ä–æ–Ω–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏
        print(f"üîç –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –∫–∞—Ä—Ç–∫–∏ –∑ –≤–æ—Ä–æ–Ω–∫–∏ {manager.newsletter_funnel_id}...")
        
        # –ó–∞–ø–∏—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∫–∞—Ä—Ç–æ–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        while True:
            print(f"\n–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –∫–∞—Ä—Ç–æ–∫ –∑ –≤–æ—Ä–æ–Ω–∫–∏:")
            print("1. –¢–µ—Å—Ç–æ–≤–∏–π (10 —Å—Ç–æ—Ä—ñ–Ω–æ–∫) - —à–≤–∏–¥–∫–æ, –∞–ª–µ –Ω–µ—Ç–æ—á–Ω–æ")
            print("2. –ß–∞—Å—Ç–∫–æ–≤–∏–π (100 —Å—Ç–æ—Ä—ñ–Ω–æ–∫) - –∫–æ–º–ø—Ä–æ–º—ñ—Å –º—ñ–∂ —à–≤–∏–¥–∫—ñ—Å—Ç—é —ñ —Ç–æ—á–Ω—ñ—Å—Ç—é")
            print("3. –ü–æ–≤–Ω–∏–π (–≤—Å—ñ 539 —Å—Ç–æ—Ä—ñ–Ω–æ–∫) - –ø–æ–≤–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å, –∞–ª–µ –ø–æ–≤—ñ–ª—å–Ω–æ")
            
            cards_choice = input("–í–∞—à –≤–∏–±—ñ—Ä (1/2/3): ").strip()
            
            if cards_choice == "1":
                test_mode_pages = 10
                print("‚ö° –®–≤–∏–¥–∫–∏–π —Ä–µ–∂–∏–º: 10 —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
                break
            elif cards_choice == "2":
                test_mode_pages = 100
                print("‚öñÔ∏è –ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π —Ä–µ–∂–∏–º: 100 —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
                break
            elif cards_choice == "3":
                test_mode_pages = None  # –í—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                print("üîç –ü–æ–≤–Ω–∏–π —Ä–µ–∂–∏–º: –≤—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏")
                break
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
                continue
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫
        use_multiprocess_cards = True  # –ú–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–æ—Ä–æ–Ω–∫—É –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
        first_response = manager.get_pipeline_cards(manager.newsletter_funnel_id, 1)
        total_records = first_response.get('total', 0) if first_response else 0
        
        if test_mode_pages and test_mode_pages < 500:
            print("‚ö†Ô∏è  –£–í–ê–ì–ê: –û–±–º–µ–∂–µ–Ω–∏–π —Ä–µ–∂–∏–º –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤!")
            print(f"   –£ –≤–æ—Ä–æ–Ω—Ü—ñ —î {total_records} –∫–∞—Ä—Ç–æ–∫, –∞ –≤–∏ —Å–∫–∞–Ω–∏—Ä—É—î—Ç–µ —Ç—ñ–ª—å–∫–∏ {test_mode_pages} —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–æ–≤–Ω–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ")
        
        if use_multiprocess_cards:
            # –ú—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫ (—à–≤–∏–¥—à–µ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –≤–æ—Ä–æ–Ω–æ–∫)
            cards_processes = max(3, num_processes)  # –ù–µ –±—ñ–ª—å—à–µ 3 –ø—Ä–æ—Ü–µ—Å—ñ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ–∫
            existing_cards = manager.get_all_pipeline_cards_multiprocess(
                manager.newsletter_funnel_id, 
                max_pages=test_mode_pages,
                num_processes=cards_processes
            )
        else:
            # –ó–≤–∏—á–∞–π–Ω–µ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫
            existing_cards = manager.get_all_pipeline_cards(
                manager.newsletter_funnel_id, 
                max_pages=test_mode_pages
            )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–Ω–æ–∂–∏–Ω—É client_id –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
        existing_client_ids = set()
        if existing_cards:
            # existing_cards —Ç–µ–ø–µ—Ä —î —Å–ª–æ–≤–Ω–∏–∫–æ–º {client_id: card}
            existing_client_ids = set(existing_cards.keys())
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∫–∞—Ä—Ç–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        existing_cards_list = list(existing_cards.values()) if existing_cards else []
        
        print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(existing_cards_list)} –∫–∞—Ä—Ç–æ–∫, –∑ –Ω–∏—Ö {len(existing_client_ids)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤")
        
        if not existing_cards_list:
            logger.warning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏—Ö –∫–∞—Ä—Ç–æ–∫ —É –≤–æ—Ä–æ–Ω—Ü—ñ —Ä–æ–∑—Å–∏–ª–∫–∏")
        
        # –ó–∞–ø–∏—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —Ä–µ–∂–∏–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        dry_run = True
        test_mode = False
        
        while True:
            print("\n–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:")
            print("1. –¢–µ—Å—Ç–æ–≤–∏–π –ø—Ä–æ–≥–æ–Ω (–ø–µ—Ä—à—ñ 5 —Å—Ç–æ—Ä—ñ–Ω–æ–∫, –±–µ–∑ –∑–º—ñ–Ω)")
            print("2. –ü–æ–≤–Ω–∏–π –ø—Ä–æ–≥–æ–Ω (–±–µ–∑ –∑–º—ñ–Ω - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–∫—ñ–ª—å–∫–∏ –±—É–¥–µ –¥–æ–¥–∞–Ω–æ)")
            print("3. –ü–æ–≤–Ω–∏–π –ø—Ä–æ–≥–æ–Ω (–∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –∑–º—ñ–Ω–∞–º–∏)")
            
            choice = input("–í–∞—à –≤–∏–±—ñ—Ä (1/2/3): ").strip()
            
            if choice == "1":
                dry_run = True
                test_mode = True
                break
            elif choice == "2":
                dry_run = True
                test_mode = False
                break
            elif choice == "3":
                dry_run = False
                test_mode = False
                print("‚ö†Ô∏è –£–í–ê–ì–ê: –ë—É–¥—É—Ç—å –≤–Ω–µ—Å–µ–Ω—ñ —Ä–µ–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏!")
                confirm = input("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ? (y/N): ").strip().lower()
                if confirm == 'y':
                    break
                else:
                    continue
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
                continue
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –±–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω—É –æ–±—Ä–æ–±–∫—É
        results = process_all_customers_multiprocess(
            manager=manager,
            existing_cards=existing_cards_list,
            existing_client_ids=existing_client_ids,
            num_processes=num_processes,
            dry_run=dry_run,
            test_mode=test_mode
        )
        
        end_time = datetime.now()
        execution_time = (end_time - start_time).total_seconds()
        
        if results:
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            generate_report(existing_cards, results, f"newsletter_leads_report_{timestamp}")
            
            print(f"\n‚úÖ –û–±—Ä–æ–±–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"‚è±Ô∏è  –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
            print(f"üë• –Ü—Å–Ω—É—é—á–∏—Ö –ª—ñ–¥—ñ–≤ —É –≤–æ—Ä–æ–Ω—Ü—ñ: {len(existing_cards) if existing_cards else 0}")
            print(f"üîç –ö–ª—ñ—î–Ω—Ç—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: {results.get('total_customers_checked', 0)}")
            print(f"‚ûï –ù–æ–≤–∏—Ö –ª—ñ–¥—ñ–≤ {'–¥–æ–¥–∞–Ω–æ' if not dry_run else '–∑–Ω–∞–π–¥–µ–Ω–æ'}: {results.get('new_leads_created', 0)}")
        
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


if __name__ == "__main__":
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è multiprocessing
    mp.set_start_method('spawn', force=True)
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
    main()
