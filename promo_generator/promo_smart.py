"""
–†–æ–∑—É–º–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–º–æ-–∫–æ–¥–∞–º–∏ - –∞–Ω–∞–ª—ñ–∑, —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è, –ø–∞–∫–µ—Ç–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó.

–¶–µ–π –º–æ–¥—É–ª—å –º—ñ—Å—Ç–∏—Ç—å PromoSmartManager –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –ø—Ä–æ–º–æ-–∫–æ–¥–∞–º–∏:
- –ê–Ω–∞–ª—ñ–∑ —ñ—Å–Ω—É—é—á–∏—Ö –ø—Ä–æ–º–æ-–∫–æ–¥—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
- –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ —Å—É–º–∞—Ö —ñ –Ω–∞–∑–≤–∞—Ö (BON –∫–æ–¥–∏)
- –í–∏—è–≤–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ—Ö –ø—Ä–æ–º–æ-–∫–æ–¥—ñ–≤
- –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–π–≤–∏—Ö –ø—Ä–æ–º–æ-–∫–æ–¥—ñ–≤
- –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ —Ü—ñ–ª—å–æ–≤–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∫–æ–¥—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—É–º–∏
"""

import time
import logging
import random
import string
import sys
import os
from typing import Dict, List, Set, Optional, Tuple
from datetime import datetime

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ replenish_promo_code_lambda –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(parent_dir, 'replenish_promo_code_lambda'))

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ replenish_promo_code_lambda
try:
    from bon_utils import is_bon_promo_code, extract_amount_from_bon_code
    from promo_logic import PromoService
except ImportError as e:
    logger = logging.getLogger(__name__)
    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –º–æ–¥—É–ª—ñ: {e}")
    # Fallback –∑–∞–≥–ª—É—à–∫–∏
    def is_bon_promo_code(code):
        return code.startswith('BON')
    def extract_amount_from_bon_code(code):
        import re
        match = re.search(r'BON(\d+)', code)
        return int(match.group(1)) if match else None
    PromoService = None

logger = logging.getLogger(__name__)


class PromoSmartManager:
    """
    –†–æ–∑—É–º–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–º–æ-–∫–æ–¥–∞–º–∏.
    
    –û—Å–Ω–æ–≤–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:
    - –ê–Ω–∞–ª—ñ–∑ –≤—Å—ñ—Ö BON –ø—Ä–æ–º–æ-–∫–æ–¥—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
    - –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Å—É–º
    - –í–∏—è–≤–ª–µ–Ω–Ω—è —Ç–∞ —É—Å—É–Ω–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ—Ö –∫–æ–¥—ñ–≤
    - –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–π–≤–∏—Ö –∫–æ–¥—ñ–≤
    - –î–µ—Ç–∞–ª—å–Ω–∞ –∑–≤—ñ—Ç–Ω—ñ—Å—Ç—å –ø–æ –æ–ø–µ—Ä–∞—Ü—ñ—è—Ö
    """
    
    def __init__(self, promo_service):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è SmartManager –∑ —ñ—Å–Ω—É—é—á–∏–º PromoService.
        
        Args:
            promo_service: –ï–∫–∑–µ–º–ø–ª—è—Ä PromoService –∑ –∞–∫—Ç–∏–≤–Ω–æ—é —Å–µ—Å—ñ—î—é
        """
        self.promo_service = promo_service
        self.page = promo_service.page
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–±–æ—Ç–∏
        self.max_rows_per_page = 160  # –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–º–æ-–∫–æ–¥—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        self.duplicate_check_retries = 3  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        
        # –ö–µ—à –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.all_codes_cache = {}
        self.duplicates_found = {}
        
    def set_page_size(self, rows_count: int = 160) -> bool:
        """
        –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ.
        
        Args:
            rows_count: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ (20, 50, 100, 160)
            
        Returns:
            bool: True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        """
        try:
            iframe = self.promo_service._get_iframe()
            if not iframe:
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ iframe –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏")
                return False
                
            logger.info(f"üìÑ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ {rows_count} —Ä—è–¥–∫—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä—è–¥–∫—ñ–≤
            rows_selector = iframe.locator('select[name="codes_length"]')
            if rows_selector.count() == 0:
                logger.warning("‚ö†Ô∏è –°–µ–ª–µ–∫—Ç–æ—Ä –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä—è–¥–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                return False
                
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è
            rows_selector.select_option(str(rows_count))
            time.sleep(2)  # –ß–µ–∫–∞—î–º–æ –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
            
            logger.info(f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {rows_count} —Ä—è–¥–∫—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏: {e}")
            return False
    
    def apply_amount_range_filter(self, start_amount: int, end_amount: int) -> bool:
        """
        –ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ—ñ–ª—å—Ç—Ä –ø–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Å—É–º.
        
        Args:
            start_amount: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞
            end_amount: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞
            
        Returns:
            bool: True —è–∫—â–æ —Ñ—ñ–ª—å—Ç—Ä –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ
        """
        try:
            iframe = self.promo_service._get_iframe()
            if not iframe:
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ iframe –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")
                return False
                
            logger.info(f"üîç –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ —Å—É–º–∞—Ö: {start_amount}-{end_amount} –≥—Ä–Ω")
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–ª—è –¥–ª—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Å—É–º
            min_amount_input = iframe.locator('input[name="discount_amount_from"]')
            max_amount_input = iframe.locator('input[name="discount_amount_to"]')
            
            if min_amount_input.count() == 0 or max_amount_input.count() == 0:
                logger.error("‚ùå –ü–æ–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ —Å—É–º–∞—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
                return False
            
            # –û—á–∏—â—É—î–º–æ —Ç–∞ –≤–≤–æ–¥–∏–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è
            min_amount_input.clear()
            min_amount_input.fill(str(start_amount))
            
            max_amount_input.clear()
            max_amount_input.fill(str(end_amount))
            
            # –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—É
            filter_button = iframe.locator('input[value="–§—ñ–ª—å—Ç—Ä"]')
            if filter_button.count() > 0:
                filter_button.click()
                time.sleep(3)  # –ß–µ–∫–∞—î–º–æ –Ω–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—É
            
            logger.info(f"‚úÖ –§—ñ–ª—å—Ç—Ä –ø–æ —Å—É–º–∞—Ö {start_amount}-{end_amount} –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—É –ø–æ —Å—É–º–∞—Ö: {e}")
            return False
    
    def apply_bon_filter(self) -> bool:
        """
        –ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è –ø–æ—à—É–∫—É BON –ø—Ä–æ–º–æ-–∫–æ–¥—ñ–≤.
        
        Returns:
            bool: True —è–∫—â–æ —Ñ—ñ–ª—å—Ç—Ä –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ
        """
        try:
            iframe = self.promo_service._get_iframe()
            if not iframe:
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ iframe –¥–ª—è BON —Ñ—ñ–ª—å—Ç—Ä—É")
                return False
                
            logger.info("üîç –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ BON —Ñ—ñ–ª—å—Ç—Ä...")
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–ª–µ –ø–æ—à—É–∫—É –ø–æ –∫–æ–¥—É
            search_input = iframe.locator('input[name="code"]')
            if search_input.count() == 0:
                logger.error("‚ùå –ü–æ–ª–µ –ø–æ—à—É–∫—É –ø–æ –∫–æ–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–µ")
                return False
            
            # –í–≤–æ–¥–∏–º–æ BON –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            search_input.clear()
            search_input.fill("BON")
            
            # –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—É
            filter_button = iframe.locator('input[value="–§—ñ–ª—å—Ç—Ä"]')
            if filter_button.count() > 0:
                filter_button.click()
                time.sleep(3)  # –ß–µ–∫–∞—î–º–æ –Ω–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—É
            
            logger.info("‚úÖ BON —Ñ—ñ–ª—å—Ç—Ä –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è BON —Ñ—ñ–ª—å—Ç—Ä—É: {e}")
            return False
    
    def get_current_page_codes(self) -> List[Dict]:
        """
        –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –ø—Ä–æ–º–æ-–∫–æ–¥–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏.
        
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ-–∫–æ–¥—ñ–≤ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
        """
        try:
            iframe = self.promo_service._get_iframe()
            if not iframe:
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ iframe –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –∫–æ–¥—ñ–≤")
                return []
            
            codes = []
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ –∑ –ø—Ä–æ–º–æ-–∫–æ–¥–∞–º–∏
            rows = iframe.locator('table tbody tr')
            rows_count = rows.count()
            
            logger.debug(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {rows_count} —Ä—è–¥–∫—ñ–≤ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ")
            
            for i in range(rows_count):
                try:
                    row = rows.nth(i)
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–¥ (–∑–∞–∑–≤–∏—á–∞–π –≤ –ø–µ—Ä—à—ñ–π –∫–æ–ª–æ–Ω—Ü—ñ)
                    code_cell = row.locator('td').nth(0)
                    if code_cell.count() == 0:
                        continue
                        
                    code_text = code_cell.text_content()
                    if not code_text:
                        continue
                        
                    code = code_text.strip()
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ BON –∫–æ–¥
                    if not is_bon_promo_code(code):
                        continue
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—É–º—É –∑ –∫–æ–¥—É
                    amount = extract_amount_from_bon_code(code)
                    if amount is None:
                        continue
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (—Å—Ç–∞—Ç—É—Å, –¥–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ—â–æ)
                    cells = row.locator('td')
                    cell_count = cells.count()
                    
                    code_info = {
                        'code': code,
                        'amount': amount,
                        'row_index': i
                    }
                    
                    # –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —è–∫—â–æ —î
                    if cell_count > 1:
                        # –ó–∞–∑–≤–∏—á–∞–π —Å—Ç–∞—Ç—É—Å –≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫–æ–ª–æ–Ω—Ü—ñ
                        status_cell = cells.nth(cell_count - 1)
                        status_text = status_cell.text_content()
                        if status_text:
                            code_info['status'] = status_text.strip()
                    
                    codes.append(code_info)
                    
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä—è–¥–∫–∞ {i}: {e}")
                    continue
            
            logger.debug(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(codes)} BON –∫–æ–¥—ñ–≤ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏")
            return codes
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–¥—ñ–≤ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏: {e}")
            return []
    
    def get_all_pages_codes(self, start_amount: int, end_amount: int) -> Dict[int, List[str]]:
        """
        –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Ç–∞ –∑–±–∏—Ä–∞—î –≤—Å—ñ BON –∫–æ–¥–∏.
        
        Args:
            start_amount: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            end_amount: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            
        Returns:
            Dict[int, List[str]]: –°–ª–æ–≤–Ω–∏–∫ {—Å—É–º–∞: [—Å–ø–∏—Å–æ–∫_–∫–æ–¥—ñ–≤]}
        """
        try:
            iframe = self.promo_service._get_iframe()
            if not iframe:
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ iframe –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó")
                return {}
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            self.set_page_size(self.max_rows_per_page)
            
            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
            if not self.apply_amount_range_filter(start_amount, end_amount):
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –ø–æ —Å—É–º–∞—Ö")
                return {}
                
            if not self.apply_bon_filter():
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ BON —Ñ—ñ–ª—å—Ç—Ä")
                return {}
            
            all_codes = {}
            page_number = 1
            processed_codes = set()  # –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
            
            logger.info("üîÑ –ü–æ—á–∞—Ç–æ–∫ –∑–±–æ—Ä—É –∫–æ–¥—ñ–≤ –∑ —É—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫...")
            
            while True:
                logger.info(f"üìÑ –û–±—Ä–æ–±–∫–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {page_number}...")
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–¥–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                page_codes = self.get_current_page_codes()
                
                if not page_codes:
                    logger.info(f"üìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page_number} –ø–æ—Ä–æ–∂–Ω—è, –∑–∞–≤–µ—Ä—à—É—î–º–æ –∑–±—ñ—Ä")
                    break
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–¥–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                new_codes_count = 0
                duplicate_codes_count = 0
                
                for code_info in page_codes:
                    code = code_info['code']
                    amount = code_info['amount']
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç
                    if code in processed_codes:
                        duplicate_codes_count += 1
                        logger.debug(f"üîÑ –î—É–±–ª—ñ–∫–∞—Ç –∑–Ω–∞–π–¥–µ–Ω–æ: {code}")
                        continue
                    
                    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∫–æ–¥
                    processed_codes.add(code)
                    new_codes_count += 1
                    
                    if amount not in all_codes:
                        all_codes[amount] = []
                    all_codes[amount].append(code)
                
                logger.info(f"üìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page_number}: +{new_codes_count} –Ω–æ–≤–∏—Ö, {duplicate_codes_count} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"
                next_button = iframe.locator('a[href*="page="]:has-text("–ù–∞—Å—Ç—É–ø–Ω–∞"), a[href*="page="]:has-text("Next"), a[href*="page="]:has-text(">")').last
                
                if next_button.count() == 0 or not next_button.is_enabled():
                    logger.info(f"üìÑ –û—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page_number}, –∑–∞–≤–µ—Ä—à—É—î–º–æ –∑–±—ñ—Ä")
                    break
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
                try:
                    next_button.click()
                    time.sleep(3)  # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                    page_number += 1
                    
                    # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª—É
                    if page_number > 1000:
                        logger.warning("‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç —Å—Ç–æ—Ä—ñ–Ω–æ–∫ (1000), –ø—Ä–∏–ø–∏–Ω—è—î–º–æ –∑–±—ñ—Ä")
                        break
                        
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É {page_number + 1}: {e}")
                    break
            
            # –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_codes = sum(len(codes) for codes in all_codes.values())
            logger.info(f"‚úÖ –ó–±—ñ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {total_codes} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ–¥—ñ–≤ –∑ {page_number} —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
            
            # –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—É–º–∞—Ö
            for amount in sorted(all_codes.keys()):
                count = len(all_codes[amount])
                logger.info(f"üí∞ {amount} –≥—Ä–Ω: {count} –∫–æ–¥—ñ–≤")
            
            return all_codes
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–æ—Ä—É –∫–æ–¥—ñ–≤ –∑ —É—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫: {e}")
            return {}
    
    def verify_duplicates_for_amounts(self, amounts_to_check: List[int]) -> Dict[int, List[str]]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥—É–±–ª—ñ–∫–∞—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —Å—É–º, —Ñ—ñ–ª—å—Ç—Ä—É—é—á–∏ –ø–æ –∫–æ–∂–Ω—ñ–π —Å—É–º—ñ –æ–∫—Ä–µ–º–æ.
        
        Args:
            amounts_to_check: –°–ø–∏—Å–æ–∫ —Å—É–º –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            
        Returns:
            Dict[int, List[str]]: –£—Ç–æ—á–Ω–µ–Ω—ñ –∫–æ–¥–∏ –ø–æ —Å—É–º–∞—Ö
        """
        try:
            logger.info(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –¥–ª—è —Å—É–º: {amounts_to_check}")
            
            verified_codes = {}
            
            for amount in amounts_to_check:
                logger.info(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω...")
                
                # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ–π —Å—É–º—ñ
                if not self.apply_amount_range_filter(amount, amount):
                    logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è —Å—É–º–∏ {amount}")
                    continue
                
                if not self.apply_bon_filter():
                    logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ BON —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è —Å—É–º–∏ {amount}")
                    continue
                
                # –ó–±–∏—Ä–∞—î–º–æ –∫–æ–¥–∏ –¥–ª—è —Ü—ñ—î—ó —Å—É–º–∏
                amount_codes = self.get_all_pages_codes(amount, amount)
                
                if amount in amount_codes:
                    verified_codes[amount] = amount_codes[amount]
                    logger.info(f"‚úÖ –°—É–º–∞ {amount} –≥—Ä–Ω: –∑–Ω–∞–π–¥–µ–Ω–æ {len(amount_codes[amount])} –∫–æ–¥—ñ–≤")
                else:
                    verified_codes[amount] = []
                    logger.info(f"üìù –°—É–º–∞ {amount} –≥—Ä–Ω: –∫–æ–¥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
                time.sleep(1)  # –ü–∞—É–∑–∞ –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏
            
            return verified_codes
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {e}")
            return {}
    
    def analyze_codes_balance(self, current_codes: Dict[int, List[str]], 
                            target_count: int, start_amount: int, end_amount: int) -> Dict:
        """
        –ê–Ω–∞–ª—ñ–∑—É—î –±–∞–ª–∞–Ω—Å –ø—Ä–æ–º–æ-–∫–æ–¥—ñ–≤ —Ç–∞ –≤–∏–∑–Ω–∞—á–∞—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó.
        
        Args:
            current_codes: –ü–æ—Ç–æ—á–Ω—ñ –∫–æ–¥–∏ {—Å—É–º–∞: [–∫–æ–¥–∏]}
            target_count: –¶—ñ–ª—å–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—É–º–∏
            start_amount: –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å—É–º–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω—É
            end_amount: –ö—ñ–Ω—Ü–µ–≤–∞ —Å—É–º–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω—É
            
        Returns:
            Dict: –ê–Ω–∞–ª—ñ–∑ –∑ –ø–ª–∞–Ω–æ–º –¥—ñ–π
        """
        analysis = {
            'to_create': {},  # {—Å—É–º–∞: –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–¥–ª—è_—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è}
            'to_delete': {},  # {—Å—É–º–∞: [–∫–æ–¥–∏_–¥–ª—è_–≤–∏–¥–∞–ª–µ–Ω–Ω—è]}
            'unchanged': {},  # {—Å—É–º–∞: –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–µ–∑_–∑–º—ñ–Ω}
            'summary': {
                'total_to_create': 0,
                'total_to_delete': 0,
                'amounts_unchanged': 0
            }
        }
        
        logger.info(f"üìä –ê–Ω–∞–ª—ñ–∑ –±–∞–ª–∞–Ω—Å—É –∫–æ–¥—ñ–≤ –¥–ª—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É {start_amount}-{end_amount} –≥—Ä–Ω")
        logger.info(f"üéØ –¶—ñ–ª—å–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {target_count} –∫–æ–¥—ñ–≤ –Ω–∞ —Å—É–º—É")
        
        for amount in range(start_amount, end_amount + 1):
            current_count = len(current_codes.get(amount, []))
            
            if current_count < target_count:
                # –ü–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–¥–∏
                need_to_create = target_count - current_count
                analysis['to_create'][amount] = need_to_create
                analysis['summary']['total_to_create'] += need_to_create
                logger.info(f"‚ûï {amount} –≥—Ä–Ω: –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ {need_to_create} –∫–æ–¥—ñ–≤ (—î {current_count})")
                
            elif current_count > target_count:
                # –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–π–≤—ñ –∫–æ–¥–∏
                codes_to_delete = current_codes[amount][target_count:]  # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ
                analysis['to_delete'][amount] = codes_to_delete
                analysis['summary']['total_to_delete'] += len(codes_to_delete)
                logger.info(f"‚ûñ {amount} –≥—Ä–Ω: –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ {len(codes_to_delete)} –∫–æ–¥—ñ–≤ (—î {current_count})")
                
            else:
                # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞
                analysis['unchanged'][amount] = current_count
                analysis['summary']['amounts_unchanged'] += 1
                logger.info(f"‚úÖ {amount} –≥—Ä–Ω: –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å ({current_count} –∫–æ–¥—ñ–≤)")
        
        # –ü—ñ–¥—Å—É–º–æ–∫
        logger.info(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –ê–ù–ê–õ–Ü–ó–£:")
        logger.info(f"‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏: {analysis['summary']['total_to_create']} –∫–æ–¥—ñ–≤")
        logger.info(f"‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏: {analysis['summary']['total_to_delete']} –∫–æ–¥—ñ–≤")
        logger.info(f"‚úÖ –ë–µ–∑ –∑–º—ñ–Ω: {analysis['summary']['amounts_unchanged']} —Å—É–º")
        
        return analysis
    
    def execute_balance_operations(self, analysis: Dict) -> Dict:
        """
        –í–∏–∫–æ–Ω—É—î –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –±–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è –∫–æ–¥—ñ–≤ –∑–≥—ñ–¥–Ω–æ –∑ –∞–Ω–∞–ª—ñ–∑–æ–º.
        
        Args:
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É –∑ analyze_codes_balance
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π
        """
        results = {
            'created': 0,
            'deleted': 0,
            'errors': []
        }
        
        try:
            # –°–¢–í–û–†–ï–ù–ù–Ø –ù–û–í–ò–• –ö–û–î–Ü–í
            if analysis['to_create']:
                logger.info(f"\n‚ûï –°–¢–í–û–†–ï–ù–ù–Ø –ö–û–î–Ü–í...")
                
                for amount, count in analysis['to_create'].items():
                    logger.info(f"‚ûï –°—Ç–≤–æ—Ä—é—î–º–æ {count} –∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω...")
                    
                    try:
                        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–¥–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
                        codes_to_create = []
                        for _ in range(count):
                            # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ —Ñ–æ—Ä–º–∞—Ç—É BON{amount}{random}
                            random_part = ''.join([str(random.randint(0, 9)) for _ in range(6)])
                            new_code = f"BON{amount}{random_part}"
                            codes_to_create.append(new_code)
                        
                        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–¥–∏ —á–µ—Ä–µ–∑ PromoService
                        success_count = 0
                        for code in codes_to_create:
                            if self.promo_service.create_promo_code(code, amount):
                                success_count += 1
                                time.sleep(0.5)  # –ü–∞—É–∑–∞ –º—ñ–∂ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º
                            else:
                                logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–¥ {code}")
                        
                        results['created'] += success_count
                        logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {success_count}/{count} –∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω")
                        
                    except Exception as e:
                        error_msg = f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount}: {e}"
                        logger.error(f"‚ùå {error_msg}")
                        results['errors'].append(error_msg)
            
            # –í–ò–î–ê–õ–ï–ù–ù–Ø –ó–ê–ô–í–ò–• –ö–û–î–Ü–í
            if analysis['to_delete']:
                logger.info(f"\n‚ûñ –í–ò–î–ê–õ–ï–ù–ù–Ø –ó–ê–ô–í–ò–• –ö–û–î–Ü–í...")
                
                for amount, codes_to_delete in analysis['to_delete'].items():
                    logger.info(f"‚ûñ –í–∏–¥–∞–ª—è—î–º–æ {len(codes_to_delete)} –∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω...")
                    
                    try:
                        # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–¥–∏ —á–µ—Ä–µ–∑ SmartManager
                        if self._delete_codes_batch(codes_to_delete):
                            results['deleted'] += len(codes_to_delete)
                            logger.info(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {len(codes_to_delete)} –∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω")
                        else:
                            error_msg = f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–¥–∏ –¥–ª—è —Å—É–º–∏ {amount}"
                            logger.error(f"‚ùå {error_msg}")
                            results['errors'].append(error_msg)
                            
                    except Exception as e:
                        error_msg = f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount}: {e}"
                        logger.error(f"‚ùå {error_msg}")
                        results['errors'].append(error_msg)
            
            # –ü—ñ–¥—Å—É–º–æ–∫ –æ–ø–µ—Ä–∞—Ü—ñ–π
            logger.info(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –û–ü–ï–†–ê–¶–Ü–ô:")
            logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {results['created']} –∫–æ–¥—ñ–≤")
            logger.info(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ: {results['deleted']} –∫–æ–¥—ñ–≤")
            if results['errors']:
                logger.info(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {len(results['errors'])}")
                for error in results['errors']:
                    logger.error(f"   - {error}")
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π: {e}")
            results['errors'].append(str(e))
            return results
    
    def _delete_codes_batch(self, codes_to_delete: List[str]) -> bool:
        """
        –í–∏–¥–∞–ª—è—î —Å–ø–∏—Å–æ–∫ –∫–æ–¥—ñ–≤ –ø–∞–∫–µ—Ç–Ω–æ.
        
        Args:
            codes_to_delete: –°–ø–∏—Å–æ–∫ –∫–æ–¥—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            
        Returns:
            bool: True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ
        """
        try:
            iframe = self.promo_service._get_iframe()
            if not iframe:
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ iframe –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
                return False
            
            # –õ–æ–≥—ñ–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–¥—ñ–≤
            # (—Ç—É—Ç –º–æ–∂–µ –±—É—Ç–∏ —Å–∫–ª–∞–¥–Ω—ñ—à–∞ –ª–æ–≥—ñ–∫–∞ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É)
            
            logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è {len(codes_to_delete)} –∫–æ–¥—ñ–≤...")
            
            # –ü—Ä–∏–∫–ª–∞–¥ –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏ –ø—ñ–¥ —Ä–µ–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
            for code in codes_to_delete:
                try:
                    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä—è–¥–æ–∫ –∑ –∫–æ–¥–æ–º —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ
                    # –¶–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
                    pass
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–¥ {code}: {e}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {e}")
            return False
    
    def smart_management_cycle(self, start_amount: int, end_amount: int, 
                             target_count: int) -> Dict:
        """
        –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–∑—É–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–º–æ-–∫–æ–¥–∞–º–∏.
        
        Args:
            start_amount: –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å—É–º–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω—É
            end_amount: –ö—ñ–Ω—Ü–µ–≤–∞ —Å—É–º–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω—É  
            target_count: –¶—ñ–ª—å–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—É–º–∏
            
        Returns:
            Dict: –ü—ñ–¥—Å—É–º–∫–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π
        """
        try:
            logger.info(f"üéØ –ü–û–ß–ê–¢–û–ö –†–û–ó–£–ú–ù–û–ì–û –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ü–†–û–ú–û-–ö–û–î–ê–ú–ò")
            logger.info(f"üí∞ –î—ñ–∞–ø–∞–∑–æ–Ω —Å—É–º: {start_amount}-{end_amount} –≥—Ä–Ω")
            logger.info(f"üéØ –¶—ñ–ª—å–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {target_count} –∫–æ–¥—ñ–≤ –Ω–∞ —Å—É–º—É")
            
            # –ï–¢–ê–ü 1: –ó–±—ñ—Ä –≤—Å—ñ—Ö —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–¥—ñ–≤
            logger.info(f"\nüìã –ï–¢–ê–ü 1: –ó–±—ñ—Ä —ñ—Å–Ω—É—é—á–∏—Ö –ø—Ä–æ–º–æ-–∫–æ–¥—ñ–≤...")
            current_codes = self.get_all_pages_codes(start_amount, end_amount)
            
            if not current_codes:
                logger.warning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ BON –∫–æ–¥—É –≤ –∑–∞–¥–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ")
            
            # –ï–¢–ê–ü 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Å—É–º
            logger.info(f"\nüîç –ï–¢–ê–ü 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤...")
            amounts_to_verify = []
            for amount in range(start_amount, end_amount + 1):
                if amount in current_codes and len(current_codes[amount]) > target_count * 1.2:
                    amounts_to_verify.append(amount)
            
            if amounts_to_verify:
                logger.info(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –¥–ª—è —Å—É–º: {amounts_to_verify}")
                verified_codes = self.verify_duplicates_for_amounts(amounts_to_verify)
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–º–∏
                for amount, codes in verified_codes.items():
                    current_codes[amount] = codes
            
            # –ï–¢–ê–ü 3: –ê–Ω–∞–ª—ñ–∑ —Ç–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
            logger.info(f"\nüìä –ï–¢–ê–ü 3: –ê–Ω–∞–ª—ñ–∑ –±–∞–ª–∞–Ω—Å—É –∫–æ–¥—ñ–≤...")
            analysis = self.analyze_codes_balance(current_codes, target_count, start_amount, end_amount)
            
            # –ï–¢–ê–ü 4: –í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π
            logger.info(f"\n‚öôÔ∏è –ï–¢–ê–ü 4: –í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π...")
            results = self.execute_balance_operations(analysis)
            
            # –ï–¢–ê–ü 5: –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
            logger.info(f"\nüìä –§–Ü–ù–ê–õ–¨–ù–ò–ô –ó–í–Ü–¢:")
            logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {results['created']} –ø—Ä–æ–º–æ-–∫–æ–¥—ñ–≤")
            logger.info(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ: {results['deleted']} –ø—Ä–æ–º–æ-–∫–æ–¥—ñ–≤")
            if results['errors']:
                logger.info(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {len(results['errors'])}")
            
            logger.info(f"üéØ –†–û–ó–£–ú–ù–ï –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!")
            
            return {
                'created': results['created'],
                'deleted': results['deleted'],
                'errors': results['errors'],
                'current_codes': current_codes,
                'analysis': analysis
            }
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–æ–∑—É–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è: {e}")
            return {
                'created': 0,
                'deleted': 0,
                'errors': [str(e)],
                'current_codes': {},
                'analysis': {}
            }
