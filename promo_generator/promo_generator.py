#!/usr/bin/env python3
"""
–°–ú–ê–†–¢ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é —Ç–∞ –∞–Ω–∞–ª—ñ–∑–æ–º —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–¥—ñ–≤.

–û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á:
1. smart_promo_management_main() - –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
2. apply_amount_filter_improved() / apply_code_filter_improved() - —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ  
3. get_all_bon_codes_from_table() - –∑–±—ñ—Ä –≤—Å—ñ—Ö BON –∫–æ–¥—ñ–≤ –∑ —Ç–∞–±–ª–∏—Ü—ñ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
4. generate_codes_for_amount() / create_codes_for_amount() - –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–¥—ñ–≤
5. delete_specific_promo_codes() - –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
6. upload_to_s3() / download_from_s3() - —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ S3

–ó–ê–ü–£–°–ö:
- HEADLESS —Ä–µ–∂–∏–º: PLAYWRIGHT_HEADED=false python3 promo_generator.py  
- HEADED —Ä–µ–∂–∏–º (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º): python3 promo_generator/promo_generator.py

–û–ù–û–í–õ–ï–ù–ù–Ø v2.5:
- –í–∏–¥–∞–ª–µ–Ω–æ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∫–æ–¥—É
- –ó–∞–ª–∏—à–µ–Ω–æ –ª–∏—à–µ –∞–∫—Ç–∏–≤–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
- –ü–æ–∫—Ä–∞—â–µ–Ω–æ —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å —ñ –∑–º–µ–Ω—à–µ–Ω–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
"""

import boto3
import json
import random
import string
import logging
import time
import os
import sys
import re
import datetime
import multiprocessing
import importlib
import importlib.util
import inspect
from multiprocessing import Process, Queue, Manager
import threading
from concurrent.futures import ThreadPoolExecutor
from dotenv import load_dotenv

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ replenish_promo_code_lambda –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(parent_dir, 'replenish_promo_code_lambda'))

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ —Ç–∞ –ª–æ–≥—ñ–Ω—É (–∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫)
try:
    from browser_manager import create_browser_manager
    from promo_logic import PromoService
    BROWSER_MODULES_AVAILABLE = True
except ImportError as e:
    logger = logging.getLogger(__name__)
    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–Ω—ñ –º–æ–¥—É–ª—ñ: {e}")
    create_browser_manager = None
    PromoService = None
    BROWSER_MODULES_AVAILABLE = False

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# --- –û—Å–Ω–æ–≤–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ---
CONFIG = {
    's3_bucket': 'lambda-promo-sessions',
    's3_key': 'promo-codes/available_codes.json',
    'region': 'eu-north-1',
    'target_codes_per_amount': 10,
    'start_amount': 1,
    'end_amount': 1000,  # –î—ñ–∞–ø–∞–∑–æ–Ω –¥–æ 100
    'sort_order': 'asc',  # –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: 'asc' (–∑—Ä–æ—Å—Ç–∞–Ω–Ω—è) –∞–±–æ 'desc' (—Å–ø–∞–¥–∞–Ω–Ω—è)
    'sync_s3': True,
    'auto_delete_excess': True,  # –£–≤—ñ–º–∫–Ω–µ–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    'verbose_logging': False,  # –î–æ–¥–∞–Ω–æ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    'quick_mode': True,  # –®–≤–∏–¥–∫–∏–π —Ä–µ–∂–∏–º - –º—ñ–Ω—ñ–º—É–º –ª–æ–≥—ñ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
    'parallel_processes': 10,  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ 2 –ø—Ä–æ—Ü–µ—Å–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—Å—Ç—ñ
    'process_timeout': 600,  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (10 —Ö–≤–∏–ª–∏–Ω)
}

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Ä–æ—Ü–µ—Å—ñ–≤ —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
def get_processes_count():
    """–û—Ç—Ä–∏–º—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—ñ–≤ —ñ–∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó."""
    env_processes = os.getenv('PROMO_PARALLEL_PROCESSES')
    if env_processes:
        try:
            return max(1, int(env_processes))
        except ValueError:
            pass
    return CONFIG.get('parallel_processes', 1)

# –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
CONFIG['parallel_processes'] = get_processes_count()

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ ---

def split_range_for_processes(start_amount, end_amount, num_processes):
    """
    –†–æ–∑–¥—ñ–ª—è—î –¥—ñ–∞–ø–∞–∑–æ–Ω —Å—É–º –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤.
    
    Args:
        start_amount: –ø–æ—á–∞—Ç–∫–æ–≤–∞ —Å—É–º–∞
        end_amount: –∫—ñ–Ω—Ü–µ–≤–∞ —Å—É–º–∞  
        num_processes: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—ñ–≤
        
    Returns:
        list: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂—ñ–≤ (start, end) –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É
    """
    total_range = end_amount - start_amount + 1
    chunk_size = total_range // num_processes
    remainder = total_range % num_processes
    
    ranges = []
    current_start = start_amount
    
    for i in range(num_processes):
        # –î–æ–¥–∞—î–º–æ –ø–æ –æ–¥–Ω–æ–º—É –¥–æ —Ä–æ–∑–º—ñ—Ä—É chunks, —è–∫—â–æ —î –æ—Å—Ç–∞—á–∞
        current_chunk_size = chunk_size + (1 if i < remainder else 0)
        current_end = current_start + current_chunk_size - 1
        
        # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–Ω–µ—Ü—å –¥—ñ–∞–ø–∞–∑–æ–Ω—É
        current_end = min(current_end, end_amount)
        
        ranges.append((current_start, current_end))
        current_start = current_end + 1
        
        # –Ø–∫—â–æ –¥–æ—Å—è–≥–ª–∏ –∫—ñ–Ω—Ü—è, –∑—É–ø–∏–Ω—è—î–º–æ—Å—å
        if current_start > end_amount:
            break
    
    return ranges

def worker_process(process_id, start_amount, end_amount, result_queue, config_override=None):
    """
    –†–æ–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Å—É–º.
    
    Args:
        process_id: —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—É
        start_amount: –ø–æ—á–∞—Ç–∫–æ–≤–∞ —Å—É–º–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        end_amount: –∫—ñ–Ω—Ü–µ–≤–∞ —Å—É–º–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        result_queue: —á–µ—Ä–≥–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        config_override: –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    """
    try:
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É
        process_logger = logging.getLogger(f'worker_{process_id}')
        process_logger.setLevel(logging.INFO)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª –ª–æ–≥—É –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É
        log_timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        log_filename = os.path.join(
            os.path.dirname(os.path.abspath(__file__)), 
            'logs', 
            f'worker_{process_id}_{log_timestamp}.log'
        )
        
        file_handler = logging.FileHandler(log_filename, encoding='utf-8')
        file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
        process_logger.addHandler(file_handler)
        process_logger.propagate = False
        
        process_logger.info(f"üöÄ –ü—Ä–æ—Ü–µ—Å {process_id} –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É {start_amount}-{end_amount}")
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        local_config = CONFIG.copy()
        if config_override:
            local_config.update(config_override)
        
        local_config['start_amount'] = start_amount
        local_config['end_amount'] = end_amount
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –¥–ª—è —Ü—å–æ–≥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É
        result = smart_promo_management_worker(process_id, local_config, process_logger)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–µ—Ä–≥—É
        result_data = {
            'process_id': process_id,
            'start_amount': start_amount,
            'end_amount': end_amount,
            'success': result.get('success', False),
            'codes_data': result.get('codes_data', {}),
            'operations': result.get('operations', {'created': 0, 'deleted': 0, 'unchanged': 0}),
            'log_file': log_filename
        }
        
        result_queue.put(result_data)
        process_logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å {process_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
    except Exception as e:
        error_result = {
            'process_id': process_id,
            'start_amount': start_amount,
            'end_amount': end_amount,
            'success': False,
            'error': str(e),
            'codes_data': {},
            'operations': {'created': 0, 'deleted': 0, 'unchanged': 0}
        }
        result_queue.put(error_result)
        
        if 'process_logger' in locals():
            process_logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ {process_id}: {e}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ {process_id}: {e}")

def smart_promo_management_worker(process_id, config, process_logger):
    """
    –†–æ–±–æ—á–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏.
    
    Args:
        process_id: —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—É
        config: –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É
        process_logger: –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É
        
    Returns:
        dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ—Ü–µ—Å—É
    """
    process_logger.info(f"üîß –†–æ–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å {process_id} —Ä–æ–∑–ø–æ—á–∞–≤ —Ä–æ–±–æ—Ç—É")
    
    # –Ü–º–ø–æ—Ä—Ç–∏
    import sys
    import os
    
    parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    sys.path.insert(0, parent_dir)
    sys.path.insert(0, os.path.join(parent_dir, 'replenish_promo_code_lambda'))
    
    # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–∞–ø–∫—É –¥–æ sys.path –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ—É–Ω–∫—Ü—ñ–π promo_generator
    current_dir = os.path.dirname(os.path.abspath(__file__))
    if current_dir not in sys.path:
        sys.path.insert(0, current_dir)
    
    try:
        from replenish_promo_code_lambda.browser_manager import create_browser_manager
        from replenish_promo_code_lambda.promo_logic import PromoService
        from promo_smart import PromoSmartManager
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É —ñ–º–µ–Ω
        # –û—Å–∫—ñ–ª—å–∫–∏ –º–∏ –≤–∂–µ –≤ –º–æ–¥—É–ª—ñ promo_generator, –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—ó
        import inspect
        current_module = inspect.getmodule(inspect.currentframe())
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó —á–µ—Ä–µ–∑ importlib
        import importlib.util
        import types
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–¥—É–ª—å –ø—Ä—è–º–æ –∑ —Ñ–∞–π–ª—É
        spec = importlib.util.spec_from_file_location("promo_generator", __file__)
        if spec and spec.loader:
            promo_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(promo_module)
            
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
            set_max_rows_per_page = getattr(promo_module, 'set_max_rows_per_page', None)
            apply_bon_filter_once = getattr(promo_module, 'apply_bon_filter_once', None)
            apply_amount_range_filter = getattr(promo_module, 'apply_amount_range_filter', None)
            clear_all_filters = getattr(promo_module, 'clear_all_filters', None)
            sort_table_by_discount_amount = getattr(promo_module, 'sort_table_by_discount_amount', None)
            get_all_bon_codes_from_table = getattr(promo_module, 'get_all_bon_codes_from_table', None)
            create_codes_for_amount = getattr(promo_module, 'create_codes_for_amount', None)
            delete_specific_promo_codes = getattr(promo_module, 'delete_specific_promo_codes', None)
            select_specific_promo_codes = getattr(promo_module, 'select_specific_promo_codes', None)
            delete_selected_codes = getattr(promo_module, 'delete_selected_codes', None)
            delete_selected_codes_headless_optimized = getattr(promo_module, 'delete_selected_codes_headless_optimized', None)
            generate_random_bon_code = getattr(promo_module, 'generate_random_bon_code', None)
        else:
            process_logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ spec –¥–ª—è –º–æ–¥—É–ª—è")
            return {'success': False, 'error': 'Module spec error'}
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–Ω–∞–π–¥–µ–Ω—ñ
        missing_functions = []
        for func_name, func in [
            ('set_max_rows_per_page', set_max_rows_per_page),
            ('apply_bon_filter_once', apply_bon_filter_once),
            ('apply_amount_range_filter', apply_amount_range_filter),
            ('clear_all_filters', clear_all_filters),
            ('sort_table_by_discount_amount', sort_table_by_discount_amount),
            ('get_all_bon_codes_from_table', get_all_bon_codes_from_table),
            ('create_codes_for_amount', create_codes_for_amount),
            ('delete_specific_promo_codes', delete_specific_promo_codes),
            ('select_specific_promo_codes', select_specific_promo_codes),
            ('delete_selected_codes', delete_selected_codes),
            ('delete_selected_codes_headless_optimized', delete_selected_codes_headless_optimized),
            ('generate_random_bon_code', generate_random_bon_code),
        ]:
            if func is None:
                missing_functions.append(func_name)
        
        if missing_functions:
            raise ImportError(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—ó: {', '.join(missing_functions)}")
        
        process_logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å {process_id}: –í—Å—ñ –º–æ–¥—É–ª—ñ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
    except ImportError as e:
        process_logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ: {e}")
        return {'success': False, 'error': f'Import error: {e}'}
    
    # –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –º—ñ–∂ –ø—Ä–æ—Ü–µ—Å–∞–º–∏
    time.sleep(process_id * 2)  # –ö–æ–∂–µ–Ω –ø—Ä–æ—Ü–µ—Å —Å—Ç–∞—Ä—Ç—É—î –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é
    
    browser_manager = create_browser_manager()
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—Ä–∞—É–∑–µ—Ä–∞
        process_logger.info(f"üöÄ –ü—Ä–æ—Ü–µ—Å {process_id}: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—Ä–∞—É–∑–µ—Ä–∞...")
        page = browser_manager.initialize()
        promo_service = PromoService(page)
        
        # –õ–æ–≥—ñ–Ω
        process_logger.info(f"üîë –ü—Ä–æ—Ü–µ—Å {process_id}: –õ–æ–≥—ñ–Ω –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å...")
        if not promo_service.login():
            process_logger.error(f"‚ùå –ü—Ä–æ—Ü–µ—Å {process_id}: –ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–π—Ç–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
            return {'success': False, 'error': 'Login failed'}
        
        process_logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å {process_id}: –£—Å–ø—ñ—à–Ω–∏–π –ª–æ–≥—ñ–Ω!")
        promo_smart_manager = PromoSmartManager(promo_service)
        
        # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        codes_data = {}
        total_operations = {'created': 0, 'deleted': 0, 'unchanged': 0}
        
        # –û—Ç—Ä–∏–º—É—î–º–æ iframe
        iframe = promo_service._get_iframe()
        if not iframe:
            process_logger.error(f"‚ùå –ü—Ä–æ—Ü–µ—Å {process_id}: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ iframe")
            return {'success': False, 'error': 'iframe not found'}
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç–∞ –æ—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
        process_logger.info(f"üîç –ü—Ä–æ—Ü–µ—Å {process_id}: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É {config['start_amount']}-{config['end_amount']}...")
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        set_max_rows_per_page(iframe, 160)
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ BON —Ñ—ñ–ª—å—Ç—Ä
        if not apply_bon_filter_once(iframe):
            process_logger.error(f"‚ùå –ü—Ä–æ—Ü–µ—Å {process_id}: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ BON —Ñ—ñ–ª—å—Ç—Ä")
            return {'success': False, 'error': 'BON filter failed'}
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Å—É–º
        if not apply_amount_range_filter(iframe, config['start_amount'], config['end_amount']):
            process_logger.warning(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å {process_id}: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –¥—ñ–∞–ø–∞–∑–æ–Ω—É")
        
        # –°–æ—Ä—Ç—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ø–æ —Ä–æ–∑–º—ñ—Ä—É –∑–Ω–∏–∂–∫–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö
        process_logger.info(f"üìä –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ —Ä–æ–∑–º—ñ—Ä—É –∑–Ω–∏–∂–∫–∏ ({config['sort_order']})...")
        sort_success = sort_table_by_discount_amount(iframe, config['sort_order'])
        if not sort_success:
            process_logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ø–æ —Ä–æ–∑–º—ñ—Ä—É –∑–Ω–∏–∂–∫–∏, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è")
        else:
            sort_label = "–∑—Ä–æ—Å—Ç–∞–Ω–Ω—è" if config['sort_order'] == "asc" else "—Å–ø–∞–¥–∞–Ω–Ω—è"
            process_logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü—é —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ –ø–æ —Ä–æ–∑–º—ñ—Ä—É –∑–Ω–∏–∂–∫–∏ ({sort_label})")

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–¥–∏ –¥–ª—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É
        all_codes_by_amount = get_all_bon_codes_from_table(iframe)
        
        if not all_codes_by_amount:
            process_logger.info(f"‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å {process_id}: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ")
            all_codes_by_amount = {}
            for amount in range(config['start_amount'], config['end_amount'] + 1):
                all_codes_by_amount[amount] = []
        
        # –ê–Ω–∞–ª—ñ–∑ —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ—ó —Å—É–º–∏
        for amount in range(config['start_amount'], config['end_amount'] + 1):
            code_objects = all_codes_by_amount.get(amount, [])
            active_codes = [obj['code'] for obj in code_objects if obj['status'] == 'active']
            
            current_count = len(active_codes)
            target_count = config['target_codes_per_amount']
            
            process_logger.info(f"üìä –ü—Ä–æ—Ü–µ—Å {process_id}: –ê–Ω–∞–ª—ñ–∑ —Å—É–º–∏ {amount} –≥—Ä–Ω - –ø–æ—Ç–æ—á–Ω–æ {current_count}, –ø–æ—Ç—Ä—ñ–±–Ω–æ {target_count}")
            
            if current_count < target_count:
                # –ü–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–¥–∏
                needed = target_count - current_count
                process_logger.info(f"‚ûï –ü—Ä–æ—Ü–µ—Å {process_id}: –î–ª—è {amount} –≥—Ä–Ω –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ {needed} –∫–æ–¥—ñ–≤")
                
                # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ –∫–æ–¥–∏
                new_codes = []
                for _ in range(needed):
                    new_code = generate_random_bon_code(active_codes + new_codes)
                    new_codes.append(new_code)
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–¥–∏
                created_count = create_codes_for_amount(promo_service, new_codes, amount)
                total_operations['created'] += created_count
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                for code in new_codes[:created_count]:
                    active_codes.append(code)
                    
            elif current_count > target_count and config.get('auto_delete_excess', False):
                # –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–π–≤—ñ –∫–æ–¥–∏
                excess = current_count - target_count
                process_logger.info(f"‚ûñ –ü—Ä–æ—Ü–µ—Å {process_id}: –î–ª—è {amount} –≥—Ä–Ω –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ {excess} –∑–∞–π–≤–∏—Ö –∫–æ–¥—ñ–≤")
                
                codes_to_delete = active_codes[-excess:]  # –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ
                
                # –í–ê–ñ–õ–ò–í–û: –ü–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ–π —Å—É–º—ñ
                # —â–æ–± –∫–æ–¥–∏ –±—É–ª–∏ –≤–∏–¥–∏–º—ñ –≤ —Ç–∞–±–ª–∏—Ü—ñ
                process_logger.info(f"üîç –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ —Å—É–º—ñ {amount} –≥—Ä–Ω –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º...")
                
                # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
                clear_all_filters(iframe)
                
                # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ BON —Ñ—ñ–ª—å—Ç—Ä
                apply_bon_filter_once(iframe)
                
                # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ–π —Å—É–º—ñ
                if apply_amount_range_filter(iframe, amount, amount):
                    # –û—Ç—Ä–∏–º—É—î–º–æ page –∑ promo_service
                    page = promo_service.page if hasattr(promo_service, 'page') else None
                    delete_result = delete_specific_promo_codes(iframe, codes_to_delete, page)
                    deleted_count = delete_result.get('deleted', 0) if isinstance(delete_result, dict) else delete_result
                    total_operations['deleted'] += deleted_count
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
                    active_codes = active_codes[:-deleted_count] if deleted_count > 0 else active_codes
                    
                    process_logger.info(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {deleted_count} –∑ {excess} –∫–æ–¥—ñ–≤ –¥–ª—è {amount} –≥—Ä–Ω")
                else:
                    process_logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
                
                # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó —Ä–æ–±–æ—Ç–∏
                apply_bon_filter_once(iframe)
                apply_amount_range_filter(iframe, config['start_amount'], config['end_amount'])
            else:
                total_operations['unchanged'] += 1
                
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ü—ñ—î—ó —Å—É–º–∏
            codes_data[amount] = active_codes
        
        process_logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å {process_id}: –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        return {
            'success': True,
            'codes_data': codes_data,
            'operations': total_operations
        }
        
    except Exception as e:
        process_logger.error(f"‚ùå –ü—Ä–æ—Ü–µ—Å {process_id}: –ü–æ–º–∏–ª–∫–∞ –≤ —Ä–æ–±–æ—á—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó: {e}")
        return {'success': False, 'error': str(e)}
    finally:
        try:
            if 'browser_manager' in locals() and browser_manager:
                if hasattr(browser_manager, 'close'):
                    browser_manager.close()
                elif hasattr(browser_manager, 'cleanup'):
                    browser_manager.cleanup()
                elif hasattr(browser_manager, 'browser') and browser_manager.browser:
                    browser_manager.browser.close()
        except Exception as cleanup_error:
            process_logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –±—Ä–∞—É–∑–µ—Ä–∞: {cleanup_error}")

def generate_random_bon_code(existing_codes):
    """
    –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π BON –∫–æ–¥, —è–∫–∏–π –Ω–µ —ñ—Å–Ω—É—î –≤ —Å–ø–∏—Å–∫—É —ñ—Å–Ω—É—é—á–∏—Ö.
    
    Args:
        existing_codes: —Å–ø–∏—Å–æ–∫ —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–¥—ñ–≤
        
    Returns:
        str: –Ω–æ–≤–∏–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π BON –∫–æ–¥
    """
    while True:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–¥ —Ñ–æ—Ä–º–∞—Ç—É BON + 6 —Å–∏–º–≤–æ–ª—ñ–≤
        suffix = generate_random_string(6)
        new_code = f"BON{suffix}"
        
        if new_code not in existing_codes:
            return new_code

def parallel_promo_management():
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏.
    –ó–∞–ø—É—Å–∫–∞—î –¥–µ–∫—ñ–ª—å–∫–∞ –ø—Ä–æ—Ü–µ—Å—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ä—ñ–∑–Ω–∏—Ö –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤ —Å—É–º,
    –∞ –ø–æ—Ç—ñ–º –∑–±–∏—Ä–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–∞ –∑–∞–ø–∏—Å—É—î —ó—Ö –≤ S3.
    """
    logger.info("üöÄ –ü–û–ß–ê–¢–û–ö –ü–ê–†–ê–õ–ï–õ–¨–ù–û–ì–û –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ü–†–û–ú–û–ö–û–î–ê–ú–ò")
    logger.info("=" * 60)
    
    start_amount = CONFIG['start_amount']
    end_amount = CONFIG['end_amount']
    num_processes = CONFIG['parallel_processes']
    
    logger.info(f"‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏:")
    logger.info(f"  üìä –î—ñ–∞–ø–∞–∑–æ–Ω —Å—É–º: {start_amount}-{end_amount}")
    logger.info(f"  üîÑ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—ñ–≤: {num_processes}")
    logger.info(f"  ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–æ—Ü–µ—Å—É: {CONFIG['process_timeout']} —Å–µ–∫")
    
    # –†–æ–∑–¥—ñ–ª—è—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
    ranges = split_range_for_processes(start_amount, end_amount, num_processes)
    logger.info(f"üìã –î—ñ–∞–ø–∞–∑–æ–Ω–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—ñ–≤:")
    for i, (start, end) in enumerate(ranges):
        logger.info(f"  –ü—Ä–æ—Ü–µ—Å {i+1}: {start}-{end} ({end-start+1} —Å—É–º)")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —á–µ—Ä–≥—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    result_queue = Queue()
    processes = []
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å–∏
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤...")
    for i, (start, end) in enumerate(ranges):
        process_id = i + 1
        p = Process(
            target=worker_process,
            args=(process_id, start, end, result_queue)
        )
        p.start()
        processes.append(p)
        logger.info(f"  ‚úÖ –ü—Ä–æ—Ü–µ—Å {process_id} –∑–∞–ø—É—â–µ–Ω–æ")
    
    # –ó–±–∏—Ä–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    logger.info("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—ñ–≤...")
    results = []
    
    # –ß–µ–∫–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—ñ–¥ –≤—Å—ñ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤
    for i in range(len(processes)):
        try:
            result = result_queue.get(timeout=CONFIG['process_timeout'])
            results.append(result)
            logger.info(f"üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥ –ø—Ä–æ—Ü–µ—Å—É {result['process_id']}")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø—Ä–æ—Ü–µ—Å—É: {e}")
    
    # –ó–∞–≤–µ—Ä—à—É—î–º–æ –≤—Å—ñ –ø—Ä–æ—Ü–µ—Å–∏
    for i, p in enumerate(processes):
        p.join(timeout=10)  # –î–∞—î–º–æ 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        if p.is_alive():
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å {i+1} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è, –∑–∞–≤–µ—Ä—à—É—î–º–æ –ø—Ä–∏–º—É—Å–æ–≤–æ")
            p.terminate()
            p.join()
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    logger.info("üìä –ê–ù–ê–õ–Ü–ó –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í:")
    all_codes_data = {}
    total_operations = {'created': 0, 'deleted': 0, 'unchanged': 0}
    successful_processes = 0
    
    for result in results:
        process_id = result['process_id']
        if result['success']:
            successful_processes += 1
            logger.info(f"  ‚úÖ –ü—Ä–æ—Ü–µ—Å {process_id}: –£—Å–ø—ñ—à–Ω–æ ({result['start_amount']}-{result['end_amount']})")
            
            # –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
            all_codes_data.update(result['codes_data'])
            
            # –î–æ–¥–∞—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—ó
            for op, count in result['operations'].items():
                total_operations[op] += count
        else:
            logger.error(f"  ‚ùå –ü—Ä–æ—Ü–µ—Å {process_id}: –ü–æ–º–∏–ª–∫–∞ - {result.get('error', 'Unknown error')}")
    
    logger.info(f"üìà –ü—ñ–¥—Å—É–º–æ–∫ –æ–ø–µ—Ä–∞—Ü—ñ–π:")
    logger.info(f"  ‚ûï –°—Ç–≤–æ—Ä–µ–Ω–æ: {total_operations['created']}")
    logger.info(f"  ‚ûñ –í–∏–¥–∞–ª–µ–Ω–æ: {total_operations['deleted']}")
    logger.info(f"  ‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤: {successful_processes}/{len(processes)}")
    
    # –ó–∞–ø–∏—Å—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ S3 (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î —É—Å–ø—ñ—à–Ω—ñ –ø—Ä–æ—Ü–µ—Å–∏)
    if successful_processes > 0 and CONFIG['sync_s3']:
        logger.info("‚òÅÔ∏è –ó–∞–ø–∏—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤ S3...")
        
        # –ì–æ—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è S3
        s3_data = {}
        for amount, codes in all_codes_data.items():
            s3_data[str(amount)] = codes
        
        # –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
        s3_data['_metadata'] = {
            'last_updated': datetime.datetime.now().isoformat(),
            'total_processes': len(processes),
            'successful_processes': successful_processes,
            'operations': total_operations,
            'config': {
                'target_codes_per_amount': CONFIG['target_codes_per_amount'],
                'parallel_processes': CONFIG['parallel_processes']
            }
        }
        
        if upload_to_s3(s3_data):
            logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ S3")
        else:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –≤ S3")
    
    logger.info("üèÅ –ü–ê–†–ê–õ–ï–õ–¨–ù–ï –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ü–†–û–ú–û–ö–û–î–ê–ú–ò –ó–ê–í–ï–†–®–ï–ù–û")
    return successful_processes == len(processes)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
import datetime

# –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
log_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'logs')
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

# –§–æ—Ä–º—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –ª–æ–≥—É –∑ –¥–∞—Ç–æ—é —Ç–∞ —á–∞—Å–æ–º
log_timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
log_filename = os.path.join(log_dir, f'promo_generator_{log_timestamp}.log')

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–¥–Ω–æ—á–∞—Å–Ω–æ —É —Ñ–∞–π–ª —Ç–∞ –∫–æ–Ω—Å–æ–ª—å
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
log_format = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —É –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setFormatter(log_format)
logger.addHandler(console_handler)

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —É —Ñ–∞–π–ª
file_handler = logging.FileHandler(log_filename, encoding='utf-8')
file_handler.setFormatter(log_format)
logger.addHandler(file_handler)

# –í–∏–º–∏–∫–∞—î–º–æ –ø–æ—à–∏—Ä–µ–Ω–Ω—è –ª–æ–≥—ñ–≤, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –≤—ñ–¥ basicConfig
logger.propagate = False

logger.info(f"üîç –õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –õ–æ–≥–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É: {log_filename}")

def generate_random_string(length):
    """–ì–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä—è–¥–æ–∫ —ñ–∑ –≤–µ–ª–∏–∫–∏—Ö –ª—ñ—Ç–µ—Ä —Ç–∞ —Ü–∏—Ñ—Ä."""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

def apply_amount_filter_improved(iframe, amount):
    """
    üí∞ –ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ—ñ–ª—å—Ç—Ä –ø–æ —Å—É–º—ñ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.
    
    –í–ê–ñ–õ–ò–í–û: –°–ø–æ—á–∞—Ç–∫—É –æ—á–∏—â–∞—î —ñ—Å–Ω—É—é—á–∏–π —Ñ—ñ–ª—å—Ç—Ä –ø–æ —Å—É–º—ñ, –∞ –ø–æ—Ç—ñ–º –∑–∞—Å—Ç–æ—Å–æ–≤—É—î –Ω–æ–≤–∏–π.
    
    Args:
        iframe: iframe –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        amount (int): —Å—É–º–∞ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        
    Returns:
        bool: —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞
    """
    try:
        logger.info(f"üí∞ –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ —Å—É–º—ñ: {amount}")
        
        return apply_amount_range_filter(iframe, amount, amount)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∞: {e}")
        return False

def apply_amount_range_filter(iframe, start_amount, end_amount):
    """
    üí∞ –ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ—ñ–ª—å—Ç—Ä –ø–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Å—É–º –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.
    
    Args:
        iframe: iframe –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        start_amount (int): –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ (–≤–∫–ª—é—á–Ω–æ)
        end_amount (int): –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞ (–≤–∫–ª—é—á–Ω–æ)
        
    Returns:
        bool: —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞
    """
    try:
        logger.info(f"üí∞ –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Å—É–º: {start_amount}-{end_amount} –≥—Ä–Ω")
        
        # 1. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–†–æ–∑–º—ñ—Ä –∑–Ω–∏–∂–∫–∏" (–∫–æ–ª–æ–Ω–∫–∞ 4778)
        amount_header = iframe.locator('#header_id_4778')
        if not amount_header.count():
            logger.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–†–æ–∑–º—ñ—Ä –∑–Ω–∏–∂–∫–∏'")
            return False
        
        logger.info("üñ±Ô∏è –ù–∞–≤–æ–¥–∏–º–æ –º–∏—à–∫—É –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–†–æ–∑–º—ñ—Ä –∑–Ω–∏–∂–∫–∏'...")
        amount_header.hover()
        time.sleep(0.3)  # –ö–æ—Ä–æ—Ç–∫–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ—è–≤–∏ —Ñ—ñ–ª—å—Ç—Ä–∞
        
        # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑'—è–≤–∏–≤—Å—è –±–ª–æ–∫ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        filter_block = iframe.locator('#sortingBlock_4778')
        if not filter_block.count():
            logger.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –±–ª–æ–∫ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")
            return False
        
        # 3. –ß–µ–∫–∞—î–º–æ —â–æ–± –ø–æ–ª—è —Å—Ç–∞–ª–∏ –≤–∏–¥–∏–º–∏–º–∏
        from_field = iframe.locator('#sortingBlock_4778 input[name="text1"][placeholder="–≤—ñ–¥"]')
        to_field = iframe.locator('#sortingBlock_4778 input[name="text2"][placeholder="–¥–æ"]')
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–æ –∫–ª—ñ–∫–∞—î–º–æ –Ω–∞ –±–ª–æ–∫ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —â–æ–± –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø–æ–ª—è
        filter_block.click()
        time.sleep(0.3)
        
        if not from_field.count() or not to_field.count():
            logger.error("‚ùå –ü–æ–ª—è '–≤—ñ–¥' —ñ '–¥–æ' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        # 4. –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É
        logger.info(f"üìù –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –¥—ñ–∞–ø–∞–∑–æ–Ω—É: –≤—ñ–¥ {start_amount} –¥–æ {end_amount}...")
        
        from_field.click()
        from_field.fill(str(start_amount))
        time.sleep(0.3)
        
        to_field.click()
        to_field.fill(str(end_amount))
        time.sleep(0.3)
        
        # 5. –ù–∞—Ç–∏—Å–∫–∞—î–º–æ Enter –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞
        logger.info("‚å®Ô∏è –ù–∞—Ç–∏—Å–∫–∞—î–º–æ Enter –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω—É...")
        to_field.press('Enter')
        
        # –í–ª–∞—Å–Ω–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        logger.info("‚è≥ –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Å—É–º...")
        time.sleep(1.0)  # –ó–±—ñ–ª—å—à—É—é —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É

        logger.info(f"‚úÖ –§—ñ–ª—å—Ç—Ä –ø–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Å—É–º {start_amount}-{end_amount} —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω—É: {e}")
        return False

def apply_code_filter_improved(iframe, search_term="BON"):
    """
    üîç –ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ—ñ–ª—å—Ç—Ä –ø–æ –∫–æ–¥—É –ø—Ä–æ–º–æ–∫–æ–¥—É –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.
    
    –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ö–æ–¥", –∞–∫—Ç–∏–≤—É—î –ø–æ—à—É–∫ —ñ —Ñ—ñ–ª—å—Ç—Ä—É—î –ø–æ –∑–∞–¥–∞–Ω–æ–º—É —Ç–µ—Ä–º—ñ–Ω—É
    (–∑–∞–∑–≤–∏—á–∞–π "BON" –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤).
    
    Args:
        iframe: iframe –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ  
        search_term (str): —Ç–µ—Ä–º—ñ–Ω –¥–ª—è –ø–æ—à—É–∫—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º "BON")
        
    Returns:
        bool: —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞
    """
    try:
        logger.info(f"üîç –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ –∫–æ–¥—É: '{search_term}'...")
        
        # 1. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ö–æ–¥" (–∫–æ–ª–æ–Ω–∞ 4776)
        code_header = iframe.locator('#header_id_4776')
        if not code_header.count():
            logger.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–ö–æ–¥'")
            return False
        
        logger.info("üñ±Ô∏è –ù–∞–≤–æ–¥–∏–º–æ –º–∏—à–∫—É –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–ö–æ–¥'...")
        code_header.hover()
        time.sleep(0.2)  # –ó–º–µ–Ω—à—É—é –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ—è–≤–∏ —Ñ—ñ–ª—å—Ç—Ä–∞ –∑ 0.5 –Ω–∞ 0.2
        
        # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑'—è–≤–∏–≤—Å—è –±–ª–æ–∫ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        filter_block = iframe.locator('#sortingBlock_4776')
        if not filter_block.count():
            logger.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –±–ª–æ–∫ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –¥–ª—è –∫–æ–¥—É")
            return False
        
        # 3. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–ª–µ –ø–æ—à—É–∫—É
        search_field = iframe.locator('#sortingBlock_4776 input[placeholder="–ø–æ—à—É–∫..."]')
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–æ –∫–ª—ñ–∫–∞—î–º–æ –Ω–∞ –±–ª–æ–∫ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —â–æ–± –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø–æ–ª–µ
        filter_block.click()
        time.sleep(0.3)  # –ó–º–µ–Ω—à—É—é –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑ 1 –Ω–∞ 0.3
        
        if not search_field.count():
            logger.error("‚ùå –ü–æ–ª–µ –ø–æ—à—É–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        logger.info(f"üìù –ó–∞–ø–æ–≤–Ω—é—î–º–æ –ø–æ–ª–µ –ø–æ—à—É–∫—É: '{search_term}'")
        
        # 4. –û—á–∏—â–∞—î–º–æ —Ç–∞ –∑–∞–ø–æ–≤–Ω—é—î–º–æ –ø–æ–ª–µ –ø–æ—à—É–∫—É
        search_field.click()
        search_field.clear()
        search_field.fill(search_term)
        time.sleep(0.2)  # –ó–º–µ–Ω—à—É—é –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑ 0.5 –Ω–∞ 0.2
        
        # 5. –ù–∞—Ç–∏—Å–∫–∞—î–º–æ Enter –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞
        logger.info("‚å®Ô∏è –ù–∞—Ç–∏—Å–∫–∞—î–º–æ Enter –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞...")
        search_field.press('Enter')
        
        # –í–ª–∞—Å–Ω–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        logger.info("‚è≥ –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ –∫–æ–¥—É...")
        try:
            # –ß–µ–∫–∞—î–º–æ –Ω–∞ –ª–æ–∞–¥–µ—Ä, —è–∫—â–æ –≤—ñ–Ω –∑'—è–≤–∏—Ç—å—Å—è
            loader = iframe.locator('#datagrid-loader')
            try:
                loader.wait_for(state='visible', timeout=1000)  # –ó–º–µ–Ω—à—É—é –∑ 2000 –Ω–∞ 1000
                logger.debug("–õ–æ–∞–¥–µ—Ä –∑'—è–≤–∏–≤—Å—è, —á–µ–∫–∞—î–º–æ –π–æ–≥–æ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è...")
                loader.wait_for(state='hidden', timeout=5000)  # –ó–º–µ–Ω—à—É—é –∑ 10000 –Ω–∞ 5000
                logger.debug("‚úÖ –õ–æ–∞–¥–µ—Ä –∑–Ω–∏–∫ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ –∫–æ–¥—É")
            except Exception:
                logger.debug("–õ–æ–∞–¥–µ—Ä –Ω–µ –∑'—è–≤–∏–≤—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ networkidle")
                iframe.page.wait_for_load_state('networkidle', timeout=3000)  # –ó–º–µ–Ω—à—É—é –∑ 5000 –Ω–∞ 3000
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ –∫–æ–¥—É: {e}")
        
        logger.info(f"‚úÖ –§—ñ–ª—å—Ç—Ä –ø–æ –∫–æ–¥—É '{search_term}' —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∞ –ø–æ –∫–æ–¥—É: {e}")
        return False


def apply_bon_filter_once(iframe):
    """
    –ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ—ñ–ª—å—Ç—Ä –ø–æ –∫–æ–¥—É 'BON' –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å—ñ—Ö —Å—É–º.
    
    –í–ê–ñ–õ–ò–í–û: –¶–µ–π —Ñ—ñ–ª—å—Ç—Ä –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –û–î–ò–ù –†–ê–ó –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –æ–±—Ä–æ–±–∫–∏ –≤—Å—ñ—Ö —Å—É–º.
    –ü—ñ—Å–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ —Ñ—ñ–ª—å—Ç—Ä–∞, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ–≤–Ω–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
    –≤—Å—ñ—Ö BON –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –∑ —É—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫.
    """
    try:
        logger.info("üîç –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ –∫–æ–¥—É 'BON' (–æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫)...")
        
        # –°–ø–æ—á–∞—Ç–∫—É —Å–∫–∏–¥–∞—î–º–æ –≤—Å—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
        clear_all_filters(iframe)
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ BON
        success = apply_code_filter_improved(iframe, "BON")
        
        if success:
            logger.info("‚úÖ –§—ñ–ª—å—Ç—Ä BON —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ, —Ç–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –∑–±–∏—Ä–∞—Ç–∏ –¥–∞–Ω—ñ –∑ —É—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
        else:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä BON")
            
        return success
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ BON —Ñ—ñ–ª—å—Ç—Ä–∞: {e}")
        return False

def clear_all_filters(iframe):
    """
    –°–∫–∏–¥–∞—î –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ.
    """
    try:
        logger.info("üßπ –°–∫–∏–¥–∞—î–º–æ –≤—Å—ñ —Ñ—ñ–ª—å—Ç—Ä–∏...")
        
        # –ü—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Å–∫–∏–¥–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
        reset_all_button = iframe.locator('#reset_datagrid')
        if reset_all_button.count() > 0:
            logger.info("üîÑ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É —Å–∫–∏–¥–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤, –Ω–∞—Ç–∏—Å–∫–∞—î–º–æ...")
            reset_all_button.click()
            time.sleep(1)
            return True
            
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤...")
        iframe.evaluate('document.location.reload()')
        time.sleep(2)
        
        # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        try:
            loader = iframe.locator('#datagrid-loader')
            loader.wait_for(state='hidden', timeout=5000)
        except Exception:
            iframe.page.wait_for_load_state('networkidle', timeout=3000)
            
        return True
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤: {e}")
        return False

def get_all_bon_codes_from_table(iframe):
    """
    –û—Ç—Ä–∏–º—É—î –≤—Å—ñ **–ê–ö–¢–ò–í–ù–Ü** BON –∫–æ–¥–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ (–ø—ñ—Å–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤).
    –û–±—Ä–æ–±–ª—è—î –≤—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó.
    
    Args:
        iframe: –ï–ª–µ–º–µ–Ω—Ç iframe —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
    
    Returns:
        dict: {—Å—É–º–∞: [—Å–ø–∏—Å–æ–∫_–æ–±'—î–∫—Ç—ñ–≤_–∫–æ–¥—ñ–≤]} - –∫–æ–¥–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    """
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ codes_by_amount –Ω–∞ –ø–æ—á–∞—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
    codes_by_amount = {}
    duplicates_info = {}  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç—É—Ç, —â–æ–± –±—É–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ finally
    
    try:
        logger.info("üìã –ü–û–ß–ê–¢–û–ö –∑–±–æ—Ä—É –≤—Å—ñ—Ö BON –∫–æ–¥—ñ–≤ –∑ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ (–∑ —É—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫)...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        pager_text = iframe.locator('.datagrid-pager .pages').first.inner_text().strip()
        logger.info(f"üìÑ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é: {pager_text}")
        
        # –ó–º–µ–Ω—à–µ–Ω–∞ –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó –≤ HEADED —Ä–µ–∂–∏–º—ñ
        headed_mode = os.getenv('PLAYWRIGHT_HEADED', 'True').lower() in ['true', '1', 'yes']
        if headed_mode:
            logger.info("üñ•Ô∏è HEADED —Ä–µ–∂–∏–º: –ø–∞—É–∑–∞ 0.5 —Å–µ–∫ –¥–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó...")
            time.sleep(0.5)  # –ó–º–µ–Ω—à—É—é –∑ 2 —Å–µ–∫ –¥–æ 0.5 —Å–µ–∫

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Set –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        codes_by_amount = {}
        all_codes_set = set()  # –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ–¥—ñ–≤
        duplicates_info = {}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏: {–∫–æ–¥: [—Å–ø–∏—Å–æ–∫_—Å—É–º]}
        current_page = 1
        has_next_page = True
        total_processed_rows = 0
        
        while has_next_page:
            logger.info(f"üìÑ –û–±—Ä–æ–±–∫–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {current_page}...")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
            all_rows = iframe.locator('table#datagrid tbody tr')
            rows_count = all_rows.count()
            
            logger.info(f"üìã –ê–Ω–∞–ª—ñ–∑—É—î–º–æ {rows_count} —Ä—è–¥–∫—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {current_page}...")
            
            if rows_count == 0:
                logger.warning(f"‚ö†Ô∏è –ù–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {current_page} –Ω–µ–º–∞—î —Ä—è–¥–∫—ñ–≤! –ú–æ–∂–ª–∏–≤–æ –∫—ñ–Ω–µ—Ü—å –¥–∞–Ω–∏—Ö.")
                break
            
            # –õ—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è —Ü—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            page_codes_count = 0
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—è–¥–∫–∏ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
            for i in range(rows_count):
                try:
                    row = all_rows.nth(i)
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –≤–∞–ª—ñ–¥–Ω–∏–π —Ä—è–¥–æ–∫ –∑ –¥–∞–Ω–∏–º–∏
                    cells = row.locator('td')
                    cell_count = cells.count()
                    if not row.is_visible() or cell_count < 5:
                        continue
                    
                    # –ö–æ–¥ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ 4-–π –∫–æ–ª–æ–Ω—Ü—ñ (—ñ–Ω–¥–µ–∫—Å 3)
                    code_cell = cells.nth(3)
                    code = code_cell.inner_text().strip()
                    
                    if not code or not code.startswith('BON'):
                        continue
                    
                    # –†–æ–∑–º—ñ—Ä –∑–Ω–∏–∂–∫–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ 5-–π –∫–æ–ª–æ–Ω—Ü—ñ (—ñ–Ω–¥–µ–∫—Å 4)
                    amount_cell = cells.nth(4)
                    amount_text = amount_cell.inner_text().strip()
                    
                    # –ü–∞—Ä—Å–∏–º–æ —Å—É–º—É –∑ —Ç–µ–∫—Å—Ç—É (–º–æ–∂–µ –±—É—Ç–∏ "168 –≥—Ä–Ω" –∞–±–æ –ø—Ä–æ—Å—Ç–æ "168")
                    amount_match = re.search(r'(\d+)', amount_text)
                    if not amount_match:
                        logger.debug(f"  ‚ö†Ô∏è –ù–ï –†–û–ó–ü–Ü–ó–ù–ê–ù–û –°–£–ú–£: –¥–ª—è –∫–æ–¥—É {code} (–∫–æ–ª–æ–Ω–∫–∞: '{amount_text}') - —Å—Ç–æ—Ä—ñ–Ω–∫–∞ {current_page}, —Ä—è–¥–æ–∫ {i+1}")
                        continue
                    
                    amount = int(amount_match.group(1))
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –¥—É–±–ª—ñ–∫–∞—Ç
                    if code in all_codes_set:
                        # –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –Ü–ù–§–û–†–ú–ê–¶–Ü–Æ –ü–†–û –î–£–ë–õ–Ü–ö–ê–¢
                        if code not in duplicates_info:
                            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Å—É–º—É —Ü—å–æ–≥–æ –∫–æ–¥—É
                            original_amount = None
                            for check_amount, check_code_objects in codes_by_amount.items():
                                check_codes = [obj['code'] for obj in check_code_objects]
                                if code in check_codes:
                                    original_amount = check_amount
                                    break
                            
                            if original_amount:
                                duplicates_info[code] = [original_amount]
                        
                        # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—É–º—É –¥–æ —Å–ø–∏—Å–∫—É —Å—É–º –¥–ª—è —Ü—å–æ–≥–æ –∫–æ–¥—É
                        if amount not in duplicates_info[code]:
                            duplicates_info[code].append(amount)
                        
                        # –õ–æ–≥—É—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
                        if len(set(duplicates_info[code])) > 1:
                            logger.error(f"  ‚ùå –ö–†–ò–¢–ò–ß–ù–ò–ô –î–£–ë–õ–Ü–ö–ê–¢: {code} –º–∞—î –†–Ü–ó–ù–Ü –°–£–ú–ò: {sorted(duplicates_info[code])} –≥—Ä–Ω! –ü–æ—Ç–æ—á–Ω–∞: {amount} –≥—Ä–Ω")
                        
                        continue
                    
                    # –î–æ–¥–∞—î–º–æ –∫–æ–¥ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
                    if code not in all_codes_set:
                        all_codes_set.add(code)
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥—É (–∫–æ–ª–æ–Ω–∫–∞ 3, —ñ–Ω–¥–µ–∫—Å 2)
                    status_cell = cells.nth(2)
                    status_text = status_cell.inner_text().strip().lower()
                    is_active = status_text in ['—Ç–∞–∫', 'yes', '–∞–∫—Ç–∏–≤–Ω–∏–π', 'active']
                    
                    # –î–æ–¥–∞—î–º–æ –∫–æ–¥ –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞—Å–∏–≤—É
                    if amount not in codes_by_amount:
                        codes_by_amount[amount] = []
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–¥ —è–∫ –æ–±'—î–∫—Ç –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º
                    code_obj = {
                        'code': code,
                        'status': 'active' if is_active else 'inactive',
                        'amount': amount
                    }
                    
                    # –°–æ—Ä—Ç—É—î–º–æ: –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–æ–¥–∏ –ø–µ—Ä—à–∏–º–∏, –ø–æ—Ç—ñ–º –∞–∫—Ç–∏–≤–Ω—ñ
                    if not is_active:
                        codes_by_amount[amount].insert(0, code_obj)  # –ù–µ–∞–∫—Ç–∏–≤–Ω—ñ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
                    else:
                        codes_by_amount[amount].append(code_obj)     # –ê–∫—Ç–∏–≤–Ω—ñ –≤ –∫—ñ–Ω–µ—Ü—å

                    page_codes_count += 1
                    
                except Exception as row_error:
                    logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä—è–¥–∫–∞ {i}: {row_error}")
                    continue
                    
            logger.info(f"‚úÖ –î–æ–¥–∞–Ω–æ {page_codes_count} –∫–æ–¥—ñ–≤ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {current_page}")
            total_processed_rows += page_codes_count
            
            # –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∏—Å–ª—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–¥–∞—Ö –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
            if page_codes_count > 0:
                logger.info(f"üìä –°—Ç–æ—Ä—ñ–Ω–∫–∞ {current_page}: {page_codes_count} –∫–æ–¥—ñ–≤")
                # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–æ–∑–ø–æ–¥—ñ–ª —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –∫–æ–¥–∏ —ñ –≤–∫–ª—é—á–µ–Ω–µ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
                if CONFIG.get('verbose_logging', False):
                    for amount in sorted(codes_by_amount.keys()):
                        count = len(codes_by_amount[amount])
                        if count > 0:
                            active_count = sum(1 for obj in codes_by_amount[amount] if obj['status'] == 'active')
                            inactive_count = count - active_count
                            logger.info(f"  üí∞ {amount} –≥—Ä–Ω: {active_count} –∞–∫—Ç–∏–≤–Ω–∏—Ö + {inactive_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö = {count} –≤—Å—å–æ–≥–æ")
            
            # –õ–æ–≥—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ–¥—ñ–≤
            logger.info(f"üìù –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ–¥—ñ–≤ –ø—ñ—Å–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {current_page}: {len(all_codes_set)}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            # –û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥ –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Å—Ç—Ä—ñ–ª–∫–∏ "–≤–ø—Ä–∞–≤–æ" –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
            next_page_button = iframe.locator('.datagrid-pager .fl-l.r.active').first
            has_next_page = has_next_page & next_page_button.count() > 0
            
            # –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
            if has_next_page:
                logger.info(f"üìë –Ñ –Ω–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—ñ—Å–ª—è {current_page}")
            else:
                logger.info(f"üìë –¶–µ –æ—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ ({current_page})")
            
            if has_next_page:
                # –ü–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
                previous_page_info = iframe.locator('.datagrid-pager .pages').first.inner_text().strip()
                logger.info(f"üìë –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º: {previous_page_info}")
                
                # –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Ö—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥—ñ–≤ –¥–æ –ø–µ—Ä–µ—Ö–æ–¥—É
                previous_all_codes_count = len(all_codes_set)
                logger.info(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ–¥—ñ–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º: {previous_all_codes_count}")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫–æ–¥ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                last_processed_codes = list(all_codes_set)[-10:] if all_codes_set else []
                logger.info(f"üîç –û—Å—Ç–∞–Ω–Ω—ñ 10 –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –∫–æ–¥—ñ–≤: {last_processed_codes}")
                
                logger.info(f"üìë –ü–ï–†–ï–•–Ü–î: –∑ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {current_page} –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É {current_page + 1}...")
                
                try:
                    # –Ø–≤–Ω–æ –æ—á—ñ–∫—É—î–º–æ, —â–æ–± –∫–Ω–æ–ø–∫–∞ –±—É–ª–∞ –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–æ—é
                    next_page_button.wait_for(state='visible', timeout=3000)
                    
                    # –ö–ª—ñ–∫–∞—î–º–æ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
                    logger.info(f"üñ±Ô∏è –ö–ª—ñ–∫–∞—î–º–æ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏...")
                    next_page_button.click()
                    time.sleep(0.5)  # –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ—Ö–æ–¥—É
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
                    current_page += 1
                    logger.info(f"üìÑ –ü–µ—Ä–µ–π—à–ª–∏ –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {current_page}")
                    
                    # –ü–æ—á–µ–∫–∞—î–º–æ —è–≤–Ω–æ –Ω–∞ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –≤—ñ–Ω —î
                    logger.info(f"‚è≥ –ß–µ–∫–∞—î–º–æ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏...")
                    
                    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ª–æ–∞–¥–µ—Ä–∞
                    loader = iframe.locator('#datagrid-loader')
                    if loader.count() > 0:
                        try:
                            loader.wait_for(state='visible', timeout=1000)  # –°–ø–æ—á–∞—Ç–∫—É —á–µ–∫–∞—î–º–æ, —â–æ–± –ª–æ–∞–¥–µ—Ä —Å—Ç–∞–≤ –≤–∏–¥–∏–º–∏–º
                            logger.info(f"üîÑ –õ–æ–∞–¥–µ—Ä –∑'—è–≤–∏–≤—Å—è, —á–µ–∫–∞—î–º–æ –π–æ–≥–æ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è...")
                            loader.wait_for(state='hidden', timeout=5000)  # –ü–æ—Ç—ñ–º —á–µ–∫–∞—î–º–æ, —â–æ–± –≤—ñ–Ω –∑–Ω–∏–∫
                            logger.info(f"‚úÖ –õ–æ–∞–¥–µ—Ä –∑–Ω–∏–∫, —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—å")
                        except Exception as loader_error:
                            logger.info(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –ª–æ–∞–¥–µ—Ä: {loader_error}")
                            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –ª–æ–∞–¥–µ—Ä, —á–µ–∫–∞—î–º–æ —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó –º–µ—Ä–µ–∂–µ–≤–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                            #iframe.page.wait_for_load_state('networkidle', timeout=3000)
                    else:
                        # –Ø–∫—â–æ –ª–æ–∞–¥–µ—Ä–∞ –Ω–µ–º–∞—î, –ø—Ä–æ—Å—Ç–æ –ø–æ—á–µ–∫–∞—î–º–æ
                        logger.info(f"‚è±Ô∏è –õ–æ–∞–¥–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —á–µ–∫–∞—î–º–æ 1.5 —Å–µ–∫—É–Ω–¥–∏...")
                        time.sleep(1.5)  # –î–∞—î–º–æ —á–∞—Å –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –¥—ñ–π—Å–Ω–æ –∑–º—ñ–Ω–∏–ª–∞—Å—è
                    new_page_info = iframe.locator('.datagrid-pager .pages').first.inner_text().strip()
                    logger.info(f"üìë –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –ø—ñ—Å–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É: {new_page_info}")
                    
                    # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–æ —ñ –ø—ñ—Å–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É
                    if previous_page_info == new_page_info:
                        logger.warning(f"‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –ü–ê–ì–Ü–ù–ê–¶–Ü–á! –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É!")
                        
                        # –°–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑
                        logger.info(f"üîÑ –°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏...")
                        next_page_button = iframe.locator('.datagrid-pager .fl-l.r.active').first
                        if next_page_button.count() > 0:
                            next_page_button.click()
                            time.sleep(2)  # –ó–±—ñ–ª—å—à–∏–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
                        else:
                            logger.error(f"‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–Ω–∏–∫–ª–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π —Å–ø—Ä–æ–±—ñ!")
                    
                except Exception as click_error:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É: {click_error}")
                    break
            else:
                logger.info(f"üìë –î–æ—Å—è–≥–Ω—É—Ç–æ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ({current_page}).")
        
        # –û–ë–†–û–ë–ö–ê –î–£–ë–õ–Ü–ö–ê–¢–Ü–í –ü–Ü–°–õ–Ø –ó–ë–û–†–£ –í–°–Ü–• –ö–û–î–Ü–í
        if duplicates_info:
            logger.warning(f"üîÑ –ó–ù–ê–ô–î–ï–ù–û {len(duplicates_info)} –î–£–ë–õ–Ü–ö–ê–¢–Ü–í –ü–Ü–î –ß–ê–° –ó–ë–û–†–£!")
            logger.info("üîß –ü–û–ß–ò–ù–ê–Ñ–ú–û –û–ë–†–û–ë–ö–£ –î–£–ë–õ–Ü–ö–ê–¢–Ü–í...")
            
            for code, amounts in duplicates_info.items():
                logger.info(f"üîç –û–±—Ä–æ–±–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç: {code} –¥–ª—è —Å—É–º: {amounts}")
                
                if len(amounts) == 1:
                    # –î—É–±–ª—ñ–∫–∞—Ç –∑ –æ–¥–Ω–∞–∫–æ–≤–æ—é —Å—É–º–æ—é - –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
                    logger.info(f"  ‚úÖ –ö–æ–¥ {code} –º–∞—î –æ–¥–Ω–∞–∫–æ–≤—É —Å—É–º—É {amounts[0]} –≥—Ä–Ω - –¥—É–±–ª—ñ–∫–∞—Ç –≤–∂–µ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π")
                else:
                    # –î—É–±–ª—ñ–∫–∞—Ç –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å—É–º–∞–º–∏ - –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –¥–æ –≤—Å—ñ—Ö —Å—É–º
                    logger.warning(f"  ‚ö†Ô∏è –ö–æ–¥ {code} –º–∞—î —Ä—ñ–∑–Ω—ñ —Å—É–º–∏: {amounts} –≥—Ä–Ω")
                    
                    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ, –≤ —è–∫—ñ–π —Å—É–º—ñ –∫–æ–¥ –≤–∂–µ —î
                    current_amount = None
                    for amount in amounts:
                        if amount in codes_by_amount:
                            code_objects = codes_by_amount[amount]
                            codes_list = [obj['code'] for obj in code_objects]
                            if code in codes_list:
                                current_amount = amount
                                break
                    
                    if current_amount:
                        logger.info(f"  üìç –ö–æ–¥ {code} –Ω–∞—Ä–∞–∑—ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Å—É–º—ñ {current_amount} –≥—Ä–Ω")
                        
                        # –î–æ–¥–∞—î–º–æ –∫–æ–¥ –¥–æ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö —Å—É–º –∑ —Ü—å–æ–≥–æ –¥—É–±–ª—ñ–∫–∞—Ç–∞
                        for amount in amounts:
                            if amount != current_amount:
                                if amount not in codes_by_amount:
                                    codes_by_amount[amount] = []
                                
                                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ–¥ –≤–∂–µ —î
                                codes_list = [obj['code'] for obj in codes_by_amount[amount]]
                                if code not in codes_list:
                                    # –î–æ–¥–∞—î–º–æ —è–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π –¥—É–±–ª—ñ–∫–∞—Ç
                                    duplicate_obj = {
                                        'code': code,
                                        'status': 'inactive',  # –î—É–±–ª—ñ–∫–∞—Ç–∏ –∑–∞–≤–∂–¥–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ
                                        'amount': amount
                                    }
                                    codes_by_amount[amount].append(duplicate_obj)
                                    logger.info(f"  ‚ûï –î–û–î–ê–ù–û: {code} –¥–æ —Å—É–º–∏ {amount} –≥—Ä–Ω (–¥—É–±–ª—ñ–∫–∞—Ç)")
                                else:
                                    logger.info(f"  ‚úÖ –ö–æ–¥ {code} –≤–∂–µ —î –≤ —Å—É–º—ñ {amount} –≥—Ä–Ω")
                    else:
                        logger.error(f"  ‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –ö–æ–¥ {code} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∂–æ–¥–Ω—ñ–π —Å—É–º—ñ!")
            
            logger.info("‚úÖ –û–ë–†–û–ë–ö–ê –î–£–ë–õ–Ü–ö–ê–¢–Ü–í –ó–ê–í–ï–†–®–ï–ù–ê!")
        else:
            logger.info("‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø—ñ–¥ —á–∞—Å –∑–±–æ—Ä—É –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ –∫–æ–¥–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—ñ–¥—Ä–∞—Ö–æ–≤–∞–Ω—ñ
        total_codes = sum(len(codes) for codes in codes_by_amount.values())
        logger.info(f"üìä –ü–Ü–î–°–£–ú–û–ö: –ó–∞–≥–∞–ª–æ–º –∑–Ω–∞–π–¥–µ–Ω–æ {total_codes} BON –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ (–≤–∫–ª—é—á–∞—é—á–∏ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ)")
        logger.info(f"üìä –ü–Ü–î–°–£–ú–û–ö: –ó–∞–≥–∞–ª–æ–º –æ–±—Ä–æ–±–ª–µ–Ω–æ {total_processed_rows} —Ä—è–¥–∫—ñ–≤")
        logger.info(f"üìö –ü–Ü–î–°–£–ú–û–ö: –ó–∞–≥–∞–ª–æ–º –æ–±—Ä–æ–±–ª–µ–Ω–æ {current_page} —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó")
        logger.info(f"üîç –ü–Ü–î–°–£–ú–û–ö: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ–¥—ñ–≤ —É all_codes_set: {len(all_codes_set)}")
        
        # –†–∞—Ö—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ –æ–∫—Ä–µ–º–æ
        active_count = 0
        inactive_count = 0
        for amount, code_objects in codes_by_amount.items():
            for obj in code_objects:
                if obj['status'] == 'active':
                    active_count += 1
                else:
                    inactive_count += 1
        
        logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –°–¢–ê–¢–£–°–ê–ú–ò: {active_count} –∞–∫—Ç–∏–≤–Ω–∏—Ö + {inactive_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö = {total_codes} –≤—Å—å–æ–≥–æ")
        
        # –ó–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä all_codes_set –∑ —Å—É–º–æ—é –∫–æ–¥—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö —Å—É–º
        if total_codes != len(all_codes_set):
            logger.warning(f"‚ö†Ô∏è –ù–ï–°–£–ú–Ü–°–ù–Ü–°–¢–¨ –î–ê–ù–ò–•: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ–¥—ñ–≤ ({len(all_codes_set)}) –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ —Å—É–º–∏ –∫–æ–¥—ñ–≤ –ø–æ —Å—É–º–∞–º ({total_codes})!")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
            logger.info(f"üîç –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –º–æ–∂–ª–∏–≤—ñ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤...")
            # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∫–æ–¥–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
            all_codes_list = []
            for amount, code_objects in codes_by_amount.items():
                for obj in code_objects:
                    all_codes_list.append(obj['code'])
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏
            code_counts = {}
            for code in all_codes_list:
                if code in code_counts:
                    code_counts[code] += 1
                else:
                    code_counts[code] = 1
            
            # –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
            duplicates = {code: count for code, count in code_counts.items() if count > 1}
            if duplicates:
                logger.error(f"‚ùå –ó–ù–ê–ô–î–ï–ù–û –î–£–ë–õ–Ü–ö–ê–¢–ò –í –î–ê–ù–ò–•: {len(duplicates)} –∫–æ–¥—ñ–≤ –¥—É–±–ª—é—é—Ç—å—Å—è!")
                for code, count in duplicates.items():
                    logger.error(f"  ‚ùå –ö–æ–¥ {code} –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç—å—Å—è {count} —Ä–∞–∑—ñ–≤")
                    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ, –≤ —è–∫–∏—Ö —Å—É–º–∞—Ö –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç—å—Å—è —Ü–µ–π –∫–æ–¥
                    amounts = []
                    for amount, code_objects in codes_by_amount.items():
                        codes_list = [obj['code'] for obj in code_objects]
                        if code in codes_list:
                            amounts.append(amount)
                    logger.error(f"  ‚ùå –ö–æ–¥ {code} –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç—å—Å—è –¥–ª—è —Å—É–º: {amounts}")
            else:
                logger.info(f"‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∫–æ–¥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∞–ª–µ —î –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –º—ñ–∂ all_codes_set —ñ —Å—É–º–æ—é –∫–æ–¥—ñ–≤ –ø–æ —Å—É–º–∞–º")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∏—Å–ª–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Å—É–º–∞–º —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
        if CONFIG.get('verbose_logging', False):
            logger.info(f"üìä –ü–Ü–î–°–£–ú–û–ö –ü–û –°–£–ú–ê–ú:")
            for amount, code_objects in sorted(codes_by_amount.items()):
                active_codes = [obj for obj in code_objects if obj['status'] == 'active']
                inactive_codes = [obj for obj in code_objects if obj['status'] == 'inactive']
                
                logger.info(f"  üí∞ {amount} –≥—Ä–Ω: {len(active_codes)} –∞–∫—Ç–∏–≤–Ω–∏—Ö + {len(inactive_codes)} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö = {len(code_objects)} –≤—Å—å–æ–≥–æ")
        
        # –ù–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç—É—Ç, —Ç–æ–º—É —â–æ return –±—É–¥–µ –≤ finally –±–ª–æ—Ü—ñ
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–æ—Ä—ñ BON –∫–æ–¥—ñ–≤: {e}")
        return {}
    finally:
                # –í–∏–∫–æ–Ω—É—î–º–æ –í–ê–õ–Ü–î–ê–¶–Ü–Æ –î–£–ë–õ–Ü–ö–ê–¢–Ü–í –ù–ê–í–Ü–¢–¨ –Ø–ö–©–û –ë–£–õ–ê –ü–û–ú–ò–õ–ö–ê
        # (—è–∫—â–æ codes_by_amount –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π)
        try:
            if codes_by_amount:  # –¢–µ–ø–µ—Ä codes_by_amount –∑–∞–≤–∂–¥–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π
                logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø—ñ—Å–ª—è –∑–±–æ—Ä—É –≤—Å—ñ—Ö –∫–æ–¥—ñ–≤...")
                
                # –ü–µ—Ä–µ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏, —è–∫—â–æ –≤–æ–Ω–∞ —î
                if duplicates_info:
                    logger.debug(f"üìä –ü–µ—Ä–µ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ {len(duplicates_info)} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó")
                    codes_by_amount = validate_duplicates_after_collection(codes_by_amount, duplicates_info, iframe)
                else:
                    codes_by_amount = validate_duplicates_after_collection(codes_by_amount)
                
                # –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
                total_codes_after = sum(len(codes) for codes in codes_by_amount.values())
                logger.info(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥—ñ–≤ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {total_codes_after}")
                
                # –í–∏–≤–æ–¥–∏–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–∫–ª—é—á–µ–Ω–µ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
                if CONFIG.get('verbose_logging', False):
                    logger.info(f"üìä –§–Ü–ù–ê–õ–¨–ù–ò–ô –ü–Ü–î–°–£–ú–û–ö –ü–û –°–£–ú–ê–ú:")
                    for amount, codes in sorted(codes_by_amount.items()):
                        active_count = sum(1 for obj in codes if obj['status'] == 'active')
                        inactive_count = len(codes) - active_count
                        logger.info(f"  üí∞ {amount} –≥—Ä–Ω: {active_count} –∞–∫—Ç–∏–≤–Ω–∏—Ö + {inactive_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö = {len(codes)} –≤—Å—å–æ–≥–æ")
                    
        except Exception as validation_error:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {validation_error}")
        
        # –ó–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ codes_by_amount (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π)
        return codes_by_amount



def smart_promo_management_main():
    """
    üéØ –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –°–ú–ê–†–¢ –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ü–†–û–ú–û–ö–û–î–ê–ú–ò
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–æ–Ω—É—î –ø–æ–≤–Ω–∏–π —Ü–∏–∫–ª —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:
    1. –ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ—ñ–ª—å—Ç—Ä BON —Ç–∞ –æ—Ç—Ä–∏–º—É—î –í–°–Ü –ø—Ä–æ–º–æ–∫–æ–¥–∏ –æ–¥—Ä–∞–∑—É –∑ —É—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    2. –í –ø–∞–º'—è—Ç—ñ –∞–Ω–∞–ª—ñ–∑—É—î –ø—Ä–æ–º–æ–∫–æ–¥–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—É–º–∏
    3. –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞—î –≤—Å—ñ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ –¥–ª—è –≤—Å—ñ—Ö —Å—É–º 
    4. –ü–æ—Ç—ñ–º –≤–∏–¥–∞–ª—è—î –≤—Å—ñ –Ω–∞–¥–ª–∏—à–∫–æ–≤—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ –¥–ª—è –≤—Å—ñ—Ö —Å—É–º
    5. –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –∑ S3
    
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é: –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤—Å—ñ –∫–æ–¥–∏ –æ–¥—Ä–∞–∑—É —ñ –æ–±—Ä–æ–±–ª—è—î –≤ –ø–∞–º'—è—Ç—ñ.
    
    Returns:
        bool: —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
    """
    logger.info("üéØ –ü–û–ß–ê–¢–û–ö –°–ú–ê–†–¢ –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ü–†–û–ú–û–ö–û–î–ê–ú–ò")
    logger.info("=" * 60)
    
    # –Ü–º–ø–æ—Ä—Ç–∏
    import sys
    import os
    
    parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    sys.path.insert(0, parent_dir)
    
    from replenish_promo_code_lambda.browser_manager import create_browser_manager
    from replenish_promo_code_lambda.promo_logic import PromoService
    from promo_smart import PromoSmartManager
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    target_count = CONFIG['target_codes_per_amount']
    start_amount = CONFIG['start_amount']
    end_amount = CONFIG['end_amount']
    sort_order = CONFIG['sort_order']
    auto_delete = CONFIG['auto_delete_excess']
    
    logger.info(f"‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:")
    logger.info(f"  üéØ –¶—ñ–ª—å–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥—ñ–≤ –Ω–∞ —Å—É–º—É: {target_count}")
    logger.info(f"  üí∞ –î—ñ–∞–ø–∞–∑–æ–Ω —Å—É–º: {start_amount}-{end_amount} –≥—Ä–Ω")
    logger.info(f"  üìä –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: {sort_order} ({'–∑—Ä–æ—Å—Ç–∞–Ω–Ω—è' if sort_order == 'asc' else '—Å–ø–∞–¥–∞–Ω–Ω—è'})")
    logger.info(f"  üóëÔ∏è –ê–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–π–≤–∏—Ö: {auto_delete}")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞
    headed_mode = os.getenv('PLAYWRIGHT_HEADED', 'true').lower() in ['true', '1', 'yes']
    if headed_mode:
        logger.info("üñ•Ô∏è HEADED —Ä–µ–∂–∏–º: –í–∏ –ø–æ–±–∞—á–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å —É –±—Ä–∞—É–∑–µ—Ä—ñ!")
    else:
        logger.info("üëª HEADLESS —Ä–µ–∂–∏–º: –û–±—Ä–æ–±–∫–∞ —É —Ñ–æ–Ω—ñ")
    
    browser_manager = create_browser_manager()
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—Ä–∞—É–∑–µ—Ä–∞
        logger.info("\nüöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—Ä–∞—É–∑–µ—Ä–∞...")
        page = browser_manager.initialize()
        promo_service = PromoService(page)
        
        # –õ–æ–≥—ñ–Ω
        logger.info("üîë –õ–æ–≥—ñ–Ω –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å...")
        if not promo_service.login():
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–π—Ç–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
            return False
        
        logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –ª–æ–≥—ñ–Ω!")
        promo_smart_manager = PromoSmartManager(promo_service)
        
        # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è S3
        final_s3_state = {}
        # –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É
        total_operations = {'created': 0, 'deleted': 0, 'unchanged': 0}
        
        # –ï–¢–ê–ü 1: –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ BON —Ñ—ñ–ª—å—Ç—Ä —ñ –æ—Ç—Ä–∏–º—É—î–º–æ –í–°–Ü –ø—Ä–æ–º–æ–∫–æ–¥–∏ –∑ —É—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
        logger.info("\nüîç –ï–¢–ê–ü 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö BON –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ...")
        iframe = promo_service._get_iframe()
        if not iframe:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ iframe")
            return False
        
        # –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        max_rows_set = set_max_rows_per_page(iframe, 160)
        if not max_rows_set:
            logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏")
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ BON —Ñ—ñ–ª—å—Ç—Ä –æ–¥–∏–Ω —Ä–∞–∑
        bon_filter_success = apply_bon_filter_once(iframe)
        if not bon_filter_success:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ BON —Ñ—ñ–ª—å—Ç—Ä")
            return False
            
        # –°–æ—Ä—Ç—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ø–æ —Ä–æ–∑–º—ñ—Ä—É –∑–Ω–∏–∂–∫–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö
        logger.info(f"üìä –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ —Ä–æ–∑–º—ñ—Ä—É –∑–Ω–∏–∂–∫–∏ ({sort_order})...")
        sort_success = sort_table_by_discount_amount(iframe, sort_order)
        if not sort_success:
            logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ø–æ —Ä–æ–∑–º—ñ—Ä—É –∑–Ω–∏–∂–∫–∏, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è")
        else:
            sort_label = "–∑—Ä–æ—Å—Ç–∞–Ω–Ω—è" if sort_order == "asc" else "—Å–ø–∞–¥–∞–Ω–Ω—è"
            logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü—é —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ –ø–æ —Ä–æ–∑–º—ñ—Ä—É –∑–Ω–∏–∂–∫–∏ ({sort_label})")
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Å—É–º —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω–∫—É
        logger.info(f"üéØ –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Å—É–º: {start_amount}-{end_amount} –≥—Ä–Ω...")
        range_filter_success = None; #apply_amount_range_filter(iframe, start_amount, end_amount)
        if not range_filter_success:
            logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –¥—ñ–∞–ø–∞–∑–æ–Ω—É, –∑–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∫–æ–¥–∏")
        else:
            logger.info("‚úÖ –§—ñ–ª—å—Ç—Ä –¥—ñ–∞–ø–∞–∑–æ–Ω—É —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–æ–¥–∏ –∑ —É—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó (–≤–∂–µ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –ø–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É)
        logger.info("üîç –ü–û–ß–ê–¢–û–ö –ó–ë–û–†–£ –í–°–Ü–• –ü–†–û–ú–û–ö–û–î–Ü–í...")
        all_codes_by_amount = get_all_bon_codes_from_table(iframe)
        logger.info("‚úÖ –ó–ê–í–ï–†–®–ï–ù–û –ó–ë–Ü–† –í–°–Ü–• –ü–†–û–ú–û–ö–û–î–Ü–í")
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–∫–ª—é—á–µ–Ω–µ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è)
        if all_codes_by_amount and CONFIG.get('verbose_logging', False):
            # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö —Å—É–º
            total_codes = sum(len(codes) for codes in all_codes_by_amount.values())
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ–¥—ñ–≤ - –≤–∏—Ç—è–≥—É—î–º–æ –∫–æ–¥–∏ –∑ –æ–±'—î–∫—Ç—ñ–≤
            all_unique_codes = set()
            for code_objects in all_codes_by_amount.values():
                for obj in code_objects:
                    all_unique_codes.add(obj['code'])
            
            logger.info(f"üìä –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: –ó–Ω–∞–π–¥–µ–Ω–æ {total_codes} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤, –∑ –Ω–∏—Ö {len(all_unique_codes)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö")
            
            if total_codes != len(all_unique_codes):
                logger.warning(f"‚ö†Ô∏è –í–ò–Ø–í–õ–ï–ù–û –ü–†–û–ë–õ–ï–ú–£: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ–¥—ñ–≤ ({len(all_unique_codes)}) –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ ({total_codes})!")
        elif all_codes_by_amount:
            # –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
            total_codes = sum(len(codes) for codes in all_codes_by_amount.values())
            logger.info(f"üìä –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: –ó–Ω–∞–π–¥–µ–Ω–æ {total_codes} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
        
        if not all_codes_by_amount:
            logger.warning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ BON –ø—Ä–æ–º–æ–∫–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—ñ")
            # –°—Ç–≤–æ—Ä–∏–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å—É–º –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ
            for amount in range(start_amount, end_amount + 1):
                all_codes_by_amount[amount] = []
        
        # –ï–¢–ê–ü 2: –ê–Ω–∞–ª—ñ–∑ –ø–æ—Ç—Ä–µ–± (—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è) –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—É–º–∏
        logger.info("\nüìä –ï–¢–ê–ü 2: –ê–Ω–∞–ª—ñ–∑ –ø–æ—Ç—Ä–µ–± –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—É–º–∏...")
        
        # –ü—ñ–¥–≥–æ—Ç—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        codes_to_create_by_amount = {}  # {amount: [codes_to_create]}
        codes_to_delete_by_amount = {}  # {amount: [codes_to_delete]}
        
        # –í–∏–≤–æ–¥–∏–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª—ñ–∑–æ–º (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–∫–ª—é—á–µ–Ω–µ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è)
        if CONFIG.get('verbose_logging', False):
            total_bon_codes = sum(len(codes) for codes in all_codes_by_amount.values())
            total_amounts = len(all_codes_by_amount)
            logger.info(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_bon_codes} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è {total_amounts} —Ä—ñ–∑–Ω–∏—Ö —Å—É–º")
            
            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –ø–æ —Å—É–º–∞—Ö (—Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö)
            sums_with_codes = []
            for amount, code_objects in all_codes_by_amount.items():
                active_codes = [obj for obj in code_objects if obj['status'] == 'active']
                if active_codes:
                    sums_with_codes.append(amount)
            if sums_with_codes:
                min_sum = min(sums_with_codes) if sums_with_codes else 0
                max_sum = max(sums_with_codes) if sums_with_codes else 0
                logger.info(f"üìä –î—ñ–∞–ø–∞–∑–æ–Ω –Ω–∞—è–≤–Ω–∏—Ö —Å—É–º: –≤—ñ–¥ {min_sum} –≥—Ä–Ω –¥–æ {max_sum} –≥—Ä–Ω")
        
        for amount in range(start_amount, end_amount + 1):
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–¥–∏ –¥–ª—è —Ü—ñ—î—ó —Å—É–º–∏ –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
            code_objects = all_codes_by_amount.get(amount, [])
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É
            active_codes = [obj['code'] for obj in code_objects if obj['status'] == 'active']
            inactive_codes = [obj['code'] for obj in code_objects if obj['status'] == 'inactive']
            
            current_count_active = len(active_codes)
            current_count_inactive = len(inactive_codes)
            current_count_total = len(code_objects)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—É–º–∏, —è–∫—ñ –±—ñ–ª—å—à—ñ –∑–∞ end_amount, –∞–ª–µ –º–æ–≥–ª–∏ –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ —á–µ—Ä–µ–∑ –Ω–µ—Ç–æ—á–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            if amount > end_amount:
                logger.info(f"üí∞ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—É–º—É {amount} –≥—Ä–Ω, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –±—ñ–ª—å—à–∞ –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É ({end_amount} –≥—Ä–Ω)")
                continue

            logger.info(f"üí∞ –ê–Ω–∞–ª—ñ–∑ —Å—É–º–∏ {amount} –≥—Ä–Ω: {current_count_active} –∞–∫—Ç–∏–≤–Ω–∏—Ö + {current_count_inactive} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö = {current_count_total} (—Ü—ñ–ª—å–æ–≤–∞ –∫-—Ç—å: {target_count})")
            
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏
            if inactive_codes:
                logger.info(f"ÔøΩÔ∏è –î–æ–¥–∞—î–º–æ {len(inactive_codes)} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥—ñ–≤ –¥–æ —Å–ø–∏—Å–∫—É –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
                if amount not in codes_to_delete_by_amount:
                    codes_to_delete_by_amount[amount] = []
                codes_to_delete_by_amount[amount].extend(inactive_codes)
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏
            if current_count_active == target_count:
                logger.info("‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ")
                total_operations['unchanged'] += 1
                
            elif current_count_active < target_count:
                # –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∫–æ–¥–∏
                needed_count = target_count - current_count_active
                logger.info(f"üìà –ü–æ—Ç—Ä—ñ–±–Ω–æ –î–û–î–ê–¢–ò {needed_count} –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
                
                # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ –∫–æ–¥–∏ –¥–ª—è —Ü—ñ—î—ó —Å—É–º–∏
                new_codes = generate_codes_for_amount(amount, needed_count, active_codes)
                if new_codes:
                    codes_to_create_by_amount[amount] = new_codes
                    
            elif current_count_active > target_count and auto_delete:
                # –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–π–≤—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∫–æ–¥–∏
                excess_count = current_count_active - target_count
                logger.info(f"üìâ –ü–æ—Ç—Ä—ñ–±–Ω–æ –í–ò–î–ê–õ–ò–¢–ò {excess_count} –∑–∞–π–≤–∏—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
                
                # –î–æ–¥–∞—î–º–æ –∫–æ–¥–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–±–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ –∑–∞–π–≤—ñ)
                codes_to_delete = active_codes[:excess_count]
                if amount not in codes_to_delete_by_amount:
                    codes_to_delete_by_amount[amount] = []
                codes_to_delete_by_amount[amount].extend(codes_to_delete)
                
            elif current_count_active > target_count and not auto_delete:
                excess_count = current_count_active - target_count
                logger.warning(f"‚ö†Ô∏è –ó–∞–π–≤—ñ {excess_count} –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ (–∞–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ)")
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∫–æ–¥–∏ –¥–ª—è S3
            final_s3_state[str(amount)] = active_codes.copy()
        
        # –ï–¢–ê–ü 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö –Ω–æ–≤–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö —Å—É–º
        total_to_create = sum(len(codes) for codes in codes_to_create_by_amount.values())
        if total_to_create > 0:
            logger.info("\n‚ûï –ï–¢–ê–ü 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö –Ω–æ–≤–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤...")
            logger.info(f"üìù –í—Å—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏: {total_to_create} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è {len(codes_to_create_by_amount)} —Å—É–º")
            
            for amount, new_codes in sorted(codes_to_create_by_amount.items()):
                logger.info(f"\nüí∞ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω ({len(new_codes)} —à—Ç.)...")
                created_count = create_codes_for_amount(promo_service, new_codes, amount)
                total_operations['created'] += created_count
                
                if created_count > 0:
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≤ –ø–∞–º'—è—Ç—ñ
                    successfully_created = new_codes[:created_count]
                    final_s3_state[str(amount)].extend(successfully_created)
                    logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {created_count}/{len(new_codes)} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥—É –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω")
        else:
            logger.info("\n‚ûï –ï–¢–ê–ü 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ (–Ω–µ–º–∞—î –ø–æ—Ç—Ä–µ–±–∏)")
        
        # –ï–¢–ê–ü 4: –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–∞–¥–ª–∏—à–∫–æ–≤–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö —Å—É–º
        total_to_delete = sum(len(codes) for codes in codes_to_delete_by_amount.values())
        if total_to_delete > 0 and auto_delete:
            logger.info("\n‚ûñ –ï–¢–ê–ü 4: –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–∞–¥–ª–∏—à–∫–æ–≤–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤...")
            logger.info(f"üóëÔ∏è –í—Å—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏: {total_to_delete} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è {len(codes_to_delete_by_amount)} —Å—É–º")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ iframe –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            iframe = promo_service._get_iframe()
            if not iframe:
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ iframe –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            else:
                # –ü–µ—Ä–µ–∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ BON —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                bon_filter_success = apply_bon_filter_once(iframe)
                if not bon_filter_success:
                    logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ BON —Ñ—ñ–ª—å—Ç—Ä –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º")
                else:
                    for amount, codes_to_delete in sorted(codes_to_delete_by_amount.items()):
                        logger.info(f"\nüí∞ –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω ({len(codes_to_delete)} —à—Ç.)...")
                        
                        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è —Ü—ñ—î—ó —Å—É–º–∏
                        filter_success = apply_amount_filter_improved(iframe, amount)
                        if filter_success:
                            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —è–∫—ñ –∫–æ–¥–∏ –¥—ñ–π—Å–Ω–æ —î –≤ —Ç–∞–±–ª–∏—Ü—ñ
                            logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–¥—ñ–≤ –≤ —Ç–∞–±–ª–∏—Ü—ñ –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º...")
                            
                            # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ
                            time.sleep(0.5)
                            fresh_codes_dict = get_all_bon_codes_from_table(iframe)
                            
                            if fresh_codes_dict and amount in fresh_codes_dict:
                                code_objects = fresh_codes_dict[amount]
                                # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–æ–¥–∏ (–∞–∫—Ç–∏–≤–Ω—ñ —Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ) –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
                                actual_codes_for_amount = [obj['code'] for obj in code_objects]
                                logger.info(f"üîÑ –ó–Ω–∞–π–¥–µ–Ω–æ {len(actual_codes_for_amount)} –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –∫–æ–¥—ñ–≤ –≤ —Ç–∞–±–ª–∏—Ü—ñ")
                            else:
                                actual_codes_for_amount = []
                                logger.warning(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount} –≤ –∞–∫—Ç—É–∞–ª—å–Ω—ñ–π —Ç–∞–±–ª–∏—Ü—ñ")
                            
                            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–æ–¥–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è - —Ç—ñ–ª—å–∫–∏ —Ç—ñ, —â–æ —î –≤ —Ç–∞–±–ª–∏—Ü—ñ
                            codes_to_delete_filtered = [code for code in codes_to_delete if code in actual_codes_for_amount]
                            
                            if not codes_to_delete_filtered:
                                logger.warning("‚ö†Ô∏è –ñ–æ–¥–Ω–æ–≥–æ –∫–æ–¥—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π —Ç–∞–±–ª–∏—Ü—ñ")
                                logger.info("üí° –ú–æ–∂–ª–∏–≤–æ, –∫–æ–¥–∏ –≤–∂–µ –±—É–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ —Ä–∞–Ω—ñ—à–µ –∞–±–æ –∫–µ—à –∑–∞—Å—Ç–∞—Ä—ñ–≤")
                                
                                # –û–Ω–æ–≤–ª—é—î–º–æ final_s3_state –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
                                final_s3_state[str(amount)] = actual_codes_for_amount
                                logger.info(f"üìä –°—Ç–∞–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏: {len(actual_codes_for_amount)} –∫–æ–¥—ñ–≤")
                            else:
                                logger.info(f"üéØ –ó–Ω–∞–π–¥–µ–Ω–æ {len(codes_to_delete_filtered)} –∫–æ–¥—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ {len(codes_to_delete)} –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö")
                                
                                # –û—Ç—Ä–∏–º—É—î–º–æ page –∑ promo_service –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥—ñ–∞–ª–æ–≥—ñ–≤
                                page = promo_service.page
                                deletion_result = delete_specific_promo_codes(iframe, codes_to_delete_filtered, page)
                                
                                if deletion_result.get('success', False):
                                    deleted_count = deletion_result.get('deleted', 0)
                                    total_operations['deleted'] += deleted_count
                                    
                                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≤ –ø–∞–º'—è—Ç—ñ
                                    successfully_deleted_set = set(codes_to_delete_filtered[:deleted_count])
                                    final_s3_state[str(amount)] = [code for code in actual_codes_for_amount 
                                                                 if code not in successfully_deleted_set]
                                    
                                    logger.info(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {deleted_count}/{len(codes_to_delete_filtered)} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
                                else:
                                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω")
                                    # –í—Å–µ –æ–¥–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
                                    final_s3_state[str(amount)] = actual_codes_for_amount
                        else:
                            logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ —Å—É–º–∏ {amount} –≥—Ä–Ω")
        elif total_to_delete > 0 and not auto_delete:
            logger.info("\n‚ûñ –ï–¢–ê–ü 4: –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ (–∞–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ)")
        else:
            logger.info("\n‚ûñ –ï–¢–ê–ü 4: –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ (–Ω–µ–º–∞—î –ø–æ—Ç—Ä–µ–±–∏)")

        # –ü—ñ–¥—Å—É–º–æ–∫ –æ–ø–µ—Ä–∞—Ü—ñ–π
        logger.info(f"\nüéâ –ü–Ü–î–°–£–ú–û–ö –û–ü–ï–†–ê–¶–Ü–ô")
        logger.info("=" * 40)
        logger.info(f"‚ûï –°—Ç–≤–æ—Ä–µ–Ω–æ: {total_operations['created']} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
        logger.info(f"‚ûñ –í–∏–¥–∞–ª–µ–Ω–æ: {total_operations['deleted']} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
        logger.info(f"‚èπÔ∏è –ë–µ–∑ –∑–º—ñ–Ω: {total_operations['unchanged']} —Å—É–º")
        
        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ S3 (–∑–∞–≤–∂–¥–∏, —è–∫—â–æ –≤–∫–ª—é—á–µ–Ω–∞)
        changes_made = total_operations['created'] > 0 or total_operations['deleted'] > 0
        if CONFIG['sync_s3']:
            logger.info("\nüîÑ –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø –§–Ü–ù–ê–õ–¨–ù–û–ì–û –°–¢–ê–ù–£ –ó S3")
            logger.info("-" * 30)
            
            if changes_made:
                logger.info("üìù –ë—É–ª–∏ –∑–º—ñ–Ω–∏ - –æ–Ω–æ–≤–ª—é—î–º–æ S3 –∑ –Ω–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏")
            else:
                logger.info("üìù –ó–º—ñ–Ω –Ω–µ –±—É–ª–æ, –∞–ª–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ S3 –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∑ S3, —â–æ–± –Ω–µ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –¥–∞–Ω—ñ –ø–æ —ñ–Ω—à–∏–º —Å—É–º–∞–º
            full_s3_state = download_from_s3()
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ —Å—É–º–∏, —è–∫—ñ –º–∏ –æ–±—Ä–æ–±–ª—è–ª–∏
            full_s3_state.update(final_s3_state)

            sync_success = upload_to_s3(full_s3_state)
            if sync_success:
                logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ S3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
            else:
                logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ S3")
        else:
            logger.info("\nüîÑ –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø –ó S3 - –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")
        
        logger.info("\nüéØ –°–ú–ê–†–¢ –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Å–º–∞—Ä—Ç —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—ñ: {e}")
        return False
        
    finally:
        if browser_manager:
            logger.info("üßπ –ó–∞–∫—Ä–∏—Ç—Ç—è –±—Ä–∞—É–∑–µ—Ä–∞...")
            browser_manager.cleanup()

def generate_codes_for_amount(amount, count, existing_codes):
    """
    –ì–µ–Ω–µ—Ä—É—î –Ω–æ–≤—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å—É–º–∏.
    
    Args:
        amount (int): –°—É–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥—É
        count (int): –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥—ñ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
        existing_codes (list): –Ü—Å–Ω—É—é—á—ñ –∫–æ–¥–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
    """
    logger.info(f"üé≤ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è {count} –Ω–æ–≤–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω...")
    
    amount_str = str(amount)
    prefix = f'BON{amount_str}'
    random_part_length = max(3, 7 - len(amount_str))
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ set –∑ —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–¥—ñ–≤ –¥–ª—è —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    existing_codes_set = set(existing_codes) if existing_codes else set()
    
    new_codes = set()
    attempts = 0
    max_attempts = count * 100  # –ó–±—ñ–ª—å—à–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
    
    while len(new_codes) < count and attempts < max_attempts:
        new_code = prefix + generate_random_string(random_part_length)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏
        if new_code not in existing_codes_set and new_code not in new_codes:
            new_codes.add(new_code)
        
        attempts += 1
    
    result = list(new_codes)
    logger.info(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(result)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
    
    if result:
        logger.debug(f"–ü—Ä–∏–∫–ª–∞–¥–∏ –Ω–æ–≤–∏—Ö –∫–æ–¥—ñ–≤: {result[:3]}{'...' if len(result) > 3 else ''}")
    
    return result


def create_codes_for_amount(promo_service, codes_list, amount):
    """
    –°—Ç–≤–æ—Ä—é—î –ø—Ä–æ–º–æ–∫–æ–¥–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å—É–º–∏.
    –ú–∞—î –º–µ—Ö–∞–Ω—ñ–∑–º –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —É –≤–∏–ø–∞–¥–∫—É –∑–∞–≤–∏—Å–∞–Ω–Ω—è.
    
    Args:
        promo_service: –°–µ—Ä–≤—ñ—Å —Ä–æ–±–æ—Ç–∏ –∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
        codes_list (list): –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        amount (int): –°—É–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥—É
        
    Returns:
        int: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
    """
    logger.info(f"üèóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è {len(codes_list)} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω...")
    
    created_count = 0
    total_codes = len(codes_list)
    
    for i, code in enumerate(codes_list, 1):
        logger.info(f"üéØ ({i}/{total_codes}) –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–¥: {code}")
        
        try:
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
            # Playwright TimeoutError –±—É–¥–µ –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–æ, —è–∫—â–æ –æ–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–π–º–µ –±—ñ–ª—å—à–µ 60 —Å–µ–∫—É–Ω–¥
            success = promo_service.create_promo_code(code, amount)
            
            if success:
                created_count += 1
                logger.info(f"  ‚úÖ –ö–æ–¥ {code} —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            else:
                logger.warning(f"  ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ {code}")

        except Exception as e: # –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ –±—É–¥—å-—è–∫—É –ø–æ–º–∏–ª–∫—É, –≤–∫–ª—é—á–∞—é—á–∏ TimeoutError
            logger.error(f"üö® –ü–æ–º–∏–ª–∫–∞ –∞–±–æ –∑–∞–≤–∏—Å–∞–Ω–Ω—è –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ–¥—É {code}: {e}")
            logger.info("üîÑ –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è...")
            try:
                promo_service.page.reload(wait_until='domcontentloaded', timeout=30000)
                logger.info("‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ–¥ —ñ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ.")
                # –ü—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏, –º–æ–∂–ª–∏–≤–æ, –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è
                # –¥–æ —Ä–æ–∑–¥—ñ–ª—É –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤, –∞–ª–µ PromoService –ø–æ–≤–∏–Ω–µ–Ω —Ü–µ –æ–±—Ä–æ–±–∏—Ç–∏.
                # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∫–æ–¥–æ–º.
                continue
            except Exception as reload_e:
                logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—ñ—Å–ª—è –∑–∞–≤–∏—Å–∞–Ω–Ω—è: {reload_e}")
                logger.error("üõë –ü–µ—Ä–µ—Ä–∏–≤–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—É–º–∏.")
                break # –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É –¥–ª—è —Ü—ñ—î—ó —Å—É–º–∏
    
    success_rate = (created_count / total_codes) * 100 if total_codes > 0 else 0
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {created_count}/{total_codes} ({success_rate:.1f}%)")
    
    return created_count

def upload_to_s3(data):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –≤ S3."""
    try:
        s3 = boto3.client('s3', region_name=CONFIG['region'])
        bucket = CONFIG['s3_bucket']
        key = CONFIG['s3_key']
        
        logger.info(f"‚òÅÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –≤ S3: s3://{bucket}/{key}")
        
        s3.put_object(
            Bucket=bucket,
            Key=key,
            Body=json.dumps(data, indent=2),
            ContentType='application/json'
        )
        
        logger.info("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –≤ S3")
        return True

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤ S3: {e}")
        logger.error("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—ñ AWS –∫—Ä–µ–¥–∞–Ω—à–∞–ª–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        return False

def set_max_rows_per_page(iframe, rows_count=160):
    """
    –ù–∞–ª–∞—à—Ç–æ–≤—É—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –¥–ª—è —à–≤–∏–¥—à–æ–≥–æ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö.
    
    Args:
        iframe: iframe –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        rows_count (int): –ë–∞–∂–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 160)
        
    Returns:
        bool: –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    """
    try:
        logger.info(f"‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä—è–¥–∫—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ: {rows_count}...")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (—Ç—Ä–∏ –∫—Ä–∞–ø–∫–∏)
        settings_button = iframe.locator('.button.settings')
        if not settings_button.count():
            logger.warning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")
            return False
        
        # –ö–ª—ñ–∫–∞—î–º–æ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        settings_button.click()
        time.sleep(0.5)
        
        # –®—É–∫–∞—î–º–æ –≤–∏–ø–∞–¥–∞—é—á–∏–π —Å–ø–∏—Å–æ–∫ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ä—è–¥–∫—ñ–≤
        rows_select = iframe.locator('#datagrid-perpage-select')
        if not rows_select.count():
            logger.warning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ–ª–µ–∫—Ç –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ä—è–¥–∫—ñ–≤")
            settings_button.click()  # –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            return False
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤
        rows_select.select_option(value=str(rows_count))
        time.sleep(1.0)  # –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–ª–∏—Å—è –∑–º—ñ–Ω–∏
        try:
            # –ß–µ–∫–∞—î–º–æ –Ω–∞ –ª–æ–∞–¥–µ—Ä, —è–∫—â–æ –≤—ñ–Ω –∑'—è–≤–∏—Ç—å—Å—è
            loader = iframe.locator('#datagrid-loader')
            try:
                loader.wait_for(state='hidden', timeout=5000)
            except Exception:
                # –Ø–∫—â–æ –ª–æ–∞–¥–µ—Ä –Ω–µ –∑'—è–≤–∏–≤—Å—è, —á–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –º–µ—Ä–µ–∂–µ–≤–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                iframe.page.wait_for_load_state('networkidle', timeout=3000)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä—è–¥–∫—ñ–≤: {e}")
        
        logger.info(f"‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {rows_count}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä—è–¥–∫—ñ–≤: {e}")
        return False

def sort_table_by_discount_amount(iframe, sort_order="asc"):
    """
    –°–æ—Ä—Ç—É—î —Ç–∞–±–ª–∏—Ü—é –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –ø–æ —Ä–æ–∑–º—ñ—Ä—É –∑–Ω–∏–∂–∫–∏ (–∫–ª—ñ–∫–æ–º –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏).
    –¶–µ –¥–æ–ø–æ–º–æ–∂–µ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö —Ç–∞ –∑–º–µ–Ω—à–∏—Ç–∏ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤.
    
    Args:
        iframe: iframe –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        sort_order: –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è ("asc" –¥–ª—è –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è, "desc" –¥–ª—è —Å–ø–∞–¥–∞–Ω–Ω—è)
        
    Returns:
        bool: —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    """
    try:
        logger.info("üîÑ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ø–æ —Ä–æ–∑–º—ñ—Ä—É –∑–Ω–∏–∂–∫–∏...")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        pager_text = iframe.locator('.datagrid-pager .pages').first.inner_text().strip()
        logger.info(f"üìÑ –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –ø–µ—Ä–µ–¥ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º: {pager_text}")
        
        # 1. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–†–æ–∑–º—ñ—Ä –∑–Ω–∏–∂–∫–∏" (–∫–æ–ª–æ–Ω–∫–∞ 4778)
        amount_header = iframe.locator('#header_id_4778')
        if not amount_header.count():
            logger.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–†–æ–∑–º—ñ—Ä –∑–Ω–∏–∂–∫–∏' –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è")
            return False

        logger.info("üñ±Ô∏è –ö–ª—ñ–∫–∞—î–º–æ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–†–æ–∑–º—ñ—Ä –∑–Ω–∏–∂–∫–∏' –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è...")
        
        
        # 2. –ö–ª—ñ–∫–∞—î–º–æ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        # –î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è (–∑—Ä–æ—Å—Ç–∞–Ω–Ω—è/—Å–ø–∞–¥–∞–Ω–Ω—è):
        # - –¥–ª—è –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è ‚Äî –æ–¥–∏–Ω –∫–ª—ñ–∫ (—è–∫—â–æ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
        # - –¥–ª—è —Å–ø–∞–¥–∞–Ω–Ω—è ‚Äî –¥–≤–∞ –∫–ª—ñ–∫–∏ (–æ–¥–∏–Ω –¥–ª—è –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è, –¥—Ä—É–≥–∏–π –¥–ª—è —Å–ø–∞–¥–∞–Ω–Ω—è)
        
        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        sort_indicator = amount_header.locator('.sort-indicator')
        current_sort_state = "none"  # none, asc, desc
        
        if sort_indicator.count() > 0:
            sort_class = sort_indicator.get_attribute('class') or ""
            if 'sort-up' in sort_class:
                current_sort_state = "asc"
            elif 'sort-down' in sort_class:
                current_sort_state = "desc"
        
        logger.info(f"ÔøΩ –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: {current_sort_state}, –ø–æ—Ç—Ä—ñ–±–Ω–∏–π: {sort_order}")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ–∫—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –±–∞–∂–∞–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫—É
        clicks_needed = 0
        if sort_order == "asc":
            if current_sort_state == "none":
                clicks_needed = 1  # none -> asc
            elif current_sort_state == "desc":
                clicks_needed = 2  # desc -> none -> asc
            # —è–∫—â–æ –≤–∂–µ asc - –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
        elif sort_order == "desc":
            if current_sort_state == "none":
                clicks_needed = 2  # none -> asc -> desc
            elif current_sort_state == "asc":
                clicks_needed = 1  # asc -> desc
            # —è–∫—â–æ –≤–∂–µ desc - –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
        
        logger.info(f"üñ±Ô∏è –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ {clicks_needed} –∫–ª—ñ–∫—ñ–≤ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è {sort_order}")
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ–∫—ñ–≤
        for click_num in range(clicks_needed):

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–º—ñ–Ω
            try:
                initial_first_row = iframe.locator('table#datagrid tbody tr').first
                initial_row_text = ""
                if initial_first_row.count() > 0:
                    initial_row_text = initial_first_row.inner_text()
            except Exception:
                initial_row_text = ""
            logger.info(f"üëÜ –ö–ª—ñ–∫ {click_num + 1}/{clicks_needed} –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫...")
            amount_header.click()
            time.sleep(0.2)  # –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –∫–ª—ñ–∫–∞–º–∏
        
            # 3. –ß–µ–∫–∞—î–º–æ –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ø—ñ—Å–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            logger.info("‚è≥ –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è...")
            
            # –°–ø–æ—á–∞—Ç–∫—É —á–µ–∫–∞—î–º–æ –ø–æ—è–≤—É –ª–æ–∞–¥–µ—Ä–∞, —è–∫—â–æ –≤—ñ–Ω —î
            try:
                loader = iframe.locator('#datagrid-loader')
                if loader.count() > 0:
                    logger.info("üîÑ –ß–µ–∫–∞—î–º–æ –ø–æ—è–≤—É –ª–æ–∞–¥–µ—Ä–∞...")
                    loader.wait_for(state='visible', timeout=2000)
                    logger.info("üîÑ –õ–æ–∞–¥–µ—Ä –∑'—è–≤–∏–≤—Å—è, —á–µ–∫–∞—î–º–æ –π–æ–≥–æ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è...")
                    loader.wait_for(state='hidden', timeout=8000)
                    logger.info("‚úÖ –õ–æ–∞–¥–µ—Ä –∑–Ω–∏–∫ - —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                else:
                    logger.info("üìä –õ–æ–∞–¥–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è")
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ - —á–µ–∫–∞—î–º–æ –Ω–∞ —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—é –º–µ—Ä–µ–∂–µ–≤–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                    iframe.page.wait_for_load_state('networkidle', timeout=5000)
                    logger.info("‚úÖ –ú–µ—Ä–µ–∂–µ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å—Ç–∞–±—ñ–ª—ñ–∑—É–≤–∞–ª–∞—Å—å")
            except Exception as loader_error:
                logger.info(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –ª–æ–∞–¥–µ—Ä: {loader_error}")
                
                # –†–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥ - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω –≤–º—ñ—Å—Ç—É —Ç–∞–±–ª–∏—Ü—ñ
                logger.info("üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è...")
                sorting_completed = False
                max_attempts = 30  # –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± (3 —Å–µ–∫—É–Ω–¥–∏)
                
                for attempt in range(max_attempts):
                    try:
                        time.sleep(0.1)  # –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è –≤–º—ñ—Å—Ç –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞ (—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è)
                        current_first_row = iframe.locator('table#datagrid tbody tr').first
                        if current_first_row.count() > 0:
                            current_row_text = current_first_row.inner_text()
                            
                            # –Ø–∫—â–æ –≤–º—ñ—Å—Ç –∑–º—ñ–Ω–∏–≤—Å—è –∞–±–æ –º–∏–Ω—É–ª–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∞—Å—É
                            if current_row_text != initial_row_text or attempt >= 15:
                                # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å (—Ç—Ä–∏ —Ä–∞–∑–∏ –ø—ñ–¥—Ä—è–¥ –æ–¥–Ω–∞–∫–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
                                time.sleep(0.3)
                                stable_check1 = current_first_row.inner_text() if current_first_row.count() > 0 else ""
                                time.sleep(0.2)
                                stable_check2 = current_first_row.inner_text() if current_first_row.count() > 0 else ""
                                
                                if stable_check1 == stable_check2 == current_row_text:
                                    sorting_completed = True
                                    logger.info(f"‚úÖ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø—ñ—Å–ª—è {attempt + 1} —Å–ø—Ä–æ–± ({(attempt + 1) * 0.1:.1f} —Å–µ–∫)")
                                    break
                                    
                    except Exception as wait_error:
                        logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å—Ç–∞–Ω—É —Ç–∞–±–ª–∏—Ü—ñ (—Å–ø—Ä–æ–±–∞ {attempt + 1}): {wait_error}")
                        continue
                
                if not sorting_completed:
                    logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ç–æ—á–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è, –¥–æ–¥–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É –ø–∞—É–∑—É")
                    # –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–∞—É–∑–∞ –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
                    time.sleep(1.5)  # –ó–±—ñ–ª—å—à—É—î–º–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω —Ç–∞–±–ª–∏—Ü—ñ –ø—ñ—Å–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        new_pager_text = iframe.locator('.datagrid-pager .pages').first.inner_text().strip()
        logger.info(f"üìÑ –°—Ç–∞–Ω –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –ø—ñ—Å–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: {new_pager_text}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è —Å—Ç–∞–Ω –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
        if pager_text == new_pager_text:
            logger.info("‚úÖ –°—Ç–∞–Ω –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –≤–ø–ª–∏–Ω—É–ª–æ –Ω–∞ —Ä–æ–∑–±–∏–≤–∫—É —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
        else:
            logger.info("‚úÖ –°—Ç–∞–Ω –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –∑–º—ñ–Ω–∏–≤—Å—è –ø—ñ—Å–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è, –¥–∞–Ω—ñ –ø–µ—Ä–µ–≥—Ä—É–ø–æ–≤–∞–Ω—ñ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ø—Ä—è–º—É —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è (–∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º —á–∏ –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º)
        sort_indicator = amount_header.locator('.sort-indicator')
        if sort_indicator.count() > 0:
            sort_class = sort_indicator.get_attribute('class')
            actual_sort_state = "none"
            
            if 'sort-down' in sort_class:
                actual_sort_state = "desc"
                logger.info("üìâ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º (–≤—ñ–¥ –±—ñ–ª—å—à–∏—Ö —Å—É–º –¥–æ –º–µ–Ω—à–∏—Ö)")
            elif 'sort-up' in sort_class:
                actual_sort_state = "asc"
                logger.info("üìà –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º (–≤—ñ–¥ –º–µ–Ω—à–∏—Ö —Å—É–º –¥–æ –±—ñ–ª—å—à–∏—Ö)")
            else:
                logger.info("üîÑ –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ, –∞–ª–µ –Ω–∞–ø—Ä—è–º –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—è–≥–Ω—É—Ç–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            if actual_sort_state == sort_order:
                logger.info(f"‚úÖ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {sort_order}")
            else:
                logger.warning(f"‚ö†Ô∏è –û—á—ñ–∫—É–≤–∞–ª–æ—Å—å {sort_order}, –∞–ª–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {actual_sort_state}")
        else:
            logger.warning("‚ö†Ô∏è –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        logger.info("‚úÖ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ —Ä–æ–∑–º—ñ—Ä—É –∑–Ω–∏–∂–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –ø–æ —Ä–æ–∑–º—ñ—Ä—É –∑–Ω–∏–∂–∫–∏: {e}")
        return False

def validate_duplicates_after_collection(codes_by_amount, duplicates_info=None, iframe=None):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞ –æ–±—Ä–æ–±–ª—è—î –¥—É–±–ª—ñ–∫–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –ø—ñ—Å–ª—è –∑–±–æ—Ä—É –≤—Å—ñ—Ö –∫–æ–¥—ñ–≤ –∑ —É—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫.
    –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥—É–±–ª—ñ–∫–∞—Ç—É –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é —Ç–∞ –ø–µ—Ä–µ–ø–∏—Å—É—î –∫–æ–¥–∏ –≤ –æ—Å–Ω–æ–≤–Ω–∏–π –º–∞—Å–∏–≤.
    
    Args:
        codes_by_amount: —Å–ª–æ–≤–Ω–∏–∫ –∑ –∫–æ–¥–∞–º–∏ –ø–æ —Å—É–º–∞–º
        duplicates_info: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏, –∑—ñ–±—Ä–∞–Ω–∞ –ø—ñ–¥ —á–∞—Å –∑–±–æ—Ä—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        promo_service: –≥–æ—Ç–æ–≤–∏–π –æ–±'—î–∫—Ç PromoService –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª–ª—é
        iframe: –≥–æ—Ç–æ–≤–∏–π iframe –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–∞–±–ª–∏—Ü–µ—é
    """
    logger.debug("üîç –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü—ñ—ó validate_duplicates_after_collection()")
    
    if not duplicates_info:
        logger.info("‚úÖ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥—É–±–ª—ñ–∫–∞—Ç—ñ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –Ω–∞–±—ñ—Ä")
        # –ó–≤–∏—á–∞–π–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ —É —Ñ—ñ–Ω–∞–ª—å–Ω–æ–º—É –Ω–∞–±–æ—Ä—ñ
        return _validate_final_duplicates(codes_by_amount)
    
    logger.info(f"üìä –û—Ç—Ä–∏–º–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ {len(duplicates_info)} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø—ñ–¥ —á–∞—Å –∑–±–æ—Ä—É")
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω –¥—É–±–ª—ñ–∫–∞—Ç
    duplicate_amounts_to_process = set()
    for code, amounts in duplicates_info.items():
        logger.info(f"  üîç –î—É–±–ª—ñ–∫–∞—Ç: {code} –¥–ª—è —Å—É–º: {amounts}")
        for amount in amounts:
            duplicate_amounts_to_process.add(amount)
    
    if duplicate_amounts_to_process:
        logger.info(f"üîÑ –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–æ–±—Ä–æ–±–∏—Ç–∏ –∫–æ–¥–∏ –¥–ª—è —Å—É–º: {sorted(duplicate_amounts_to_process)}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if not iframe:
            logger.error("‚ùå –î–ª—è –ø–µ—Ä–µ–æ–±—Ä–æ–±–∫–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ promo_service —Ç–∞ iframe")
            logger.info("üîÑ –í–∏–∫–æ–Ω—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ñ—ñ–Ω–∞–ª—å–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É...")
            return _validate_final_duplicates(codes_by_amount)
        
        try:
            # –ü–µ—Ä–µ–æ–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–¥–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—É–º–∏ –∑ –¥—É–±–ª—ñ–∫–∞—Ç–∞–º–∏
            for amount in sorted(duplicate_amounts_to_process):
                logger.info(f"ÔøΩ –ü–µ—Ä–µ–æ–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–¥–∏ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω —á–µ—Ä–µ–∑ –¥—É–±–ª—ñ–∫–∞—Ç–∏...")
                
                # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ —Å—É–º—ñ
                if not apply_amount_filter_improved(iframe, amount):
                    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω")
                    continue
                
                # –ó–±–∏—Ä–∞—î–º–æ –∫–æ–¥–∏ –∑–∞–Ω–æ–≤–æ –¥–ª—è —Ü—ñ—î—ó —Å—É–º–∏
                fresh_codes_dict = get_all_bon_codes_from_table(iframe)
                
                if fresh_codes_dict and amount in fresh_codes_dict:
                    fresh_code_objects = fresh_codes_dict[amount]
                    logger.info(f"‚úÖ –ó—ñ–±—Ä–∞–Ω–æ {len(fresh_code_objects)} —Å–≤—ñ–∂–∏—Ö –∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω")
                    # –ü–µ—Ä–µ–ø–∏—Å—É—î–º–æ –∫–æ–¥–∏ –≤ –æ—Å–Ω–æ–≤–Ω–∏–π –º–∞—Å–∏–≤
                    codes_by_amount[amount] = fresh_code_objects
                    fresh_codes_list = [obj['code'] for obj in fresh_code_objects]
                    logger.info(f"üìù –ö–æ–¥–∏ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ: {fresh_codes_list}")
                elif fresh_codes_dict:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–¥—ñ–≤ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ")
                    codes_by_amount[amount] = []
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—ñ–±—Ä–∞—Ç–∏ —Å–≤—ñ–∂—ñ –∫–æ–¥–∏ –¥–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω")
            
            logger.info("‚úÖ –ü–µ—Ä–µ–æ–±—Ä–æ–±–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–±—Ä–æ–±—Ü—ñ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {e}")
    
    # –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏
    logger.info("üîç –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–æ–±—Ä–æ–±–∫–∏...")
    final_result = _validate_final_duplicates(codes_by_amount)
    
    logger.debug("üîç –§—É–Ω–∫—Ü—ñ—è validate_duplicates_after_collection() –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return final_result


def _validate_final_duplicates(codes_by_amount):
    """
    –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ —É —Ñ—ñ–Ω–∞–ª—å–Ω–æ–º—É –Ω–∞–±–æ—Ä—ñ –∫–æ–¥—ñ–≤.
    """
    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∫–æ–¥–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
    all_codes_list = []
    for amount, code_objects in codes_by_amount.items():
        for obj in code_objects:
            all_codes_list.append((obj['code'], amount, obj['status']))
    
    logger.info(f"üìä –ó–∞–≥–∞–ª–æ–º –∑—ñ–±—Ä–∞–Ω–æ {len(all_codes_list)} –∫–æ–¥—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏
    code_counts = {}
    code_amounts = {}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—É–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ–¥—É
    
    for code, amount, status in all_codes_list:
        if code in code_counts:
            code_counts[code] += 1
        else:
            code_counts[code] = 1
            code_amounts[code] = []
        code_amounts[code].append((amount, status))
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
    duplicates = {code: count for code, count in code_counts.items() if count > 1}
    
    if duplicates:
        logger.warning(f"‚ö†Ô∏è –ó–ù–ê–ô–î–ï–ù–û {len(duplicates)} –î–£–ë–õ–Ü–ö–ê–¢–Ü–í –ü–†–û–ú–û–ö–û–î–Ü–í –£ –§–Ü–ù–ê–õ–¨–ù–û–ú–£ –ù–ê–ë–û–†–Ü!")
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–æ–∂–µ–Ω –¥—É–±–ª—ñ–∫–∞—Ç
        for code, count in duplicates.items():
            amounts_statuses = code_amounts[code]
            amounts = set(amt for amt, stat in amounts_statuses)
            logger.warning(f"  üîÑ –ö–æ–¥ {code} –∑—É—Å—Ç—Ä—ñ—á–∞–≤—Å—è {count} —Ä–∞–∑—ñ–≤ –¥–ª—è —Å—É–º: {sorted(amounts)}")
            
            if len(amounts) > 1:
                logger.error(f"  ‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –ö–æ–¥ {code} –º–∞—î —Ä—ñ–∑–Ω—ñ —Å—É–º–∏: {sorted(amounts)}")
            else:
                logger.info(f"  ‚úÖ –ö–æ–¥ {code} –º–∞—î –æ–¥–Ω–∞–∫–æ–≤—É —Å—É–º—É: {list(amounts)[0]} –≥—Ä–Ω")
        
        # –û—á–∏—â–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ - –∑–∞–ª–∏—à–∞—î–º–æ –ª–∏—à–µ –æ–¥–∏–Ω –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–∂–Ω–æ–≥–æ –∫–æ–¥—É
        logger.info("üßπ –û—á–∏—â–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏...")
        cleaned_codes_by_amount = {}
        
        for amount, code_objects in codes_by_amount.items():
            # –ó–±–∏—Ä–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–æ–¥–∏, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Å—Ç–∞—Ç—É—Å
            seen_codes = set()
            cleaned_objects = []
            
            for obj in code_objects:
                code = obj['code']
                if code not in seen_codes:
                    seen_codes.add(code)
                    cleaned_objects.append(obj)
            
            cleaned_codes_by_amount[amount] = cleaned_objects
            
            removed_count = len(code_objects) - len(cleaned_objects)
            if removed_count > 0:
                logger.info(f"  üßπ –î–ª—è —Å—É–º–∏ {amount} –≥—Ä–Ω: –≤–∏–¥–∞–ª–µ–Ω–æ {removed_count} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤, –∑–∞–ª–∏—à–∏–ª–æ—Å—å {len(cleaned_objects)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ–¥—ñ–≤")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        total_after = sum(len(codes) for codes in cleaned_codes_by_amount.values())
        total_before = sum(len(codes) for codes in codes_by_amount.values())
        logger.info(f"‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {total_before} ‚Üí {total_after} –∫–æ–¥—ñ–≤ (–≤–∏–¥–∞–ª–µ–Ω–æ {total_before - total_after} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤)")
        
        return cleaned_codes_by_amount
    else:
        logger.info("‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ—ñ–Ω–∞–ª—å–Ω–æ–º—É –Ω–∞–±–æ—Ä—ñ")
        return codes_by_amount


def download_from_s3():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ—Ç–æ—á–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ –∑ S3."""
    try:
        import boto3
        s3 = boto3.client('s3', region_name=CONFIG['region'])
        bucket = CONFIG['s3_bucket']
        key = CONFIG['s3_key']
        
        logger.info(f"‚òÅÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ –∑ S3: s3://{bucket}/{key}")
        
        response = s3.get_object(Bucket=bucket, Key=key)
        data = json.loads(response['Body'].read().decode('utf-8'))
        
        logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–∏ –∑ S3")
        return data
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ S3: {e}")
        logger.info("üìù –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
        return {}



def select_specific_promo_codes(iframe, promo_codes, page=None):
    """
    –í–∏–±–∏—Ä–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ —á–µ—Ä–µ–∑ —á–µ–∫–±–æ–∫—Å–∏.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î .click() –¥–ª—è —Ç—Ä–∏–≥–µ—Ä—É DOM –ø–æ–¥—ñ–π.
    
    Args:
        iframe: iframe –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        promo_codes: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É
        page: –æ—Å–Ω–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        
    Returns:
        int: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–±—Ä–∞–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
    """
    selected_count = 0
    codes_to_find = set(promo_codes)
    codes_not_found = []
    
    logger.info(f"‚òëÔ∏è –í–∏–±–∏—Ä–∞—î–º–æ {len(codes_to_find)} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤...")

    if not page:
        logger.error("‚ùå –û–±'—î–∫—Ç 'page' –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ")
        return 0

    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —Å–∫—ñ–ª—å–∫–∏ —Ä—è–¥–∫—ñ–≤ –≤–∑–∞–≥–∞–ª—ñ —î –≤ —Ç–∞–±–ª–∏—Ü—ñ
    try:
        all_rows = iframe.locator('table#datagrid tbody tr')
        total_rows = all_rows.count()
        logger.info(f"üìä –í—Å—å–æ–≥–æ —Ä—è–¥–∫—ñ–≤ –≤ —Ç–∞–±–ª–∏—Ü—ñ: {total_rows}")
        
        if total_rows == 0:
            logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è - –Ω–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–±—Ä–∞—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥—É")
            return 0
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ç–∞–±–ª–∏—Ü—ñ: {e}")

    for code_to_find in codes_to_find:
        try:
            # –®—É–∫–∞—î–º–æ —Ä—è–¥–æ–∫ –∑ –ø—Ä–æ–º–æ–∫–æ–¥–æ–º
            row_locator = iframe.locator(f'//tr[td[4][normalize-space(.)="{code_to_find}"]]')
            
            if row_locator.count() == 0:
                codes_not_found.append(code_to_find)
                logger.warning(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä—è–¥–æ–∫ –¥–ª—è: {code_to_find}")
                continue

            row = row_locator
            logger.debug(f"  üéØ –ó–Ω–∞–π–¥–µ–Ω–æ —Ä—è–¥–æ–∫ –¥–ª—è: {code_to_find}")

            # –®—É–∫–∞—î–º–æ —á–µ–∫–±–æ–∫—Å
            checkbox = row.locator('input[type="checkbox"].datagrid-check-control')
            if checkbox.count() == 0:
                checkbox = row.locator('input[type="checkbox"]')

            if checkbox.count() > 0:
                if not checkbox.is_checked():
                    try:
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .click() –¥–ª—è —Ç—Ä–∏–≥–µ—Ä—É DOM –ø–æ–¥—ñ–π
                        checkbox.click()
                        time.sleep(0.05)  # –ó–º–µ–Ω—à—É—é –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑ 0.1 –Ω–∞ 0.05 —Å–µ–∫
                        
                        if checkbox.is_checked():
                            logger.debug(f"  ‚úÖ –í–∏–±—Ä–∞–Ω–æ: {code_to_find}")
                            selected_count += 1
                        else:
                            # Fallback —á–µ—Ä–µ–∑ JavaScript
                            checkbox.evaluate('element => element.checked = true')
                            if checkbox.is_checked():
                                selected_count += 1
                                
                    except Exception as e:
                        logger.warning(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ {code_to_find}: {e}")
                        # Fallback —á–µ—Ä–µ–∑ JavaScript
                        try:
                            checkbox.evaluate('element => element.checked = true')
                            if checkbox.is_checked():
                                selected_count += 1
                        except Exception:
                            pass
                else:
                    logger.debug(f"  ‚úì –í–∂–µ –≤–∏–±—Ä–∞–Ω–∏–π: {code_to_find}")
                    selected_count += 1
            else:
                logger.warning(f"  ‚ö†Ô∏è –ß–µ–∫–±–æ–∫—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è: {code_to_find}")

        except Exception as e:
            logger.warning(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ {code_to_find}: {e}")
            continue
            
    # –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
    time.sleep(0.1)  # –ó–º–µ–Ω—à—É—é –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑ 0.2 –Ω–∞ 0.1 —Å–µ–∫
    final_checked_count = iframe.locator('table#datagrid tbody input[type="checkbox"]:checked').count()
    
    # –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logger.info(f"‚úÖ –í–∏–±—Ä–∞–Ω–æ {final_checked_count} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
    
    if codes_not_found:
        logger.warning(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ {len(codes_not_found)} –∫–æ–¥—ñ–≤ –∑ {len(codes_to_find)}")
        logger.info(f"üìã –ö–æ–¥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ: {', '.join(codes_not_found[:10])}")  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 10

    return final_checked_count

def delete_selected_codes(iframe, page=None):
    """
    –ù–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–ª—è—î –¥—ñ–∞–ª–æ–≥–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
    –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–¥–±–∞—á–∞—î, —â–æ —á–µ–∫–±–æ–∫—Å–∏ –í–ñ–ï –≤–∏–±—Ä–∞–Ω—ñ.
    
    Args:
        iframe: iframe –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        page: –æ—Å–Ω–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥—ñ–∞–ª–æ–≥—ñ–≤)
        
    Returns:
        bool: —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó
    """
    if not page:
        logger.error("‚ùå –û–±'—î–∫—Ç 'page' –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –Ω–µ–º–æ–∂–ª–∏–≤–æ –æ–±—Ä–æ–±–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
        return False

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —â–æ –≤–∏–¥–∞–ª—è—Ç–∏
        selected_count = iframe.locator('table#datagrid tbody input[type="checkbox"]:checked').count()
        if selected_count == 0:
            logger.warning("‚ö†Ô∏è –ù–µ–º–∞—î –≤–∏–±—Ä–∞–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            return False
            
        logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ {selected_count} –≤–∏–±—Ä–∞–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤...")

        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É
        dialog_handled = False
        def handle_dialog(dialog):
            nonlocal dialog_handled
            logger.info(f"üí¨ –û—Ç—Ä–∏–º–∞–Ω–æ –¥—ñ–∞–ª–æ–≥: {dialog.message}")
            dialog.accept()
            dialog_handled = True
            logger.info("‚úÖ –î—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ")
        
        page.once('dialog', handle_dialog)

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ JavaScript
        function_exists = iframe.evaluate('typeof removeSelectedGrids === "function"')
        
        if function_exists:
            logger.info("ÔøΩÔ∏è –í–∏–∫–ª–∏–∫–∞—î–º–æ removeSelectedGrids()...")
            iframe.evaluate('removeSelectedGrids()')
        else:
            logger.warning("‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è removeSelectedGrids –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        # –û—á—ñ–∫—É—î–º–æ –ø–æ—è–≤–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        time.sleep(0.5)
        
        # –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        confirm_selectors = [
            '.confirm-modal__button--ok',
            'button:has-text("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")',
            '#dialog-window .confirm-modal__button--ok'
        ]
        
        button_found = False
        for selector in confirm_selectors:
            confirm_buttons = iframe.locator(selector)
            if confirm_buttons.count() > 0:
                logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {selector}")
                confirm_buttons.nth(0).click()
                logger.info("üéØ –ö–Ω–æ–ø–∫—É '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ!")
                button_found = True
                break
        
        if not button_found:
            logger.info("‚å®Ô∏è –ö–Ω–æ–ø–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É—î–º–æ Enter...")
            iframe.press('Enter')
        
        # –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
        time.sleep(1)

        # –ß–µ–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        try:
            iframe.locator('#datagrid-loader').wait_for(state='hidden', timeout=10000)
        except Exception:
            pass  # –Ø–∫—â–æ –ª–æ–∞–¥–µ—Ä –Ω–µ –∑'—è–≤–∏–≤—Å—è, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        remaining_selected = iframe.locator('table#datagrid tbody input[type="checkbox"]:checked').count()
        
        if remaining_selected == 0:
            logger.info("‚úÖ –í—Å—ñ –≤–∏–±—Ä–∞–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è –ó–∞–ª–∏—à–∏–ª–æ—Å—è {remaining_selected} –Ω–µ–≤–∏–¥–∞–ª–µ–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: {e}")
        return False

def delete_specific_promo_codes(iframe, promo_codes, page=None):
    """
    –í–∏–¥–∞–ª—è—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏: –≤–∏–±–∏—Ä–∞—î —ó—Ö —á–µ—Ä–µ–∑ —á–µ–∫–±–æ–∫—Å–∏ —ñ –≤–∏–¥–∞–ª—è—î –æ–¥–Ω–∏–º –ø–∞–∫–µ—Ç–æ–º.
    
    Args:
        iframe: iframe –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        promo_codes: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        page: –æ—Å–Ω–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –∞–ª–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω)
        
    Returns:
        dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –≤–∏–¥–∞–ª–µ–Ω–∏—Ö –∫–æ–¥—ñ–≤
    """
    try:
        logger.info(f"üéØ –í–∏–¥–∞–ª–µ–Ω–Ω—è {len(promo_codes)} –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤...")
        
        if not promo_codes:
            logger.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π")
            return {"selected": 0, "deleted": 0, "success": False}
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω —Ç–∞–±–ª–∏—Ü—ñ
        try:
            all_rows = iframe.locator('table#datagrid tbody tr')
            total_rows = all_rows.count()
            logger.info(f"üìä –í—Å—å–æ–≥–æ —Ä—è–¥–∫—ñ–≤ –≤ —Ç–∞–±–ª–∏—Ü—ñ: {total_rows}")
            
            if total_rows == 0:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è - –Ω–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥—É")
                return {"selected": 0, "deleted": 0, "success": False}
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ç–∞–±–ª–∏—Ü—ñ: {e}")
        
        # 1. –í–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–º–æ–∫–æ–¥–∏ —á–µ—Ä–µ–∑ —á–µ–∫–±–æ–∫—Å–∏
        selected_count = select_specific_promo_codes(iframe, promo_codes, page)
        
        if selected_count == 0:
            logger.warning("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–±—Ä–∞—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥—É")
            logger.info("üí° –ú–æ–∂–ª–∏–≤–æ, —Ü—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ –≤–∂–µ –±—É–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ –∞–±–æ —ó—Ö –Ω–µ–º–∞—î –≤ –ø–æ—Ç–æ—á–Ω—ñ–π —Ç–∞–±–ª–∏—Ü—ñ")
            return {"selected": 0, "deleted": 0, "success": False}
        
        logger.info(f"‚úÖ –í–∏–±—Ä–∞–Ω–æ {selected_count} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –∑ {len(promo_codes)} –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö")
        
        # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º, —â–æ–± –¥–∞—Ç–∏ UI –æ–Ω–æ–≤–∏—Ç–∏—Å—å
        time.sleep(0.5)

        # 2. –í–∏–¥–∞–ª—è—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
        headed_mode = os.getenv('PLAYWRIGHT_HEADED', 'true').lower() in ['true', '1', 'yes']
        
        if headed_mode:
            logger.info("üñ•Ô∏è HEADED —Ä–µ–∂–∏–º: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            delete_success = delete_selected_codes(iframe, page)
        else:
            logger.info("üëª HEADLESS —Ä–µ–∂–∏–º: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            delete_success = delete_selected_codes_headless_optimized(iframe, page)
        
        if delete_success:
            logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ {selected_count} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤!")
            return {"selected": selected_count, "deleted": selected_count, "success": True}
        else:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤–∏–±—Ä–∞–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
            # –†–∞—Ö—É—î–º–æ, —Å–∫—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—å–Ω–æ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ
            final_checked_count = iframe.locator('table#datagrid tbody input[type="checkbox"]:checked').count()
            actually_deleted = selected_count - final_checked_count
            return {"selected": selected_count, "deleted": actually_deleted, "success": False}
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤: {e}")
        return {"selected": 0, "deleted": 0, "success": False, "error": str(e)}


def delete_selected_codes_headless_optimized(iframe, page=None):
    """
    –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è headless —Ä–µ–∂–∏–º—É.
    –ù–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–ª—è—î –¥—ñ–∞–ª–æ–≥–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
    –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–¥–±–∞—á–∞—î, —â–æ —á–µ–∫–±–æ–∫—Å–∏ –í–ñ–ï –≤–∏–±—Ä–∞–Ω—ñ.
    
    Args:
        iframe: iframe –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        page: –æ—Å–Ω–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥—ñ–∞–ª–æ–≥—ñ–≤)
        
    Returns:
        bool: —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó
    """
    if not page:
        logger.error("‚ùå –û–±'—î–∫—Ç 'page' –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –Ω–µ–º–æ–∂–ª–∏–≤–æ –æ–±—Ä–æ–±–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
        return False

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —â–æ –≤–∏–¥–∞–ª—è—Ç–∏
        selected_count = iframe.locator('table#datagrid tbody input[type="checkbox"]:checked').count()
        if selected_count == 0:
            logger.warning("‚ö†Ô∏è –ù–µ–º–∞—î –≤–∏–±—Ä–∞–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            return False
            
        logger.info(f"üóëÔ∏è [HEADLESS] –í–∏–¥–∞–ª—è—î–º–æ {selected_count} –≤–∏–±—Ä–∞–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤...")

        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É (–¥–ª—è headless —Ä–µ–∂–∏–º—É)
        dialog_handled = False
        def handle_dialog(dialog):
            nonlocal dialog_handled
            logger.info(f"üí¨ [HEADLESS] –û—Ç—Ä–∏–º–∞–Ω–æ –¥—ñ–∞–ª–æ–≥: {dialog.message}")
            dialog.accept()
            dialog_handled = True
            logger.info("‚úÖ [HEADLESS] –î—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ")
        
        page.on('dialog', handle_dialog)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        function_exists = iframe.evaluate('typeof removeSelectedGrids === "function"')
        
        if function_exists:
            logger.info("üîß [HEADLESS] –í–∏–∫–ª–∏–∫–∞—î–º–æ removeSelectedGrids()...")
            iframe.evaluate('removeSelectedGrids()')
        else:
            logger.warning("‚ö†Ô∏è [HEADLESS] –§—É–Ω–∫—Ü—ñ—è removeSelectedGrids –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, —à—É–∫–∞—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å–ø–æ—Å–æ–±–∏...")
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–±: –ø–æ—à—É–∫ –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            delete_button_selectors = [
                'button[onclick*="removeSelectedGrids"]',
                'input[onclick*="removeSelectedGrids"]',
                'a[onclick*="removeSelectedGrids"]',
                '.btn-delete',
                '#delete-selected',
                'button:has-text("–í–∏–¥–∞–ª–∏—Ç–∏")',
                'input[value*="–í–∏–¥–∞–ª–∏—Ç–∏"]',
                '[title*="–í–∏–¥–∞–ª–∏—Ç–∏"]'
            ]
            
            button_found = False
            for selector in delete_button_selectors:
                buttons = iframe.locator(selector)
                if buttons.count() > 0:
                    logger.info(f"‚úÖ [HEADLESS] –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {selector}")
                    buttons.first.click()
                    button_found = True
                    break
            
            if not button_found:
                logger.error("‚ùå [HEADLESS] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Å–ø–æ—Å–æ–± –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
                return False
        
        # –û—á—ñ–∫—É—î–º–æ –ø–æ—è–≤–∏ –¥—ñ–∞–ª–æ–≥—É –∞–±–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ (–∑–±—ñ–ª—å—à—É—é —á–∞—Å –¥–ª—è headless)
        logger.info("‚è≥ [HEADLESS] –û—á—ñ–∫—É—î–º–æ –ø–æ—è–≤–∏ –¥—ñ–∞–ª–æ–≥—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è...")
        time.sleep(1.5)  # –ó–±—ñ–ª—å—à—É—é —á–∞—Å –¥–ª—è headless —Ä–µ–∂–∏–º—É
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–≤ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –¥—ñ–∞–ª–æ–≥
        if dialog_handled:
            logger.info("‚úÖ [HEADLESS] –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –¥—ñ–∞–ª–æ–≥ –æ–±—Ä–æ–±–ª–µ–Ω–æ, –æ–ø–µ—Ä–∞—Ü—ñ—è –º–∞—î –∑–∞–≤–µ—Ä—à–∏—Ç–∏—Å—å")
        else:
            # –®—É–∫–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            logger.info("üîç [HEADLESS] –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –¥—ñ–∞–ª–æ–≥ –Ω–µ –∑'—è–≤–∏–≤—Å—è, —à—É–∫–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ...")
            
            confirm_selectors = [
                '.confirm-modal__button--ok',
                'button:has-text("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")',
                'button:has-text("–¢–∞–∫")',
                'button:has-text("OK")',
                '#dialog-window .confirm-modal__button--ok',
                '.modal-footer button.btn-primary',
                '.ui-dialog-buttonset button:first-child',
                'button[onclick*="confirm"]',
                '.dialog-confirm-button'
            ]
            
            button_found = False
            for selector in confirm_selectors:
                confirm_buttons = iframe.locator(selector)
                if confirm_buttons.count() > 0:
                    logger.info(f"‚úÖ [HEADLESS] –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {selector}")
                    confirm_buttons.first.click()
                    logger.info("üéØ [HEADLESS] –ö–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ!")
                    button_found = True
                    time.sleep(0.5)
                    break
            
            if not button_found:
                logger.info("‚å®Ô∏è [HEADLESS] –ö–Ω–æ–ø–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É—î–º–æ Enter —Ç–∞ JavaScript...")
                
                # –°–ø—Ä–æ–±–∞ 1: Enter –Ω–∞ iframe
                try:
                    iframe.press('Enter')
                    time.sleep(0.5)
                except Exception:
                    pass
                
                # –°–ø—Ä–æ–±–∞ 2: JavaScript –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                try:
                    iframe.evaluate("""
                        // –ü—Ä–æ–±—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —á–µ—Ä–µ–∑ —Ä—ñ–∑–Ω—ñ —Å–ø–æ—Å–æ–±–∏
                        if (typeof confirmDelete === 'function') {
                            confirmDelete();
                        } else if (typeof confirm !== 'undefined') {
                            // –Ø–∫—â–æ —î –≥–ª–æ–±–∞–ª—å–Ω–∏–π confirm, –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ –π–æ–≥–æ
                            window.confirm = function() { return true; };
                        }
                        
                        // –Ü–º—ñ—Ç—É—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è Enter –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ
                        const event = new KeyboardEvent('keydown', {
                            key: 'Enter',
                            code: 'Enter',
                            keyCode: 13,
                            bubbles: true
                        });
                        document.dispatchEvent(event);
                        
                        // –°–ø—Ä–æ–±—É—î–º–æ —Ç—Ä–∏–≥–µ—Ä–Ω—É—Ç–∏ –ø–æ–¥—ñ—é –Ω–∞ —Ñ–æ—Ä–º—ñ
                        const forms = document.querySelectorAll('form');
                        if (forms.length > 0) {
                            forms[0].dispatchEvent(new Event('submit', {bubbles: true}));
                        }
                    """)
                    logger.info("üîß [HEADLESS] –í–∏–∫–æ–Ω–∞–Ω–æ JavaScript –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è")
                except Exception as js_error:
                    logger.warning(f"‚ö†Ô∏è [HEADLESS] JavaScript –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è: {js_error}")
        
        # –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó (–∑–±—ñ–ª—å—à—É—é—á–∏ —á–∞—Å –¥–ª—è headless)
        logger.info("‚è≥ [HEADLESS] –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–Ω—è...")
        time.sleep(3.0)  # –ó–±—ñ–ª—å—à—É—é —á–∞—Å –¥–ª—è headless —Ä–µ–∂–∏–º—É

        # –ß–µ–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        logger.info("üîÑ [HEADLESS] –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ...")
        try:
            # –°–ø–æ—á–∞—Ç–∫—É —á–µ–∫–∞—î–º–æ –ø–æ—è–≤–∏ –ª–æ–∞–¥–µ—Ä–∞
            loader = iframe.locator('#datagrid-loader')
            try:
                loader.wait_for(state='visible', timeout=3000)
                logger.info("‚è≥ [HEADLESS] –õ–æ–∞–¥–µ—Ä –∑'—è–≤–∏–≤—Å—è, —á–µ–∫–∞—î–º–æ –π–æ–≥–æ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è...")
                loader.wait_for(state='hidden', timeout=15000)
                logger.info("‚úÖ [HEADLESS] –õ–æ–∞–¥–µ—Ä –∑–Ω–∏–∫, —Ç–∞–±–ª–∏—Ü—è –æ–Ω–æ–≤–ª–µ–Ω–∞")
            except Exception:
                logger.info("‚è≥ [HEADLESS] –õ–æ–∞–¥–µ—Ä –Ω–µ –∑'—è–≤–∏–≤—Å—è, —á–µ–∫–∞—î–º–æ —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó –º–µ—Ä–µ–∂—ñ...")
                iframe.page.wait_for_load_state('networkidle', timeout=8000)
        except Exception as wait_error:
            logger.warning(f"‚ö†Ô∏è [HEADLESS] –ü–æ–º–∏–ª–∫–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ: {wait_error}")
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó
        time.sleep(1.0)
        
        # –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        remaining_selected = iframe.locator('table#datagrid tbody input[type="checkbox"]:checked').count()
        total_rows_now = iframe.locator('table#datagrid tbody tr').count()
        
        logger.info(f"üìä [HEADLESS] –ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ –≤ —Ç–∞–±–ª–∏—Ü—ñ: {total_rows_now}")
        logger.info(f"üìä [HEADLESS] –ó–∞–ª–∏—à–∏–ª–æ—Å—è –≤–∏–±—Ä–∞–Ω–∏—Ö —á–µ–∫–±–æ–∫—Å—ñ–≤: {remaining_selected}")
        
        if remaining_selected == 0:
            logger.info("‚úÖ [HEADLESS] –í—Å—ñ –≤–∏–±—Ä–∞–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
            return True
        else:
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: –º–æ–∂–ª–∏–≤–æ, —á–µ–∫–±–æ–∫—Å–∏ –ø—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—É–ª–∏—Å—è, –∞–ª–µ –∫–æ–¥–∏ –≤–∏–¥–∞–ª–∏–ª–∏—Å—è
            if remaining_selected < selected_count:
                deleted_count = selected_count - remaining_selected
                logger.info(f"‚úÖ [HEADLESS] –ß–∞—Å—Ç–∫–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ: –≤–∏–¥–∞–ª–µ–Ω–æ {deleted_count} –∑ {selected_count} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è [HEADLESS] –û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è —É—Å–ø—ñ—à–Ω–æ")
                return False
        
    except Exception as e:
        logger.error(f"‚ùå [HEADLESS] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: {e}")
        return False

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤.
    –¢–µ–ø–µ—Ä –ø—ñ–¥—Ç—Ä–∏–º—É—î –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏.
    """
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –≤ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
    parallel_mode = CONFIG.get('parallel_processes', 1) > 1
    
    if parallel_mode:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —É –ü–ê–†–ê–õ–ï–õ–¨–ù–û–ú–£ —Ä–µ–∂–∏–º—ñ")
        return parallel_promo_management()
    else:
        logger.info("üìù –ó–∞–ø—É—Å–∫ —É –ó–í–ò–ß–ê–ô–ù–û–ú–£ —Ä–µ–∂–∏–º—ñ")
        return smart_promo_management_main()

if __name__ == "__main__":
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è multiprocessing –Ω–∞ macOS
    multiprocessing.set_start_method('spawn', force=True)
    main()
